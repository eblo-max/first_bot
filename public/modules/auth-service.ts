/**
 * –°–ª—É–∂–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Telegram WebApp
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏
 */

import type { TelegramWebApp, ApiResponse, AuthResponse, User } from '../types/profile-types.js';

// =============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
// =============================================================================

const AUTH_CONFIG = {
    API_BASE_URL: '/api',
    TOKEN_KEY: 'criminal_trust_token',
    MAX_RETRY_ATTEMPTS: 3,
    RETRY_DELAY: 1000,
    TOKEN_REFRESH_THRESHOLD: 300000 // 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
};

// =============================================================================
// –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –°–õ–£–ñ–ë–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
// =============================================================================

export class AuthService {
    private token: string | null = null;
    private telegramApp: TelegramWebApp | null = null;
    private isInitialized = false;
    private retryCount = 0;

    constructor() {
        this.initTelegramApp();
    }

    // =========================================================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP
    // =========================================================================

    private initTelegramApp(): void {
        try {
            this.telegramApp = window.Telegram?.WebApp || null;

            if (this.telegramApp) {
                this.telegramApp.ready();
                this.telegramApp.expand();
                console.log('üöÄ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                this.isInitialized = true;
            } else {
                console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
        }
    }

    // =========================================================================
    // –ú–ï–¢–û–î–´ –ü–û–õ–£–ß–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê
    // =========================================================================

    private getStoredToken(): string | null {
        try {
            console.log(`üîç localStorage —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:`, {
                auth_token: localStorage.getItem('auth_token'),
                token: localStorage.getItem('token'),
                criminal_trust_token: localStorage.getItem(AUTH_CONFIG.TOKEN_KEY),
                all_keys: Object.keys(localStorage),
                localStorage_length: localStorage.length
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            const token = localStorage.getItem('auth_token') ||
                localStorage.getItem('token') ||
                localStorage.getItem(AUTH_CONFIG.TOKEN_KEY);
            console.log(`üì± –ò—â–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:`, token ? `${token.substring(0, 20)}...` : '–ù–ï –ù–ê–ô–î–ï–ù');
            return token;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage:', error);
            return null;
        }
    }

    private setToken(token: string | null): void {
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω:`, token ? `${token.substring(0, 20)}...` : '–ü–£–°–¢–û–ô –¢–û–ö–ï–ù');
        this.token = token;
        if (token) {
            localStorage.setItem(AUTH_CONFIG.TOKEN_KEY, token); // –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
            localStorage.setItem('auth_token', token); // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            localStorage.setItem('token', token); // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
            console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`, {
                saved_auth_token: localStorage.getItem('auth_token'),
                saved_token: localStorage.getItem('token'),
                saved_main: localStorage.getItem(AUTH_CONFIG.TOKEN_KEY),
                in_memory: this.token ? `${this.token.substring(0, 20)}...` : '–ù–ï–¢'
            });
        } else {
            localStorage.removeItem(AUTH_CONFIG.TOKEN_KEY);
            localStorage.removeItem('auth_token');
            localStorage.removeItem('token');
        }
    }

    private clearToken(): void {
        console.log(`üóëÔ∏è –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω`);
        this.token = null;
        localStorage.removeItem(AUTH_CONFIG.TOKEN_KEY);
        localStorage.removeItem('auth_token');
        localStorage.removeItem('token');
    }

    public getCurrentToken(): string | null {
        const currentToken = this.token || this.getStoredToken();
        console.log(`üîç –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω:`, currentToken ? `${currentToken.substring(0, 20)}...` : '–¢–û–ö–ï–ù –ù–ï –ù–ê–ô–î–ï–ù');
        return currentToken;
    }

    // =========================================================================
    // –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ß–ï–†–ï–ó TELEGRAM
    // =========================================================================

    public async authenticate(): Promise<{ success: boolean; user?: User; error?: string }> {
        console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
        const storedToken = this.getStoredToken();
        if (storedToken) {
            this.token = storedToken;
            console.log('üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', storedToken.substring(0, 20) + '...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            const verification = await this.verifyToken(storedToken);
            if (verification.success && verification.user) {
                console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                return { success: true, user: verification.user };
            } else {
                console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º');
                this.clearToken();
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const telegramData = this.getTelegramUserData();
        if (!telegramData) {
            return { success: false, error: '–î–∞–Ω–Ω—ã–µ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã' };
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
        try {
            const authResult = await this.performAuth(telegramData);
            console.log('üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authResult);

            // –°–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { status: 'success', data: { token, user } }
            if ((authResult.success || authResult.status === 'success') && authResult.data) {
                this.setToken(authResult.data.token);
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                return { success: true, user: authResult.data.user };
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authResult.error || authResult.message);
                return { success: false, error: authResult.error || authResult.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' };
            }
        } catch (error) {
            console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' };
        }
    }

    // =========================================================================
    // –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó TELEGRAM
    // =========================================================================

    private getTelegramUserData(): any {
        if (!this.telegramApp) {
            console.log('üîç Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º developer mode');
            return this.getDeveloperModeData();
        }

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º initData –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (this.telegramApp.initData) {
                console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram initData');
                return {
                    initData: this.telegramApp.initData,
                    user: this.telegramApp.initDataUnsafe?.user
                };
            }

            // Fallback –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ initDataUnsafe
            if (this.telegramApp.initDataUnsafe?.user) {
                console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram user data');
                return {
                    user: this.telegramApp.initDataUnsafe.user
                };
            }

            console.log('‚ö†Ô∏è Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º developer mode');
            return this.getDeveloperModeData();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö:', error);
            return this.getDeveloperModeData();
        }
    }

    private getDeveloperModeData(): any {
        console.log('üõ†Ô∏è Developer mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        return {
            user: {
                id: 5731136459,
                first_name: 'Developer',
                username: 'dev_mode'
            },
            isDeveloperMode: true
        };
    }

    // =========================================================================
    // API –ó–ê–ü–†–û–°–´
    // =========================================================================

    private async performAuth(telegramData: any): Promise<ApiResponse<AuthResponse>> {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API /auth/init
        const requestData = telegramData.initData
            ? { initData: telegramData.initData }
            : telegramData; // Fallback –¥–ª—è developer mode

        const response = await this.makeAuthRequest('/auth/init', {
            method: 'POST',
            body: JSON.stringify(requestData)
        });

        return response;
    }

    private async verifyToken(token: string): Promise<{ success: boolean; user?: User }> {
        try {
            const response = await this.makeAuthRequest('/auth/verify', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (response.success && response.data) {
                return { success: true, user: response.data.user };
            } else {
                return { success: false };
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            return { success: false };
        }
    }

    private async makeAuthRequest(endpoint: string, options: RequestInit = {}): Promise<ApiResponse<any>> {
        const url = `${AUTH_CONFIG.API_BASE_URL}${endpoint}`;

        const defaultHeaders = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };

        const requestOptions: RequestInit = {
            ...options,
            headers: {
                ...defaultHeaders,
                ...options.headers
            }
        };

        try {
            console.log(`üåê ${requestOptions.method || 'GET'} ${url}`);

            const response = await fetch(url, requestOptions);
            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || data.message || `HTTP ${response.status}`);
            }

            return data;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}:`, error);

            // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏
            if (this.retryCount < AUTH_CONFIG.MAX_RETRY_ATTEMPTS && this.isNetworkError(error)) {
                this.retryCount++;
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å ${this.retryCount}/${AUTH_CONFIG.MAX_RETRY_ATTEMPTS}`);

                await this.delay(AUTH_CONFIG.RETRY_DELAY * this.retryCount);
                return this.makeAuthRequest(endpoint, options);
            }

            this.retryCount = 0;
            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    }

    // =========================================================================
    // –£–¢–ò–õ–ò–¢–´
    // =========================================================================

    private isNetworkError(error: any): boolean {
        return error instanceof TypeError && error.message === 'Failed to fetch';
    }

    private delay(ms: number): Promise<void> {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    public isAuthenticated(): boolean {
        return !!this.getCurrentToken();
    }

    public getTelegramApp(): TelegramWebApp | null {
        return this.telegramApp;
    }

    public isInitializedApp(): boolean {
        return this.isInitialized;
    }

    public applyTelegramTheme(): void {
        if (this.telegramApp && this.telegramApp.colorScheme) {
            document.documentElement.setAttribute('data-theme', this.telegramApp.colorScheme);
            console.log(`üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–µ–º–∞ Telegram: ${this.telegramApp.colorScheme}`);
        }
    }

    public setupBackButton(callback: () => void): void {
        if (this.telegramApp && this.telegramApp.BackButton) {
            this.telegramApp.BackButton.show();
            this.telegramApp.BackButton.onClick(callback);
            console.log('üîô –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }
    }

    public logout(): void {
        console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...');
        this.clearToken();
    }

    // =========================================================================
    // HAPTIC FEEDBACK
    // =========================================================================

    public hapticFeedback(type: 'success' | 'error' | 'warning' | 'light' | 'medium' | 'heavy'): void {
        if (!this.telegramApp?.HapticFeedback) return;

        try {
            switch (type) {
                case 'success':
                case 'error':
                case 'warning':
                    this.telegramApp.HapticFeedback.notificationOccurred(type);
                    break;
                case 'light':
                case 'medium':
                case 'heavy':
                    this.telegramApp.HapticFeedback.impactOccurred(type);
                    break;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ haptic feedback:', error);
        }
    }
}

// =============================================================================
// –≠–ö–°–ü–û–†–¢ SINGLETON –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê
// =============================================================================

export const authService = new AuthService(); 