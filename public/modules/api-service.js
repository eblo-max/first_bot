/**
 * API —Å–ª—É–∂–±–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–º
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞–º–∏
 */
import { authService } from './auth-service.js';
// =============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API
// =============================================================================
const API_CONFIG = {
    BASE_URL: '/api',
    TIMEOUT: 30000,
    MAX_RETRIES: 3,
    RETRY_DELAY: 1000,
    CACHE_TTL: 60000, // 1 –º–∏–Ω—É—Ç–∞ –∫—ç—à
};
// =============================================================================
// –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° API –°–õ–£–ñ–ë–´
// =============================================================================
export class ApiService {
    constructor() {
        this.cache = new Map();
        this.pendingRequests = new Map();
    }
    // =========================================================================
    // –û–°–ù–û–í–ù–´–ï HTTP –ú–ï–¢–û–î–´
    // =========================================================================
    async makeRequest(endpoint, options = {}, useCache = false, cacheTTL = API_CONFIG.CACHE_TTL) {
        const url = `${API_CONFIG.BASE_URL}${endpoint}`;
        const cacheKey = `${options.method || 'GET'}:${url}:${JSON.stringify(options.body)}`;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (useCache && this.isCacheValid(cacheKey)) {
            console.log(`üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞: ${endpoint}`);
            return { success: true, data: this.cache.get(cacheKey).data };
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã
        if (this.pendingRequests.has(cacheKey)) {
            console.log(`‚è≥ –û–∂–∏–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å: ${endpoint}`);
            return this.pendingRequests.get(cacheKey);
        }
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        const requestPromise = this.executeRequest(url, options, cacheKey, useCache, cacheTTL);
        this.pendingRequests.set(cacheKey, requestPromise);
        try {
            const result = await requestPromise;
            return result;
        }
        finally {
            this.pendingRequests.delete(cacheKey);
        }
    }
    async executeRequest(url, options, cacheKey, useCache, cacheTTL) {
        const token = authService.getCurrentToken();
        const defaultHeaders = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };
        if (token) {
            defaultHeaders['Authorization'] = `Bearer ${token}`;
        }
        const requestOptions = {
            ...options,
            headers: {
                ...defaultHeaders,
                ...options.headers
            }
        };
        console.log(`üåê ${requestOptions.method || 'GET'} ${url}`);
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.TIMEOUT);
            const response = await fetch(url, {
                ...requestOptions,
                signal: controller.signal
            });
            clearTimeout(timeoutId);
            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.error || data.message || `HTTP ${response.status}`);
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if (useCache && data.success) {
                this.setCache(cacheKey, data.data, cacheTTL);
            }
            return data;
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}:`, error);
            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    }
    // =========================================================================
    // –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–≠–®–ï–ú
    // =========================================================================
    isCacheValid(key) {
        const entry = this.cache.get(key);
        if (!entry)
            return false;
        const now = Date.now();
        return (now - entry.timestamp) < entry.ttl;
    }
    setCache(key, data, ttl) {
        this.cache.set(key, {
            data,
            timestamp: Date.now(),
            ttl
        });
    }
    clearCache(pattern) {
        if (pattern) {
            for (const key of this.cache.keys()) {
                if (key.includes(pattern)) {
                    this.cache.delete(key);
                }
            }
        }
        else {
            this.cache.clear();
        }
        console.log('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');
    }
    // =========================================================================
    // API –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–û–§–ò–õ–Ø
    // =========================================================================
    async getUserProfile() {
        return this.makeRequest('/profile', {}, true);
    }
    async updateUserProfile(profileData) {
        const result = await this.makeRequest('/profile', {
            method: 'PUT',
            body: JSON.stringify(profileData)
        });
        // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if (result.success) {
            this.clearCache('/profile');
        }
        return result;
    }
    async getUserStats(userId) {
        const endpoint = userId ? `/profile/stats/${userId}` : '/profile/stats';
        return this.makeRequest(endpoint, {}, true, API_CONFIG.CACHE_TTL / 2); // –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    }
    // =========================================================================
    // API –ú–ï–¢–û–î–´ –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–ô
    // =========================================================================
    async getUserAchievements() {
        return this.makeRequest('/achievements', {}, true);
    }
    async unlockAchievement(achievementId) {
        const result = await this.makeRequest('/achievements/unlock', {
            method: 'POST',
            body: JSON.stringify({ achievementId })
        });
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (result.success) {
            this.clearCache('/achievements');
            this.clearCache('/profile'); // –ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        }
        return result;
    }
    async getAchievementProgress() {
        return this.makeRequest('/achievements/progress', {}, true, API_CONFIG.CACHE_TTL / 4);
    }
    // =========================================================================
    // API –ú–ï–¢–û–î–´ –î–õ–Ø –õ–ò–î–ï–†–ë–û–†–î–ê
    // =========================================================================
    async getLeaderboard(period = 'day') {
        return this.makeRequest(`/leaderboard/${period}`, {}, true, API_CONFIG.CACHE_TTL / 2);
    }
    async getUserPosition(period = 'day') {
        return this.makeRequest(`/leaderboard/${period}/position`, {}, true, API_CONFIG.CACHE_TTL / 2);
    }
    // =========================================================================
    // API –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ì–†–û–í–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    // =========================================================================
    async submitGameResult(gameData) {
        const result = await this.makeRequest('/game/result', {
            method: 'POST',
            body: JSON.stringify(gameData)
        });
        // –û—á–∏—â–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—ç—à–∏ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
        if (result.success) {
            this.clearCache('/profile');
            this.clearCache('/achievements');
            this.clearCache('/leaderboard');
        }
        return result;
    }
    async getGameHistory(limit = 10, offset = 0) {
        return this.makeRequest(`/game/history?limit=${limit}&offset=${offset}`, {}, true);
    }
    // =========================================================================
    // API –ú–ï–¢–û–î–´ –î–õ–Ø –ê–í–ê–¢–ê–†–û–í
    // =========================================================================
    async getUserAvatar(telegramId) {
        try {
            const cacheKey = `avatar:${telegramId}`;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞–≤–∞—Ç–∞—Ä–æ–≤ (–±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π)
            if (this.isCacheValid(cacheKey)) {
                return this.cache.get(cacheKey).data;
            }
            const response = await this.makeRequest(`/user/avatar/${telegramId}`);
            if (response.success && response.data?.photoUrl) {
                // –ö—ç—à–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä –Ω–∞ 1 —á–∞—Å
                this.setCache(cacheKey, response.data.photoUrl, 3600000);
                return response.data.photoUrl;
            }
            return null;
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
            return null;
        }
    }
    // =========================================================================
    // –ü–ê–ö–ï–¢–ù–´–ï –ó–ê–ü–†–û–°–´
    // =========================================================================
    async getBatchData() {
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        try {
            const [profileResult, achievementsResult, leaderboardResult, statsResult] = await Promise.allSettled([
                this.getUserProfile(),
                this.getUserAchievements(),
                this.getLeaderboard('day'),
                this.getUserStats()
            ]);
            const result = {};
            if (profileResult.status === 'fulfilled' && profileResult.value.success) {
                result.profile = profileResult.value.data;
            }
            if (achievementsResult.status === 'fulfilled' && achievementsResult.value.success) {
                result.achievements = achievementsResult.value.data;
            }
            if (leaderboardResult.status === 'fulfilled' && leaderboardResult.value.success) {
                result.leaderboard = leaderboardResult.value.data;
            }
            if (statsResult.status === 'fulfilled' && statsResult.value.success) {
                result.stats = statsResult.value.data;
            }
            console.log('‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return result;
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }
    // =========================================================================
    // –£–¢–ò–õ–ò–¢–´
    // =========================================================================
    getConnectionStatus() {
        if (!navigator.onLine)
            return 'offline';
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const connection = navigator.connection;
        if (connection) {
            if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {
                return 'slow';
            }
        }
        return 'online';
    }
    getCacheInfo() {
        return {
            size: this.cache.size,
            keys: Array.from(this.cache.keys())
        };
    }
    // =========================================================================
    // –ú–ï–¢–û–î–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
    // =========================================================================
    async healthCheck() {
        try {
            const response = await this.makeRequest('/health');
            return response.success;
        }
        catch {
            return false;
        }
    }
    async ping() {
        const start = Date.now();
        try {
            await this.makeRequest('/ping');
            return Date.now() - start;
        }
        catch {
            return -1;
        }
    }
}
// =============================================================================
// –≠–ö–°–ü–û–†–¢ SINGLETON –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê
// =============================================================================
export const apiService = new ApiService();
