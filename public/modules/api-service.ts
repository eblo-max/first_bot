/**
 * API —Å–ª—É–∂–±–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–º
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞–º–∏
 */

import type {
    ApiResponse,
    User,
    Achievement,
    LeaderboardData,
    LeaderboardPeriod
} from '../types/profile-types.js';
import { authService } from './auth-service.js';

// =============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API
// =============================================================================

const API_CONFIG = {
    BASE_URL: '/api',
    TIMEOUT: 30000,
    MAX_RETRIES: 3,
    RETRY_DELAY: 1000,
    CACHE_TTL: 60000, // 1 –º–∏–Ω—É—Ç–∞ –∫—ç—à
};

interface CacheEntry<T> {
    data: T;
    timestamp: number;
    ttl: number;
}

// =============================================================================
// –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° API –°–õ–£–ñ–ë–´
// =============================================================================

export class ApiService {
    private cache = new Map<string, CacheEntry<any>>();
    private pendingRequests = new Map<string, Promise<any>>();

    // =========================================================================
    // –û–°–ù–û–í–ù–´–ï HTTP –ú–ï–¢–û–î–´
    // =========================================================================

    private async makeRequest<T>(
        endpoint: string,
        options: RequestInit = {},
        useCache = false,
        cacheTTL = API_CONFIG.CACHE_TTL
    ): Promise<ApiResponse<T>> {
        const url = `${API_CONFIG.BASE_URL}${endpoint}`;
        const cacheKey = `${options.method || 'GET'}:${url}:${JSON.stringify(options.body)}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (useCache && this.isCacheValid(cacheKey)) {
            console.log(`üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞: ${endpoint}`);
            return { success: true, data: this.cache.get(cacheKey)!.data };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã
        if (this.pendingRequests.has(cacheKey)) {
            console.log(`‚è≥ –û–∂–∏–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å: ${endpoint}`);
            return this.pendingRequests.get(cacheKey);
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        const requestPromise = this.executeRequest<T>(url, options, cacheKey, useCache, cacheTTL);
        this.pendingRequests.set(cacheKey, requestPromise);

        try {
            const result = await requestPromise;
            return result;
        } finally {
            this.pendingRequests.delete(cacheKey);
        }
    }

    private async executeRequest<T>(
        url: string,
        options: RequestInit,
        cacheKey: string,
        useCache: boolean,
        cacheTTL: number
    ): Promise<ApiResponse<T>> {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ authService:`, {
            authService_exists: !!authService,
            authService_initialized: authService?.isInitializedApp?.(),
            authService_type: typeof authService
        });

        const token = authService.getCurrentToken();
        console.log(`üîë –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:`, token ? `${token.substring(0, 20)}...` : '–¢–û–ö–ï–ù –û–¢–°–£–¢–°–¢–í–£–ï–¢');

        const defaultHeaders: Record<string, string> = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };

        if (token) {
            defaultHeaders['Authorization'] = `Bearer ${token}`;
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫`);
        } else {
            console.log(`‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
        }

        const requestOptions: RequestInit = {
            ...options,
            headers: {
                ...defaultHeaders,
                ...options.headers
            }
        };

        console.log(`üåê ${requestOptions.method || 'GET'} ${url}`,
            `Headers:`, Object.keys(requestOptions.headers || {}));

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.TIMEOUT);

            const response = await fetch(url, {
                ...requestOptions,
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            console.log(`üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ${url}:`, {
                status: response.status,
                statusText: response.statusText,
                ok: response.ok
            });

            const data = await response.json();
            console.log(`üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ ${url}:`, data);

            if (!response.ok) {
                console.error(`‚ùå HTTP –æ—à–∏–±–∫–∞ ${response.status}:`, data);
                throw new Error(data.error || data.message || `HTTP ${response.status}: ${response.statusText}`);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if (useCache && data.success) {
                this.setCache(cacheKey, data.data, cacheTTL);
            }

            return data;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}:`, {
                error: error instanceof Error ? error.message : error,
                stack: error instanceof Error ? error.stack : undefined,
                name: error instanceof Error ? error.name : undefined
            });

            return {
                success: false,
                error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    }

    // =========================================================================
    // –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–≠–®–ï–ú
    // =========================================================================

    private isCacheValid(key: string): boolean {
        const entry = this.cache.get(key);
        if (!entry) return false;

        const now = Date.now();
        return (now - entry.timestamp) < entry.ttl;
    }

    private setCache<T>(key: string, data: T, ttl: number): void {
        this.cache.set(key, {
            data,
            timestamp: Date.now(),
            ttl
        });
    }

    public clearCache(pattern?: string): void {
        if (pattern) {
            for (const key of this.cache.keys()) {
                if (key.includes(pattern)) {
                    this.cache.delete(key);
                }
            }
        } else {
            this.cache.clear();
        }
        console.log('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');
    }

    // =========================================================================
    // API –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–û–§–ò–õ–Ø
    // =========================================================================

    public async getUserProfile(): Promise<ApiResponse<User>> {
        return this.makeRequest<User>('/user/profile', {}, true);
    }

    public async updateUserProfile(profileData: Partial<User>): Promise<ApiResponse<User>> {
        const result = await this.makeRequest<User>('/user/profile', {
            method: 'PUT',
            body: JSON.stringify(profileData)
        });

        // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if (result.success) {
            this.clearCache('/user/profile');
        }

        return result;
    }

    public async getUserStats(userId?: number): Promise<ApiResponse<any>> {
        const endpoint = userId ? `/user/stats/${userId}` : '/user/stats';
        return this.makeRequest(endpoint, {}, true, API_CONFIG.CACHE_TTL / 2); // –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    }

    // =========================================================================
    // API –ú–ï–¢–û–î–´ –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–ô
    // =========================================================================

    public async getUserAchievements(): Promise<ApiResponse<Achievement[]>> {
        return this.makeRequest<Achievement[]>('/profile/achievements/available', {}, true);
    }

    public async unlockAchievement(achievementId: string): Promise<ApiResponse<Achievement>> {
        const result = await this.makeRequest<Achievement>('/profile/achievements/unlock', {
            method: 'POST',
            body: JSON.stringify({ achievementId })
        });

        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (result.success) {
            this.clearCache('/profile/achievements');
            this.clearCache('/user/profile'); // –ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        }

        return result;
    }

    public async getAchievementProgress(): Promise<ApiResponse<Record<string, number>>> {
        return this.makeRequest('/profile/progress/next-achievements', {}, true, API_CONFIG.CACHE_TTL / 4);
    }

    // =========================================================================
    // API –ú–ï–¢–û–î–´ –î–õ–Ø –õ–ò–î–ï–†–ë–û–†–î–ê
    // =========================================================================

    public async getLeaderboard(period: LeaderboardPeriod = 'day'): Promise<ApiResponse<LeaderboardData>> {
        return this.makeRequest<LeaderboardData>(`/leaderboard/${period}`, {}, true, API_CONFIG.CACHE_TTL / 2);
    }

    public async getUserPosition(period: LeaderboardPeriod = 'day'): Promise<ApiResponse<{ position: number; total: number }>> {
        return this.makeRequest(`/leaderboard/${period}/position`, {}, true, API_CONFIG.CACHE_TTL / 2);
    }

    // =========================================================================
    // API –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ì–†–û–í–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    // =========================================================================

    public async submitGameResult(gameData: any): Promise<ApiResponse<any>> {
        const result = await this.makeRequest('/game/result', {
            method: 'POST',
            body: JSON.stringify(gameData)
        });

        // –û—á–∏—â–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—ç—à–∏ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
        if (result.success) {
            this.clearCache('/user/profile');
            this.clearCache('/profile/achievements');
            this.clearCache('/leaderboard');
        }

        return result;
    }

    public async getGameHistory(limit = 10, offset = 0): Promise<ApiResponse<any[]>> {
        return this.makeRequest(`/game/history?limit=${limit}&offset=${offset}`, {}, true);
    }

    // =========================================================================
    // API –ú–ï–¢–û–î–´ –î–õ–Ø –ê–í–ê–¢–ê–†–û–í
    // =========================================================================

    public async getUserAvatar(telegramId: number): Promise<string | null> {
        try {
            const cacheKey = `avatar:${telegramId}`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞–≤–∞—Ç–∞—Ä–æ–≤ (–±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π)
            if (this.isCacheValid(cacheKey)) {
                return this.cache.get(cacheKey)!.data;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ JSON API
            const avatarUrl = `/api/user/avatar/${telegramId}`;

            // –ö—ç—à–∏—Ä—É–µ–º URL –Ω–∞ 1 —á–∞—Å
            this.setCache(cacheKey, avatarUrl, 3600000);
            return avatarUrl;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
            return null;
        }
    }

    // =========================================================================
    // –ü–ê–ö–ï–¢–ù–´–ï –ó–ê–ü–†–û–°–´
    // =========================================================================

    public async getBatchData(): Promise<{
        profile?: User;
        achievements?: Achievement[];
        leaderboard?: LeaderboardData;
        stats?: any;
    }> {
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');

        try {
            console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API...');
            const [profileResult, achievementsResult, leaderboardResult, statsResult] = await Promise.allSettled([
                this.getUserProfile(),
                this.getUserAchievements(),
                this.getLeaderboard('day'),
                this.getUserStats()
            ]);

            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', {
                profile: { status: profileResult.status, success: profileResult.status === 'fulfilled' ? (profileResult.value.success || profileResult.value.status === 'success') : false },
                achievements: { status: achievementsResult.status, success: achievementsResult.status === 'fulfilled' ? (achievementsResult.value.success || achievementsResult.value.status === 'success') : false },
                leaderboard: { status: leaderboardResult.status, success: leaderboardResult.status === 'fulfilled' ? (leaderboardResult.value.success || leaderboardResult.value.status === 'success') : false },
                stats: { status: statsResult.status, success: statsResult.status === 'fulfilled' ? (statsResult.value.success || statsResult.value.status === 'success') : false }
            });

            const result: any = {};

            if (profileResult.status === 'fulfilled' && (profileResult.value.success || profileResult.value.status === 'success')) {
                result.profile = profileResult.value.data;
                console.log('‚úÖ Profile –¥–æ–±–∞–≤–ª–µ–Ω –≤ result:', !!result.profile);
            } else {
                console.error('‚ùå Profile –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω:', {
                    status: profileResult.status,
                    value: profileResult.status === 'fulfilled' ? profileResult.value : null,
                    reason: profileResult.status === 'rejected' ? profileResult.reason : null
                });
            }

            if (achievementsResult.status === 'fulfilled' && (achievementsResult.value.success || achievementsResult.value.status === 'success')) {
                result.achievements = achievementsResult.value.data;
                console.log('‚úÖ Achievements –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ result:', Array.isArray(result.achievements) ? result.achievements.length : '–Ω–µ –º–∞—Å—Å–∏–≤');
            } else {
                console.error('‚ùå Achievements –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω:', {
                    status: achievementsResult.status,
                    value: achievementsResult.status === 'fulfilled' ? achievementsResult.value : null,
                    reason: achievementsResult.status === 'rejected' ? achievementsResult.reason : null
                });
            }

            if (leaderboardResult.status === 'fulfilled' && (leaderboardResult.value.success || leaderboardResult.value.status === 'success')) {
                result.leaderboard = leaderboardResult.value.data;
                console.log('‚úÖ Leaderboard –¥–æ–±–∞–≤–ª–µ–Ω –≤ result:', !!result.leaderboard);
            } else {
                console.error('‚ùå Leaderboard –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω:', {
                    status: leaderboardResult.status,
                    value: leaderboardResult.status === 'fulfilled' ? leaderboardResult.value : null,
                    reason: leaderboardResult.status === 'rejected' ? leaderboardResult.reason : null
                });
            }

            if (statsResult.status === 'fulfilled' && (statsResult.value.success || statsResult.value.status === 'success')) {
                result.stats = statsResult.value.data;
                console.log('‚úÖ Stats –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ result:', !!result.stats);
            } else {
                console.error('‚ùå Stats –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω:', {
                    status: statsResult.status,
                    value: statsResult.status === 'fulfilled' ? statsResult.value : null,
                    reason: statsResult.status === 'rejected' ? statsResult.reason : null
                });
            }

            console.log('üì¶ –§–∏–Ω–∞–ª—å–Ω—ã–π result getBatchData:', {
                hasProfile: !!result.profile,
                hasAchievements: !!result.achievements,
                hasLeaderboard: !!result.leaderboard,
                hasStats: !!result.stats,
                keys: Object.keys(result)
            });

            console.log('‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return result;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    // =========================================================================
    // –£–¢–ò–õ–ò–¢–´
    // =========================================================================

    public getConnectionStatus(): 'online' | 'offline' | 'slow' {
        if (!navigator.onLine) return 'offline';

        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const connection = (navigator as any).connection;
        if (connection) {
            if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {
                return 'slow';
            }
        }

        return 'online';
    }

    public getCacheInfo(): { size: number; keys: string[] } {
        return {
            size: this.cache.size,
            keys: Array.from(this.cache.keys())
        };
    }

    // =========================================================================
    // –ú–ï–¢–û–î–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
    // =========================================================================

    public async healthCheck(): Promise<boolean> {
        try {
            const response = await this.makeRequest('/health');
            return response.success;
        } catch {
            return false;
        }
    }

    public async ping(): Promise<number> {
        const start = Date.now();
        try {
            await this.makeRequest('/ping');
            return Date.now() - start;
        } catch {
            return -1;
        }
    }
}

// =============================================================================
// –≠–ö–°–ü–û–†–¢ SINGLETON –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê
// =============================================================================

export const apiService = new ApiService(); 