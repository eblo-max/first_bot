/**
 * Criminal Trust - –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ TypeScript
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import type {
    User,
    Achievement,
    AchievementConfig,
    ProfileState,
    LeaderboardPeriod,
    LeaderboardData,
    TelegramWebApp,
    CriminalEffects,
    BloodParticle
} from './types/profile-types.js';

import {
    PROFILE_CONFIG,
    ACHIEVEMENTS_CONFIG,
    getRankByLevel,
    calculateLevel,
    calculateXP,
    getXPProgress,
    getMaxXPForLevel
} from './modules/profile-config.js';

import { authService } from './modules/auth-service.js';
import { apiService } from './modules/api-service.js';

// =============================================================================
// –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –ü–†–û–§–ò–õ–Ø
// =============================================================================

export class CriminalTrustProfile {
    private state: ProfileState;
    private isInitialized = false;
    private effectsInterval: number | null = null;
    private updateInterval: number | null = null;

    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state = {
            user: null,
            achievements: [] as any[],
            leaderboard: {
                current: 'day',
                data: {} as Record<LeaderboardPeriod, LeaderboardData>
            },
            isLoading: false,
            criminalEffects: {
                glitchActive: false,
                bloodParticles: [],
                scanEffect: false,
                atmosphericEffects: false
            }
        };

        this.init();
    }

    // =========================================================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // =========================================================================

    private async init(): Promise<void> {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Criminal Trust Profile...');

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram WebApp
            this.setupTelegramApp();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º DOM –∏ —Å–æ–±—ã—Ç–∏—è
            this.setupDOM();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
            this.initCriminalEffects();

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            await this.authenticate();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            await this.loadProfileData();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.startPeriodicUpdates();

            this.isInitialized = true;
            console.log('‚úÖ Profile –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        }
    }

    private setupTelegramApp(): void {
        const tg = authService.getTelegramApp();
        if (tg) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
            authService.applyTelegramTheme();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            authService.setupBackButton(() => {
                console.log('üîô –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
                window.location.href = '/';
            });

            console.log('üì± Telegram WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }
    }

    private setupDOM(): void {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (!this.checkDOMElements()) {
            throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        this.initLeaderboardTabs();

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();

        console.log('üéØ DOM –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    // =========================================================================
    // –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
    // =========================================================================

    private async authenticate(): Promise<void> {
        console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');
        this.setLoading(true);

        try {
            const authResult = await authService.authenticate();

            if (authResult.success && authResult.user) {
                console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                this.state.user = authResult.user;
            } else {
                throw new Error(authResult.error || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            this.showAuthError();
            throw error;
        } finally {
            this.setLoading(false);
        }
    }

    // =========================================================================
    // –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
    // =========================================================================

    private async loadProfileData(): Promise<void> {
        console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...');

        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            const batchData = await apiService.getBatchData();

            if (batchData.profile) {
                console.log('üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', batchData.profile);
                this.state.user = batchData.profile;
                this.updateProfileUI(batchData.profile);
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            if (batchData.achievements) {
                console.log('üìä [–ò–°–ü–†–ê–í–õ–ï–ù–û] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', batchData.achievements);

                // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç {unlocked: [], available: [], progress: {}}
                let allAchievements: any[] = [];
                const achievementsData = batchData.achievements as any;

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–∏–∑ user.achievements –≤ –±–∞–∑–µ)
                if (achievementsData.unlocked && Array.isArray(achievementsData.unlocked)) {
                    console.log('üîì [–ò–°–ü–†–ê–í–õ–ï–ù–û] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', achievementsData.unlocked.length);

                    allAchievements = [...allAchievements, ...achievementsData.unlocked.map((ach: any) => {
                        const achievementInfo = this.getAchievementInfo(ach.id);

                        return {
                            id: ach.id,
                            name: ach.name || achievementInfo.name,
                            description: ach.description || achievementInfo.description,
                            category: this.mapBackendCategoryToFrontend(ach.category) || achievementInfo.category,
                            icon: achievementInfo.icon,
                            rarity: this.mapBackendRarityToFrontend(ach.rarity) || achievementInfo.rarity,
                            isUnlocked: true,
                            progress: 100,
                            unlockedAt: ach.unlockedAt ? new Date(ach.unlockedAt) : undefined
                        };
                    })];
                }

                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–º)
                if (achievementsData.available && Array.isArray(achievementsData.available)) {
                    console.log('üîí [–ò–°–ü–†–ê–í–õ–ï–ù–û] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', achievementsData.available.length);

                    allAchievements = [...allAchievements, ...achievementsData.available.map((ach: any) => {
                        const achievementInfo = this.getAchievementInfo(ach.id);

                        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¢–û–õ–¨–ö–û —Å —Å–µ—Ä–≤–µ—Ä–∞
                        let progress = 0;
                        if (ach.progress && ach.progress.current !== undefined && ach.progress.target !== undefined) {
                            progress = Math.min((ach.progress.current / ach.progress.target) * 100, 100);
                            console.log(`üìä [–ò–°–ü–†–ê–í–õ–ï–ù–û] –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è ${ach.id}: ${ach.progress.current}/${ach.progress.target} = ${progress}%`);
                        }

                        return {
                            id: ach.id,
                            name: ach.name || achievementInfo.name,
                            description: ach.description || achievementInfo.description,
                            category: this.mapBackendCategoryToFrontend(ach.category) || achievementInfo.category,
                            icon: achievementInfo.icon,
                            rarity: achievementInfo.rarity,
                            isUnlocked: false,
                            progress: progress,
                            progressData: ach.progress
                        };
                    })];
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—á–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º 0)
                const unlockedIds = allAchievements.map(a => a.id);
                const allPossibleAchievements = this.getAllPossibleAchievements();

                allPossibleAchievements.forEach(achievementInfo => {
                    if (!unlockedIds.includes(achievementInfo.id)) {
                        allAchievements.push({
                            id: achievementInfo.id,
                            name: achievementInfo.name,
                            description: achievementInfo.description,
                            category: achievementInfo.category,
                            icon: achievementInfo.icon,
                            rarity: achievementInfo.rarity,
                            isUnlocked: false,
                            progress: 0
                        });
                    }
                });

                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
                allAchievements.sort((a, b) => {
                    if (a.isUnlocked && !b.isUnlocked) return -1;
                    if (!a.isUnlocked && b.isUnlocked) return 1;
                    if (!a.isUnlocked && !b.isUnlocked) {
                        return (b.progress || 0) - (a.progress || 0);
                    }
                    return 0;
                });

                console.log('üèÜ [–ò–°–ü–†–ê–í–õ–ï–ù–û] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', allAchievements.length);
                console.log('üìä [–ò–°–ü–†–ê–í–õ–ï–ù–û] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', {
                    unlocked: allAchievements.filter(a => a.isUnlocked).length,
                    locked: allAchievements.filter(a => !a.isUnlocked).length,
                    total: allAchievements.length
                });

                this.state.achievements = allAchievements;
                this.renderAchievements(allAchievements);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            if (batchData.leaderboard) {
                console.log('üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', batchData.leaderboard);
                this.renderLeaderboard(batchData.leaderboard);
                this.updateUserPosition(batchData.leaderboard);
            }

            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω');
            this.setLoading(false);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è');
            this.setLoading(false);
        }
    }

    // =========================================================================
    // –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
    // =========================================================================

    private updateProfileUI(user: User): void {
        try {
            console.log('üéØ –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–æ—Ñ–∏–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏:', user);
            console.log('üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
                name: this.getUserDisplayName(user),
                totalScore: user.totalScore || 0,
                gamesPlayed: user.gamesPlayed || 0,
                accuracy: user.accuracy || 0,
                telegramId: user.telegramId,
                winStreak: user.winStreak || 0
            });

            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            this.updateElement('user-name', this.getUserDisplayName(user));
            this.updateElement('user-id', user.telegramId?.toString() || '‚Äî');
            this.updateElement('user-total-score', (user.totalScore || 0).toLocaleString());
            this.updateElement('user-games-played', (user.gamesPlayed || 0).toString());
            this.updateElement('user-accuracy', `${Math.round(user.accuracy || 0)}%`);

            // –°–µ—Ä–∏—è —É—Å–ø–µ—Ö–æ–≤
            this.updateElement('stat-streak', (user.winStreak || 0).toString());

            // –£—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç
            const totalScore = user.totalScore || 0;
            const level = calculateLevel(totalScore);
            const xpProgress = getXPProgress(totalScore, level);
            const rank = getRankByLevel(level);

            console.log('üìà –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:', { totalScore, level, xpProgress, rank });

            this.updateElement('user-level', level.toString());

            // –û–±–Ω–æ–≤–ª—è–µ–º XP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            this.updateElement('current-xp', calculateXP(totalScore, level).toString());
            this.updateElement('max-xp', getMaxXPForLevel(level).toString());

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–æ–≤—ã–π –¥–∏—Å–ø–ª–µ–π
            this.updateRankDisplay(level, rank);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (user.telegramId) {
                this.loadUserAvatar(user.telegramId);
            }

            console.log('üéØ UI –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI:', error);
        }
    }

    private animateXPBar(percentage: number): void {
        const xpBar = document.querySelector('.xp-progress-fill') as HTMLElement;
        if (!xpBar) return;

        xpBar.style.width = '0%';

        setTimeout(() => {
            xpBar.style.transition = 'width 1.5s cubic-bezier(0.4, 0, 0.2, 1)';
            xpBar.style.width = `${Math.min(percentage, 100)}%`;
        }, 100);
    }

    // =========================================================================
    // –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
    // =========================================================================

    private renderAchievements(achievements: any[]): void {
        console.log('üèÜ –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º —Å—Ç–∏–ª–µ:', achievements.length);

        const container = document.getElementById('achievements-grid');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const allAchievements = ACHIEVEMENTS_CONFIG || [];
        console.log('üìã –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', allAchievements.length);

        if (!allAchievements || allAchievements.length === 0) {
            console.error('‚ùå ACHIEVEMENTS_CONFIG –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
            container.innerHTML = '<div style="color: red; text-align: center; padding: 20px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>';
            return;
        }

        let unlockedCount = 0;

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        allAchievements.forEach(achievementConfig => {
            // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            const achievementData = achievements.find(a => a.id === achievementConfig.id);

            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
            let isUnlocked = false;
            if (achievementData && achievementData.isUnlocked) {
                isUnlocked = true;
                unlockedCount++;
            }

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const progress = {
                current: achievementData?.progressData?.current || 0,
                target: achievementData?.progressData?.target || achievementConfig.requirement?.value || 100,
                percentage: achievementData?.progress || 0
            };

            console.log(`üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${achievementConfig.name}: —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ=${isUnlocked}, –ø—Ä–æ–≥—Ä–µ—Å—Å=${progress.percentage}%`);

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–æ–≤–æ–º —Å—Ç–∏–ª–µ
            const card = this.createAchievementCard(achievementConfig, progress, isUnlocked);
            container.appendChild(card);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        this.updateElement('achievements-count', unlockedCount.toString());

        console.log(`‚úÖ –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${allAchievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (${unlockedCount} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)`);
    }

    private createAchievementElement(achievement: any): HTMLElement {
        const div = document.createElement('div');
        div.className = `achievement-card ${achievement.isUnlocked ? 'unlocked' : 'locked'}`;
        div.dataset.achievementId = achievement.id;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ä–µ–¥–∫–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (achievement.rarity) {
            div.classList.add(`rarity-${achievement.rarity}`);
        }

        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        div.innerHTML = `
            <div class="achievement-icon">${this.getAchievementIcon(achievement.category || 'default')}</div>
            <div class="achievement-content">
                <h3 class="achievement-name">${achievement.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'}</h3>
                <p class="achievement-description">${achievement.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                <div class="achievement-category">${this.getCategoryDisplayName(achievement.category || 'default')}</div>
                ${!achievement.isUnlocked && achievement.progress !== undefined ? `
                    <div class="achievement-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${achievement.progress}%"></div>
                        </div>
                        <span class="progress-text">${Math.round(achievement.progress)}%</span>
                    </div>
                ` : ''}
            </div>
            ${achievement.isUnlocked ? '<div class="achievement-unlock-badge">‚úì</div>' : ''}
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        div.addEventListener('click', () => {
            this.showAchievementModal(achievement.id);
            authService.hapticFeedback('medium');
        });

        return div;
    }

    private getCategoryDisplayName(category: string): string {
        const categoryNames: Record<string, string> = {
            'score': '–ù–ê–ë–†–ê–ù–ù–´–ï –û–ß–ö–ò',
            'games': '–ö–û–õ–ò–ß–ï–°–¢–í–û –ò–ì–†',
            'investigation': '–†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø',
            'deduction': '–î–ï–î–£–ö–¶–ò–Ø',
            'social': '–°–û–¶–ò–ê–õ–¨–ù–û–ï',
            'speed': '–°–ö–û–†–û–°–¢–¨',
            'accuracy': '–¢–û–ß–ù–û–°–¢–¨',
            'streak': '–°–ï–†–ò–ò',
            'special': '–û–°–û–ë–´–ï',
            'default': '–û–ë–©–ò–ï'
        };

        return categoryNames[category] || category.toUpperCase();
    }

    // =========================================================================
    // –õ–ò–î–ï–†–ë–û–†–î
    // =========================================================================

    private initLeaderboardTabs(): void {
        const tabs = document.querySelectorAll('.leaderboard-tab');
        tabs.forEach(tab => {
            tab.addEventListener('click', async (e) => {
                e.preventDefault();

                const period = tab.getAttribute('data-period') as LeaderboardPeriod;
                if (period) {
                    await this.switchLeaderboardPeriod(period);
                }
            });
        });
    }

    private async switchLeaderboardPeriod(period: LeaderboardPeriod): Promise<void> {
        if (this.state.leaderboard.current === period) return;

        this.state.leaderboard.current = period;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.querySelectorAll('.leaderboard-tab').forEach(tab => {
            tab.classList.remove('active');
        });

        const activeTab = document.querySelector(`[data-period="${period}"]`);
        if (activeTab) {
            activeTab.classList.add('active');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        this.showLeaderboardSkeleton();

        try {
            const response = await apiService.getLeaderboard(period);
            if (response.success && response.data) {
                this.state.leaderboard.data[period] = response.data;
                this.renderLeaderboard(response.data);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
            this.renderEmptyLeaderboard();
        }
    }

    private renderLeaderboard(data: any): void {
        const container = document.getElementById('leaderboard-content');
        if (!container) return;

        console.log('üèÜ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', data);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        let users = [];
        if (data.totalScore && Array.isArray(data.totalScore)) {
            users = data.totalScore;
        } else if (data.users && Array.isArray(data.users)) {
            users = data.users;
        } else if (Array.isArray(data)) {
            users = data;
        }

        console.log('üèÜ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:', users.length);

        if (!users || users.length === 0) {
            this.renderEmptyLeaderboard();
            return;
        }

        const html = users.map((entry: any, index: number) => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ —Ä–∞–Ω–≥
            const userScore = entry.stats?.totalScore || entry.score || 0;
            const level = calculateLevel(userScore);
            const rank = getRankByLevel(level);
            const isCurrentUser = this.state.user &&
                (entry.telegramId === this.state.user.telegramId ||
                    entry.user?.telegramId === this.state.user.telegramId);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userName = entry.name ||
                this.getUserDisplayName(entry.user || entry) ||
                '–î–µ—Ç–µ–∫—Ç–∏–≤';

            return `
                <div class="leaderboard-entry ${isCurrentUser ? 'current-user' : ''}">
                    <div class="position">#${entry.rank || index + 1}</div>
                    <div class="user-info">
                        <div class="user-avatar">
                            <img src="/api/user/avatar/${entry.telegramId || entry.user?.telegramId}" 
                                 alt="Avatar" 
                                 style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;"
                                 onerror="this.src='data:image/svg+xml,<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 100 100\\"><circle cx=\\"50\\" cy=\\"50\\" r=\\"40\\" fill=\\"%23333\\"/></svg>'">
                        </div>
                        <div class="user-details">
                            <div class="user-name">${userName}</div>
                            <div class="user-rank" style="color: ${rank.color}; font-size: 12px;">
                                ${rank.icon} ${rank.name}
                            </div>
                        </div>
                    </div>
                    <div class="user-stats">
                        <div class="score" style="font-weight: bold;">${userScore.toLocaleString()}</div>
                        <div class="accuracy" style="font-size: 12px; color: #888;">–£—Ä. ${level}</div>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = html;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.updateUserPosition({
            userPosition: this.findUserPosition(users),
            totalUsers: data.total || users.length
        });
    }

    private findUserPosition(users: any[]): number | null {
        if (!this.state.user) return null;

        const userPosition = users.findIndex(entry =>
            entry.telegramId === this.state.user?.telegramId ||
            entry.user?.telegramId === this.state.user?.telegramId
        );

        return userPosition >= 0 ? userPosition + 1 : null;
    }

    // =========================================================================
    // –ö–†–ò–ú–ò–ù–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´
    // =========================================================================

    private initCriminalEffects(): void {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        let effectsContainer = document.getElementById('criminal-effects');
        if (!effectsContainer) {
            effectsContainer = document.createElement('div');
            effectsContainer.id = 'criminal-effects';
            effectsContainer.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
                z-index: 1000;
            `;
            document.body.appendChild(effectsContainer);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.startPeriodicCriminalEffects();

        console.log('üé≠ –ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    private startPeriodicCriminalEffects(): void {
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        this.effectsInterval = window.setInterval(() => {
            if (Math.random() > 0.7) { // 30% —à–∞–Ω—Å
                this.createRandomScanEffect();
            }

            if (Math.random() > 0.9) { // 10% —à–∞–Ω—Å
                this.createAtmosphericEffects();
            }
        }, 10000);
    }

    private createRandomScanEffect(): void {
        const elements = document.querySelectorAll('.achievement-card, .leaderboard-entry');
        if (elements.length === 0) return;

        const randomElement = elements[Math.floor(Math.random() * elements.length)] as HTMLElement;
        this.createScanningEffect(randomElement);
    }

    private createScanningEffect(element: HTMLElement): void {
        if (!element) return;

        const rect = element.getBoundingClientRect();
        const scanLine = document.createElement('div');
        scanLine.style.cssText = `
            position: absolute;
            top: ${rect.top}px;
            left: ${rect.left}px;
            width: ${rect.width}px;
            height: 2px;
            background: linear-gradient(90deg, transparent, #00ff00, transparent);
            z-index: 1001;
            animation: scan 2s ease-in-out;
        `;

        const effectsContainer = document.getElementById('criminal-effects');
        if (effectsContainer) {
            effectsContainer.appendChild(scanLine);

            setTimeout(() => {
                if (scanLine.parentNode) {
                    scanLine.parentNode.removeChild(scanLine);
                }
            }, 2000);
        }
    }

    private createAtmosphericEffects(): void {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–∏—Ü –∫—Ä–æ–≤–∏
        for (let i = 0; i < 5; i++) {
            setTimeout(() => {
                this.createBloodParticle();
            }, i * 100);
        }
    }

    private createBloodParticle(): void {
        const particle = document.createElement('div');
        const size = Math.random() * 4 + 2;
        const x = Math.random() * window.innerWidth;
        const y = -10;

        particle.style.cssText = `
            position: absolute;
            top: ${y}px;
            left: ${x}px;
            width: ${size}px;
            height: ${size}px;
            background: #8B0000;
            border-radius: 50%;
            pointer-events: none;
            z-index: 999;
        `;

        const effectsContainer = document.getElementById('criminal-effects');
        if (effectsContainer) {
            effectsContainer.appendChild(particle);

            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è
            let currentY = y;
            const gravity = 0.5;
            let velocity = 0;

            const animate = () => {
                velocity += gravity;
                currentY += velocity;
                particle.style.top = `${currentY}px`;

                if (currentY < window.innerHeight + 10) {
                    requestAnimationFrame(animate);
                } else {
                    if (particle.parentNode) {
                        particle.parentNode.removeChild(particle);
                    }
                }
            };

            requestAnimationFrame(animate);
        }
    }

    // =========================================================================
    // –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´
    // =========================================================================

    private getAchievementIcon(category: string): string {
        const iconMap: { [key: string]: string } = {
            'progress': 'üìà',
            'mastery': 'üéØ',
            'speed': '‚ö°',
            'streak': 'üî•',
            'special': '‚≠ê',
            'score': 'üí∞',
            'investigations': 'üîç',
            'accuracy': 'üéØ',
            'default': 'üèÜ'
        };
        return iconMap[category] || 'üèÜ';
    }

    private getAchievementInfo(achievementId: string): {
        id: string;
        name: string;
        description: string;
        category: string;
        icon: string;
        rarity: string
    } {
        // –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        const { ACHIEVEMENTS_CONFIG } = window as any;

        // –ò—â–µ–º –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (ACHIEVEMENTS_CONFIG) {
            const newAchievement = ACHIEVEMENTS_CONFIG.find((ach: any) => ach.id === achievementId);
            if (newAchievement) {
                return {
                    id: newAchievement.id,
                    name: newAchievement.name,
                    description: newAchievement.description,
                    category: newAchievement.category,
                    icon: newAchievement.icon,
                    rarity: newAchievement.rarity
                };
            }
        }

        // –ù–û–í–ê–Ø –ë–ê–ó–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô "–ö–†–ò–ú–ò–ù–ê–õ–¨–ù–´–ô –ë–õ–ï–§"
        const achievementDatabase: Record<string, any> = {
            // === –°–õ–ï–î–û–í–ê–¢–ï–õ–¨ ===
            'first_investigation': {
                name: '–ü–µ—Ä–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
                description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
                category: 'investigation',
                icon: 'üîç',
                rarity: 'common'
            },
            'truth_seeker': {
                name: '–ò—Å–∫–∞—Ç–µ–ª—å –∏—Å—Ç–∏–Ω—ã',
                description: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—à–∏–±–∫—É –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑',
                category: 'investigation',
                icon: 'üéØ',
                rarity: 'common'
            },
            'rookie_detective': {
                name: '–î–µ—Ç–µ–∫—Ç–∏–≤-–Ω–æ–≤–∏—á–æ–∫',
                description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 5 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: 'investigation',
                icon: 'üïµÔ∏è',
                rarity: 'common'
            },
            'crime_solver': {
                name: '–†–∞—Å–∫—Ä—ã–≤–∞—Ç–µ–ª—å –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π',
                description: '–†–∞—Å–∫—Ä–æ–π—Ç–µ 10 –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–µ–ª',
                category: 'investigation',
                icon: '‚öñÔ∏è',
                rarity: 'common'
            },
            'experienced_investigator': {
                name: '–û–ø—ã—Ç–Ω—ã–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 25 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: 'investigation',
                icon: 'üéñÔ∏è',
                rarity: 'rare'
            },
            'senior_detective': {
                name: '–°—Ç–∞—Ä—à–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
                description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 50 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: 'investigation',
                icon: 'üë®‚Äçüíº',
                rarity: 'rare'
            },
            'veteran_investigator': {
                name: '–í–µ—Ç–µ—Ä–∞–Ω —Å–ª–µ–¥—Å—Ç–≤–∏—è',
                description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 100 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: 'investigation',
                icon: 'üèÖ',
                rarity: 'epic'
            },
            'master_detective': {
                name: '–ú–∞—Å—Ç–µ—Ä-–¥–µ—Ç–µ–∫—Ç–∏–≤',
                description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 250 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: 'investigation',
                icon: 'üèÜ',
                rarity: 'legendary'
            },

            // === –¢–û–ß–ù–û–°–¢–¨ ===
            'sharp_eye': {
                name: '–û—Å—Ç—Ä—ã–π –≥–ª–∞–∑',
                description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 60% –≤ 10+ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö',
                category: 'accuracy',
                icon: 'üëÅÔ∏è',
                rarity: 'common'
            },
            'keen_observer': {
                name: '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å',
                description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 75% –≤ 20+ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö',
                category: 'accuracy',
                icon: 'üîç',
                rarity: 'rare'
            },
            'master_analyst': {
                name: '–ú–∞—Å—Ç–µ—Ä –∞–Ω–∞–ª–∏–∑–∞',
                description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 85% –≤ 50+ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö',
                category: 'accuracy',
                icon: 'üìä',
                rarity: 'epic'
            },
            'sherlock_holmes': {
                name: '–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å',
                description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 95% –≤ 100+ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö',
                category: 'accuracy',
                icon: 'üé©',
                rarity: 'legendary'
            },

            // === –°–ö–û–†–û–°–¢–¨ ===
            'quick_thinker': {
                name: '–ë—ã—Å—Ç—Ä—ã–π —É–º',
                description: '–†–µ—à–∏—Ç–µ –¥–µ–ª–æ –∑–∞ 10 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –±—ã—Å—Ç—Ä–µ–µ',
                category: 'speed',
                icon: '‚ö°',
                rarity: 'common'
            },
            'lightning_detective': {
                name: '–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
                description: '–†–µ—à–∏—Ç–µ –¥–µ–ª–æ –∑–∞ 5 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –±—ã—Å—Ç—Ä–µ–µ',
                category: 'speed',
                icon: '‚ö°',
                rarity: 'rare'
            },
            'instant_deduction': {
                name: '–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–µ–¥—É–∫—Ü–∏—è',
                description: '–†–µ—à–∏—Ç–µ –¥–µ–ª–æ –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –±—ã—Å—Ç—Ä–µ–µ',
                category: 'speed',
                icon: 'üí®',
                rarity: 'epic'
            },
            'speed_demon': {
                name: '–î–µ–º–æ–Ω —Å–∫–æ—Ä–æ—Å—Ç–∏',
                description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–µ 15 —Å–µ–∫—É–Ω–¥ –≤ 50+ –∏–≥—Ä–∞—Ö',
                category: 'speed',
                icon: 'üèÉ‚Äç‚ôÇÔ∏è',
                rarity: 'epic'
            },

            // === –°–ï–†–ò–ò ===
            'perfect_start': {
                name: '–ò–¥–µ–∞–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª–æ',
                description: '–°—ã–≥—Ä–∞–π—Ç–µ –æ–¥–Ω—É –∏–¥–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É (5/5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)',
                category: 'streak',
                icon: 'üåü',
                rarity: 'common'
            },
            'winning_streak_3': {
                name: '–¢—Ä–æ–π–Ω–∞—è —Å–µ—Ä–∏—è',
                description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 3 –∏–¥–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–¥—Ä—è–¥',
                category: 'streak',
                icon: 'üî•',
                rarity: 'rare'
            },
            'winning_streak_5': {
                name: '–ì–æ—Ä—è—á–∞—è —Å–µ—Ä–∏—è',
                description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –ø–æ–¥—Ä—è–¥',
                category: 'streak',
                icon: 'üî•',
                rarity: 'epic'
            },
            'winning_streak_10': {
                name: '–ù–µ–æ—Å—Ç–∞–Ω–æ–≤–∏–º—ã–π',
                description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –ø–æ–¥—Ä—è–¥',
                category: 'streak',
                icon: 'üí™',
                rarity: 'legendary'
            },
            'perfectionist': {
                name: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
                description: '–°—ã–≥—Ä–∞–π—Ç–µ 10 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä',
                category: 'streak',
                icon: 'üíé',
                rarity: 'rare'
            },
            'flawless_master': {
                name: '–ë–µ–∑—É–ø—Ä–µ—á–Ω—ã–π –º–∞—Å—Ç–µ—Ä',
                description: '–°—ã–≥—Ä–∞–π—Ç–µ 50 –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä',
                category: 'streak',
                icon: 'üëë',
                rarity: 'legendary'
            },

            // === –û–ß–ö–ò ===
            'first_thousand': {
                name: '–ü–µ—Ä–≤–∞—è —Ç—ã—Å—è—á–∞',
                description: '–ù–∞–±–µ—Ä–∏—Ç–µ 1,000 –æ—á–∫–æ–≤',
                category: 'score',
                icon: 'üí∞',
                rarity: 'common'
            },
            'five_thousand_points': {
                name: '–ü—è—Ç—å —Ç—ã—Å—è—á –æ—á–∫–æ–≤',
                description: '–ù–∞–±–µ—Ä–∏—Ç–µ 5,000 –æ—á–∫–æ–≤',
                category: 'score',
                icon: 'üí∞',
                rarity: 'rare'
            },
            'ten_thousand_elite': {
                name: '–≠–ª–∏—Ç–∞ –¥–µ—Å—è—Ç–∏ —Ç—ã—Å—è—á',
                description: '–ù–∞–±–µ—Ä–∏—Ç–µ 10,000 –æ—á–∫–æ–≤',
                category: 'score',
                icon: 'üí∞',
                rarity: 'epic'
            },
            'legendary_scorer': {
                name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—á–µ—Ç—á–∏–∫',
                description: '–ù–∞–±–µ—Ä–∏—Ç–µ 25,000 –æ—á–∫–æ–≤',
                category: 'score',
                icon: 'üèÜ',
                rarity: 'legendary'
            },

            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            'detective_experienced': {
                name: '–û–ø—ã—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
                description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ 25 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: 'investigation',
                icon: 'üîç',
                rarity: 'common'
            }
        };

        const achievement = achievementDatabase[achievementId];
        if (achievement) {
            return {
                id: achievementId,
                name: achievement.name,
                description: achievement.description,
                category: achievement.category,
                icon: achievement.icon,
                rarity: achievement.rarity
            };
        }

        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        return {
            id: achievementId,
            name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            description: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
            category: 'investigation',
            icon: 'üîç',
            rarity: 'common'
        };
    }

    private mapBackendCategoryToFrontend(backendCategory: string): string {
        const categoryMap: Record<string, string> = {
            '–ü–†–û–ì–†–ï–°–°': 'progress',
            '–ú–ê–°–¢–ï–†–°–¢–í–û': 'mastery',
            '–°–ö–û–†–û–°–¢–¨': 'speed',
            '–°–ï–†–ò–ò': 'streak',
            '–û–°–û–ë–´–ï': 'special',
            'score': 'score',
            'investigations': 'investigations',
            'accuracy': 'accuracy'
        };

        return categoryMap[backendCategory] || 'special';
    }

    private mapBackendRarityToFrontend(backendRarity: string): string {
        const rarityMap: Record<string, string> = {
            '–û–ë–´–ß–ù–û–ï': 'common',
            '–†–ï–î–ö–û–ï': 'rare',
            '–≠–ü–ò–ß–ï–°–ö–û–ï': 'epic',
            '–õ–ï–ì–ï–ù–î–ê–†–ù–û–ï': 'legendary'
        };

        return rarityMap[backendRarity] || 'common';
    }

    private getAllPossibleAchievements(): Array<{
        id: string;
        name: string;
        description: string;
        category: string;
        icon: string;
        rarity: string;
    }> {
        const allIds = [
            // –ü—Ä–æ–≥—Ä–µ—Å—Å
            'first_case', 'detective_rookie', 'detective_experienced', 'detective_veteran',
            'detective_master', 'detective_legend', 'detective_immortal',

            // –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ
            'perfectionist', 'master_detective', 'perfect_5', 'perfect_15', 'perfect_50', 'perfect_100',

            // –°–∫–æ—Ä–æ—Å—Ç—å
            'speed_demon', 'lightning_fast',

            // –°–µ—Ä–∏–∏
            'streak_3', 'streak_5', 'streak_10', 'streak_20',
            'daily_3', 'daily_7', 'daily_30', 'daily_100',

            // –û—á–∫–∏
            'score_1k', 'score_5k', 'score_10k', 'score_25k',

            // –û—Å–æ–±—ã–µ
            'expert_specialist', 'legendary_reputation', 'versatile_detective',

            // Backend –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            'detective_novice', 'detective_expert', 'case_solver', 'veteran_detective'
        ];

        return allIds.map(id => this.getAchievementInfo(id));
    }

    private getUserDisplayName(user: any): string {
        console.log('üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–æ–µ –ø–æ–ª–µ name —Å —Å–µ—Ä–≤–µ—Ä–∞
        if (user.name && user.name !== '–î–µ—Ç–µ–∫—Ç–∏–≤') {
            return user.name;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º –∏–º—è
        if (user.firstName) {
            return `${user.firstName} ${user.lastName || ''}`.trim();
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å username
        if (user.username) {
            return `@${user.username}`;
        }

        // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return '–î–µ—Ç–µ–∫—Ç–∏–≤';
    }

    private updateElement(id: string, value: string): void {
        console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç:`, { id, value });
        const element = document.getElementById(id);
        if (element) {
            console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º:`, id, `—Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${element.textContent}" ‚Üí –Ω–æ–≤–æ–µ: "${value}"`);
            element.textContent = value;
        } else {
            console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:`, id);
            console.log(`üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:`, Array.from(document.querySelectorAll('[id]')).map(el => el.id));
        }
    }

    private setElementText(id: string, text: string): void {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = text;
        }
    }

    private setLoading(loading: boolean): void {
        this.state.isLoading = loading;
        const loadingOverlay = document.getElementById('loading-overlay');
        if (loadingOverlay) {
            loadingOverlay.style.display = loading ? 'flex' : 'none';
        }
    }

    private showError(message: string): void {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram haptic feedback
        authService.hapticFeedback('error');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        const errorContainer = document.getElementById('error-container');
        if (errorContainer) {
            errorContainer.innerHTML = `
                <div class="error-message">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-text">${message}</div>
                    <button class="retry-button" onclick="location.reload()">
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
            errorContainer.style.display = 'block';
        }
    }

    private showAuthError(): void {
        this.showError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Telegram.');
    }

    // =========================================================================
    // –ü–†–û–í–ï–†–ö–ê DOM
    // =========================================================================

    private checkDOMElements(): boolean {
        const requiredElements = [
            'user-name',
            'user-id',
            'user-total-score',
            'user-games-played',
            'user-accuracy',
            'user-level',
            'achievements-grid',
            'leaderboard-content'
        ];

        const missing = requiredElements.filter(id => !document.getElementById(id));

        if (missing.length > 0) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã:', missing);
            return false;
        }

        return true;
    }

    // =========================================================================
    // –°–ö–ï–õ–ï–¢–û–ù–´ –ó–ê–ì–†–£–ó–ö–ò
    // =========================================================================

    private showProfileSkeleton(): void {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–∫–µ–ª–µ—Ç–æ–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
        const skeletonHTML = `
            <div class="skeleton-loader">
                <div class="skeleton-item skeleton-avatar"></div>
                <div class="skeleton-item skeleton-text"></div>
                <div class="skeleton-item skeleton-text short"></div>
            </div>
        `;

        const profileContainer = document.getElementById('profile-info');
        if (profileContainer) {
            profileContainer.innerHTML = skeletonHTML;
        }
    }

    private hideProfileSkeleton(): void {
        // –£–¥–∞–ª—è–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const skeleton = document.querySelector('.skeleton-loader');
        if (skeleton) {
            skeleton.remove();
        }
    }

    private showLeaderboardSkeleton(): void {
        const container = document.getElementById('leaderboard-content');
        if (!container) return;

        const skeletonHTML = Array.from({ length: 5 }, (_, i) => `
            <div class="leaderboard-entry skeleton">
                <div class="skeleton-item position">#${i + 1}</div>
                <div class="skeleton-item user-avatar"></div>
                <div class="skeleton-item user-name"></div>
                <div class="skeleton-item score"></div>
            </div>
        `).join('');

        container.innerHTML = skeletonHTML;
    }

    private renderEmptyLeaderboard(): void {
        const container = document.getElementById('leaderboard-content');
        if (!container) return;

        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üèÜ</div>
                <div class="empty-text">–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç</div>
                <div class="empty-subtitle">–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>
            </div>
        `;
    }

    // =========================================================================
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    // =========================================================================

    private setupEventListeners(): void {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        this.initLeaderboardTabs();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        const backButton = document.querySelector('.back-button');
        if (backButton) {
            backButton.addEventListener('click', (e) => {
                e.preventDefault();
                window.Telegram?.WebApp?.close?.();
                authService.hapticFeedback('medium');
            });
        }

        console.log('üì± Event listeners –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // =========================================================================
    // –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø
    // =========================================================================

    private startPeriodicUpdates(): void {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.updateInterval = window.setInterval(async () => {
            try {
                await this.loadProfileData();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        }, 30000);
    }

    // =========================================================================
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // =========================================================================

    private async loadUserAvatar(telegramId: number): Promise<void> {
        try {
            console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId);

            const avatarUrl = await apiService.getUserAvatar(telegramId);
            console.log('üì• –ü–æ–ª—É—á–µ–Ω URL –∞–≤–∞—Ç–∞—Ä–∞:', avatarUrl);

            if (avatarUrl) {
                // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞
                const avatarContainer = document.getElementById('user-avatar');
                const placeholderElement = document.getElementById('avatar-placeholder');

                if (avatarContainer && placeholderElement) {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π img —ç–ª–µ–º–µ–Ω—Ç
                    const imgElement = document.createElement('img');
                    imgElement.src = avatarUrl;
                    imgElement.alt = 'User Avatar';
                    imgElement.style.width = '100%';
                    imgElement.style.height = '100%';
                    imgElement.style.objectFit = 'cover';
                    imgElement.style.borderRadius = '50%';

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    imgElement.onload = () => {
                        placeholderElement.style.opacity = '0';
                        setTimeout(() => {
                            placeholderElement.style.display = 'none';
                        }, 300);
                        console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
                    };

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                    imgElement.onerror = () => {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º placeholder');
                        imgElement.remove();
                    };

                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    avatarContainer.appendChild(imgElement);
                } else {
                    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –∞–≤–∞—Ç–∞—Ä–∞:', { avatarContainer, placeholderElement });
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
        }
    }

    private updateUserPosition(data: any): void {
        console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:', data);

        const positionElement = document.getElementById('user-position');
        const totalPlayersElement = document.getElementById('total-players');

        if (positionElement && data.userPosition) {
            positionElement.textContent = data.userPosition.toString();
            console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data.userPosition);
        } else {
            positionElement && (positionElement.textContent = '‚Äî');
            console.log('‚ùå –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö:', data);
        }

        if (totalPlayersElement && data.totalUsers) {
            totalPlayersElement.textContent = data.totalUsers.toString();
            console.log('‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', data.totalUsers);
        } else {
            totalPlayersElement && (totalPlayersElement.textContent = '‚Äî');
            console.log('‚ùå –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö:', data);
        }
    }

    private updateRankDisplay(level: number, rank: any): void {
        const rankElement = document.getElementById('rank-display');
        if (rankElement) {
            rankElement.innerHTML = `
                <div class="rank-icon">${rank.icon}</div>
                <div class="rank-info">
                    <div class="rank-name">${rank.name}</div>
                    <div class="rank-level">–£—Ä–æ–≤–µ–Ω—å ${level}</div>
                </div>
            `;
        }
    }

    // =========================================================================
    // –î–ï–°–¢–†–£–ö–¢–û–†
    // =========================================================================

    public destroy(): void {
        if (this.effectsInterval) {
            clearInterval(this.effectsInterval);
        }

        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }

        // –û—á–∏—â–∞–µ–º –∫—ç—à API
        apiService.clearCache();

        console.log('üßπ Profile —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }

    // =========================================================================
    // –ì–ï–¢–¢–ï–†–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    // =========================================================================

    public getState(): ProfileState {
        return this.state;
    }

    public isReady(): boolean {
        return this.isInitialized;
    }

    private showAchievementModal(achievementId: string): void {
        const achievement = this.state.achievements.find(a => a.id === achievementId);
        if (!achievement) {
            console.error('‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', achievementId);
            return;
        }

        console.log('üèÜ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', achievement);

        // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const modal = document.getElementById('achievement-modal');
        if (!modal) {
            console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DOM');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.updateModalContent(achievement);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.classList.add('show');
        modal.style.display = 'flex';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        this.setupModalCloseHandlers(modal);

        // Haptic feedback
        authService.hapticFeedback('medium');
    }

    private updateModalContent(achievement: any): void {
        const modalIcon = document.getElementById('modal-icon');
        const modalCaseNumber = document.getElementById('modal-case-number');
        const modalTitle = document.getElementById('modal-title');
        const modalDescription = document.getElementById('modal-description');
        const modalStatus = document.getElementById('modal-status');
        const modalProgress = document.getElementById('modal-evidence');
        const progressCurrent = document.getElementById('evidence-current');
        const progressTarget = document.getElementById('evidence-target');
        const progressBar = document.getElementById('evidence-bar');
        const detailType = document.getElementById('detail-type');
        const detailReward = document.getElementById('detail-reward');

        if (modalIcon) modalIcon.textContent = achievement.icon || 'üèÜ';
        if (modalCaseNumber) modalCaseNumber.textContent = `–î–ï–õ–û ‚Ññ${achievement.id.toUpperCase()}`;
        if (modalTitle) modalTitle.textContent = achievement.name;
        if (modalDescription) modalDescription.textContent = achievement.description;

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (modalStatus) {
            const statusBadge = modalStatus.querySelector('.achievement-status-badge');
            if (statusBadge) {
                if (achievement.isUnlocked) {
                    statusBadge.className = 'achievement-status-badge unlocked';
                    statusBadge.innerHTML = '<span>‚úì</span> –î–ï–õ–û –ó–ê–ö–†–´–¢–û';
                } else {
                    statusBadge.className = 'achievement-status-badge locked';
                    statusBadge.innerHTML = '<span>‚è≥</span> –†–ê–°–°–õ–ï–î–£–ï–¢–°–Ø';
                }
            }
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (modalProgress) {
            // –ò—â–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            const configAchievement = ACHIEVEMENTS_CONFIG.find(a => a.id === achievement.id);

            if (configAchievement && configAchievement.requirement && this.state.user) {
                modalProgress.style.display = 'block';
                const req = configAchievement.requirement;

                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                let currentValue = 0;
                let targetValue = req.value || 1;
                let progressPercentageValue = 0;

                if (achievement.progressData && achievement.progressData.current !== undefined && achievement.progressData.target !== undefined) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
                    currentValue = achievement.progressData.current;
                    targetValue = achievement.progressData.target;
                    progressPercentageValue = achievement.progress || 0;

                    console.log(`üìä [–ò–°–ü–†–ê–í–õ–ï–ù–û] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${achievement.id}: ${currentValue}/${targetValue} = ${progressPercentageValue}%`);
                } else {
                    // Fallback –∫ —Ä–∞—Å—á–µ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    switch (req.type) {
                        case 'investigations':
                            currentValue = (this.state.user as any).investigations ||
                                Math.floor(((this.state.user as any).totalQuestions || 0) / 5) ||
                                this.state.user.gamesPlayed || 0;
                            break;
                        case 'correctAnswers':
                            const totalQuestions = (this.state.user as any).totalQuestions || 0;
                            const accuracy = this.state.user.accuracy || 0;
                            currentValue = Math.round(totalQuestions * accuracy / 100);
                            break;
                        case 'solvedCases':
                            currentValue = (this.state.user as any).solvedCases ||
                                (this.state.user as any).investigations ||
                                Math.floor(((this.state.user as any).totalQuestions || 0) / 5) || 0;
                            break;
                        case 'accuracy':
                            // –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä
                            const gamesPlayed = (this.state.user as any).investigations || this.state.user.gamesPlayed || 0;
                            const minGames = req.minGames || 0;

                            if (gamesPlayed >= minGames) {
                                currentValue = Math.round(this.state.user.accuracy || 0);
                                targetValue = req.value || 100;
                            } else {
                                currentValue = gamesPlayed;
                                targetValue = minGames;
                            }
                            break;
                        case 'totalScore':
                            currentValue = this.state.user.totalScore || 0;
                            break;
                        case 'perfectGames':
                            currentValue = (this.state.user as any).perfectGames ||
                                this.state.user.stats?.perfectGames || 0;
                            break;
                        case 'winStreak':
                            currentValue = (this.state.user as any).maxWinStreak ||
                                this.state.user.maxWinStreak ||
                                this.state.user.winStreak || 0;
                            break;
                        case 'fastestGame':
                            const fastestTime = (this.state.user as any).fastestGame ||
                                this.state.user.stats?.fastestGame || 0;
                            const targetTimeMs = targetValue * 1000;

                            if (fastestTime > 0 && fastestTime <= targetTimeMs) {
                                currentValue = targetValue;
                                progressPercentageValue = 100;
                            } else if (fastestTime > 0) {
                                const progressRatio = Math.max(0, (targetTimeMs / fastestTime));
                                currentValue = Math.round(targetValue * progressRatio);
                                progressPercentageValue = Math.min(Math.round(progressRatio * 100), 99);
                            }
                            break;
                        case 'dailyStreak':
                            currentValue = (this.state.user as any).dailyStreakCurrent ||
                                this.state.user.stats?.dailyStreakCurrent || 0;
                            break;
                        case 'reputation':
                            const rep = (this.state.user as any).reputation;
                            if (rep) {
                                currentValue = rep.level || Math.round((rep.accuracy + rep.speed + rep.consistency + rep.difficulty) / 4);
                            }
                            break;
                        default:
                            // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                            currentValue = 0;
                            break;
                    }

                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è fallback —Å–ª—É—á–∞–µ–≤
                    if (req.type !== 'fastestGame') {
                        progressPercentageValue = Math.min(Math.round((currentValue / targetValue) * 100), achievement.isUnlocked ? 100 : 99);
                    }
                }

                // –î–ª—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 100%
                if (achievement.isUnlocked) {
                    if (req.type === 'fastestGame') {
                        // –î–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                        progressPercentageValue = 100;
                    } else {
                        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —á—Ç–æ —Ç–µ–∫—É—â–µ–µ >= —Ü–µ–ª–µ–≤–æ–≥–æ
                        currentValue = Math.max(currentValue, targetValue);
                        progressPercentageValue = 100;
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                if (progressCurrent) progressCurrent.textContent = currentValue.toLocaleString();
                if (progressTarget) progressTarget.textContent = targetValue.toLocaleString();
                if (progressBar) {
                    progressBar.style.width = `${progressPercentageValue}%`;
                }
            } else {
                modalProgress.style.display = 'none';
            }
        }

        // –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (detailType) detailType.textContent = achievement.category || '–û–±—â–µ–µ';
        if (detailReward) detailReward.textContent = achievement.rarity || '–û–±—ã—á–Ω–æ–µ';

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        const modalContent = document.querySelector('.achievement-modal-content');
        if (modalContent) {
            if (achievement.isUnlocked) {
                modalContent.classList.add('unlocked');
            } else {
                modalContent.classList.remove('unlocked');
            }
        }
    }

    private setupModalCloseHandlers(modal: HTMLElement): void {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        modal.removeEventListener('click', this.handleModalClick);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        modal.addEventListener('click', this.handleModalClick);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeButton = document.getElementById('modal-close');
        if (closeButton) {
            closeButton.removeEventListener('click', this.hideAchievementModal);
            closeButton.addEventListener('click', this.hideAchievementModal);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC
        document.removeEventListener('keydown', this.handleModalEscape);
        document.addEventListener('keydown', this.handleModalEscape);
    }

    private handleModalClick = (e: Event): void => {
        const modal = document.getElementById('achievement-modal');
        if (modal && e.target === modal) {
            this.hideAchievementModal();
        }
    }

    private handleModalEscape = (e: KeyboardEvent): void => {
        if (e.key === 'Escape') {
            this.hideAchievementModal();
        }
    }

    private hideAchievementModal = (): void => {
        const modal = document.getElementById('achievement-modal');
        if (modal) {
            modal.classList.remove('show');
            modal.style.display = 'none';

            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            modal.removeEventListener('click', this.handleModalClick);
            document.removeEventListener('keydown', this.handleModalEscape);

            const closeButton = document.getElementById('modal-close');
            if (closeButton) {
                closeButton.removeEventListener('click', this.hideAchievementModal);
            }
        }

        // Haptic feedback
        authService.hapticFeedback('light');
    }

    private addAchievementInteractivity(): void {
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ (–∫–ª–∏–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ createAchievementElement)
        const cards = document.querySelectorAll('.achievement-card');
        cards.forEach(card => {
            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏—è
            card.removeEventListener('mouseenter', this.handleAchievementHover);
            card.removeEventListener('mouseleave', this.handleAchievementLeave);

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            card.addEventListener('mouseenter', this.handleAchievementHover);
            card.addEventListener('mouseleave', this.handleAchievementLeave);
        });
    }

    private handleAchievementHover = (e: Event): void => {
        authService.hapticFeedback('light');
        const card = e.target as HTMLElement;
        if (card) {
            card.style.transform = 'translateY(-2px) scale(1.02)';
        }
    }

    private handleAchievementLeave = (e: Event): void => {
        const card = e.target as HTMLElement;
        if (card) {
            card.style.transform = '';
        }
    }

    // –£–î–ê–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è calculateRealProgress - –≤–µ—Å—å —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

    /**
     * üéØ –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –í –°–¢–ò–õ–ï –î–ï–¢–ï–ö–¢–ò–í–ù–û–ì–û –î–û–°–¨–ï
     */
    private createAchievementCard(achievement: Achievement, progress: any, isUnlocked: boolean): HTMLElement {
        console.log('üéØ –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É:', achievement.name, 'isUnlocked:', isUnlocked);

        const card = document.createElement('div');
        card.className = `achievement-item ${isUnlocked ? '' : 'locked'}`;
        card.setAttribute('data-achievement-id', achievement.id);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        const progressPercent = progress ? Math.min(progress.percentage || 0, 100) : 0;

        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è ${achievement.name}: ${progressPercent}%`, { progress });

        card.innerHTML = `
            <!-- –°—Ç–∞—Ç—É—Å –ø–µ—á–∞—Ç—å -->
            <div class="achievement-status-stamp ${isUnlocked ? 'unlocked' : 'locked'}">
                ${isUnlocked ? '‚úì' : 'üîí'}
            </div>

            <!-- –ò–∫–æ–Ω–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è -->
            <div class="achievement-icon">${achievement.icon || 'üèÜ'}</div>

            <!-- –ù–∞–∑–≤–∞–Ω–∏–µ -->
            <div class="achievement-name">${achievement.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'}</div>

            <!-- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ -->
            <div class="achievement-summary">
                ${this.getAchievementSummary(achievement)}
            </div>

            <!-- –ú–∏–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–Ω–∏–∑—É -->
            <div class="achievement-progress-mini">
                <div class="achievement-progress-fill" style="width: ${progressPercent}%"></div>
            </div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        card.addEventListener('click', () => {
            this.openAchievementModal(achievement, progress, isUnlocked);
        });

        return card;
    }

    /**
     * üìù –ü–û–õ–£–ß–ï–ù–ò–ï –ö–†–ê–¢–ö–û–ì–û –û–ü–ò–°–ê–ù–ò–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
     */
    private getAchievementSummary(achievement: Achievement): string {
        const req = achievement.requirement;
        if (!req) return '–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ';

        switch (req.type) {
            case 'investigations':
                return `–ó–∞–≤–µ—Ä—à–∏—Ç—å ${req.value} —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π`;
            case 'accuracy':
                return `–î–æ—Å—Ç–∏—á—å ${req.value}% —Ç–æ—á–Ω–æ—Å—Ç–∏`;
            case 'totalScore':
                return `–ù–∞–±—Ä–∞—Ç—å ${req.value} –æ—á–∫–æ–≤`;
            case 'perfectGames':
                return `${req.value} –±–µ–∑–æ—à–∏–±–æ—á–Ω—ã—Ö –∏–≥—Ä`;
            case 'winStreak':
                return `–°–µ—Ä–∏—è –∏–∑ ${req.value} –ø–æ–±–µ–¥`;
            case 'dailyStreak':
                return `${req.value} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥`;
            case 'crimeType':
                return `–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${req.crimeType}`;
            case 'difficultyType':
                return `–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${req.difficulty}`;
            case 'reputation':
                return `–†–µ–ø—É—Ç–∞—Ü–∏—è: ${req.value}`;
            case 'combo':
                return `–ö–æ–º–±–æ x${req.value}`;
            default:
                return '–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ';
        }
    }

    /**
     * üìÅ –û–¢–ö–†–´–¢–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –§–ê–ô–õ–ê –î–ï–õ–ê
     */
    private openAchievementModal(achievement: Achievement, progress: any, isUnlocked: boolean): void {
        console.log('üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ–ª–æ:', achievement.name);

        const modal = document.getElementById('achievement-modal');
        const modalContent = modal?.querySelector('.achievement-modal-content');

        if (!modal || !modalContent) {
            console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        modalContent.className = `achievement-modal-content ${isUnlocked ? 'unlocked' : 'locked'}`;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        this.setElementText('modal-case-number', `–î–ï–õ–û ‚Ññ${achievement.id.toUpperCase()}`);
        this.setElementText('modal-icon', achievement.icon);
        this.setElementText('modal-title', achievement.name.toUpperCase());
        this.setElementText('modal-description', achievement.description);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —É–ª–∏–∫
        const evidenceSection = document.getElementById('modal-evidence');
        if (evidenceSection && progress) {
            evidenceSection.style.display = 'block';
            this.setElementText('evidence-current', progress.current.toString());
            this.setElementText('evidence-target', progress.target.toString());

            const evidenceBar = document.getElementById('evidence-bar') as HTMLElement;
            if (evidenceBar) {
                const progressPercent = Math.min((progress.current / progress.target) * 100, 100);
                evidenceBar.style.width = `${progressPercent}%`;
            }
        } else if (evidenceSection) {
            evidenceSection.style.display = 'none';
        }

        // –î–µ—Ç–∞–ª–∏ –¥–µ–ª–∞
        this.setElementText('detail-type', this.getAchievementCategory(achievement));
        this.setElementText('detail-reward', this.getAchievementReward(achievement));

        // –°—Ç–∞—Ç—É—Å –¥–µ–ª–∞
        const statusBadge = document.getElementById('modal-status');
        if (statusBadge) {
            statusBadge.className = `achievement-status-badge ${isUnlocked ? 'unlocked' : 'locked'}`;
            statusBadge.innerHTML = isUnlocked
                ? '<span>‚úì</span> –î–ï–õ–û –ó–ê–ö–†–´–¢–û'
                : '<span>üîç</span> –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï';
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ü–ï–†–ï–î –ø–æ–∫–∞–∑–æ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.setupModalCloseHandlers(modal);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.style.display = 'flex';
        modal.classList.add('show');

        // Haptic feedback –¥–ª—è Telegram
        if (window.Telegram?.WebApp?.HapticFeedback) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
        }
    }

    /**
     * üìÇ –ü–û–õ–£–ß–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
     */
    private getAchievementCategory(achievement: Achievement): string {
        const req = achievement.requirement;
        if (!req) return '–°–µ–∫—Ä–µ—Ç–Ω–æ–µ';

        switch (req.type) {
            case 'investigations':
            case 'perfectGames':
                return '–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è';
            case 'accuracy':
                return '–¢–æ—á–Ω–æ—Å—Ç—å';
            case 'totalScore':
                return '–û—á–∫–∏';
            case 'winStreak':
            case 'dailyStreak':
                return '–°–µ—Ä–∏–∏';
            case 'crimeType':
            case 'difficultyType':
                return '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è';
            case 'reputation':
                return '–†–µ–ø—É—Ç–∞—Ü–∏—è';
            case 'combo':
                return '–ö–æ–º–±–æ';
            default:
                return '–°–µ–∫—Ä–µ—Ç–Ω–æ–µ';
        }
    }

    /**
     * üèÜ –ü–û–õ–£–ß–ï–ù–ò–ï –ù–ê–ì–†–ê–î–´ –ó–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ï
     */
    private getAchievementReward(achievement: Achievement): string {
        // –ë–∞–∑–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        const rarityRewards: Record<string, number> = {
            'common': 50,
            'rare': 100,
            'epic': 250,
            'legendary': 500,
            'mythic': 1000
        };

        const exp = rarityRewards[achievement.rarity] || 50;
        let reward = `${exp} EXP`;

        // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ —Ä–µ–¥–∫–æ—Å—Ç—å
        if (achievement.rarity === 'legendary' || achievement.rarity === 'mythic') {
            reward += ' + –û—Å–æ–±—ã–π —Ç–∏—Ç—É–ª';
        }

        return reward;
    }
}

// =============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï DOM
// =============================================================================

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
declare global {
    interface Window {
        criminalProfile?: CriminalTrustProfile;
    }
}

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üéØ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å...');
    window.criminalProfile = new CriminalTrustProfile();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default CriminalTrustProfile; 