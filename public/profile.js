/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ñ–∏–ª—è "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ"
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

// –û–±—ä–µ–∫—Ç Telegram WebApp –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram Mini Apps
let tg = window.Telegram?.WebApp;

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function createAuthenticatedUrl(baseUrl) {
    const token = localStorage.getItem('token') || localStorage.getItem('auth_token');
    let url = baseUrl;

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ URL
    if (token) {
        url += `?token=${encodeURIComponent(token)}`;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ Telegram WebApp, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Ç–æ–∂–µ
    if (window.Telegram?.WebApp?.initData) {
        const separator = url.includes('?') ? '&' : '?';
        url += `${separator}initData=${encodeURIComponent(window.Telegram.WebApp.initData)}`;
    }

    return url;
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const ProfileState = {
    loading: false,
    error: false,
    errorMessage: '',
    profileData: null,
    token: null,
    isAuthenticated: false
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const Elements = {
    loadingScreen: null,
    mainContent: null,
    errorScreen: null,
    errorMessage: null,

    // –ü—Ä–æ—Ñ–∏–ª—å
    detectiveName: null,
    detectiveRank: null,
    reputationLevel: null,
    reputationCategory: null,

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    statInvestigations: null,
    statSolved: null,
    statAccuracy: null,
    statScore: null,

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    achievementsContainer: null,
    leaderboardContainer: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function initElements() {
    Elements.loadingScreen = document.getElementById('loading-screen');
    Elements.mainContent = document.getElementById('main-content');
    Elements.errorScreen = document.getElementById('error-screen');
    Elements.errorMessage = document.getElementById('error-message');

    // –ü—Ä–æ—Ñ–∏–ª—å
    Elements.detectiveName = document.getElementById('detective-name');
    Elements.detectiveRank = document.getElementById('detective-rank');
    Elements.reputationLevel = document.getElementById('reputation-level');
    Elements.reputationCategory = document.getElementById('reputation-category');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    Elements.statInvestigations = document.getElementById('stat-investigations');
    Elements.statSolved = document.getElementById('stat-solved');
    Elements.statAccuracy = document.getElementById('stat-accuracy');
    Elements.statScore = document.getElementById('stat-score');

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    Elements.achievementsContainer = document.getElementById('achievements-container');
    Elements.leaderboardContainer = document.getElementById('leaderboard-container');
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–æ—Ñ–∏–ª—è
 */
class ProfileManager {
    constructor() {
        this.init();
    }

    async init() {
        try {
            console.log('üïµÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–∞...');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
            initElements();

            this.showLoading();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
            if (tg) {
                tg.ready();
                tg.expand();
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            await this.checkAuth();

            if (ProfileState.isAuthenticated) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
                await this.loadProfile();
                await this.loadAchievements();
                await this.loadLeaderboard();

                this.showContent();
            } else {
                this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message);
        }
    }

    async checkAuth() {
        try {
            console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL –∏–ª–∏ localStorage
            const urlParams = new URLSearchParams(window.location.search);
            let token = urlParams.get('token') || localStorage.getItem('token') || localStorage.getItem('auth_token');

            if (!token && tg?.initData) {
                // –ü—ã—Ç–∞–µ–º—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
                const response = await fetch('/api/auth/telegram', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        initData: tg.initData
                    })
                });

                if (response.ok) {
                    const data = await response.json();
                    token = data.token;
                    localStorage.setItem('token', token);
                }
            }

            if (token) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                const response = await fetch('/api/auth/verify', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    ProfileState.token = token;
                    ProfileState.isAuthenticated = true;
                    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                } else {
                    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
                    localStorage.removeItem('token');
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            ProfileState.isAuthenticated = false;
        }
    }

    async loadProfile() {
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...');

            const response = await fetch('/api/user/profile', {
                headers: {
                    'Authorization': `Bearer ${ProfileState.token}`
                }
            });

            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
            }

            const profileData = await response.json();
            ProfileState.profileData = profileData;

            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', profileData);

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateProfileUI(profileData);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            throw error;
        }
    }

    updateProfileUI(data) {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (Elements.detectiveName) {
            Elements.detectiveName.textContent = data.basic?.firstName || data.username || '–î–µ—Ç–µ–∫—Ç–∏–≤';
        }

        if (Elements.detectiveRank) {
            Elements.detectiveRank.textContent = data.rank?.current || '–ù–û–í–ò–ß–û–ö';
        }

        // –†–µ–ø—É—Ç–∞—Ü–∏—è
        if (Elements.reputationLevel) {
            Elements.reputationLevel.textContent = data.reputation?.level || 0;
        }

        if (Elements.reputationCategory) {
            Elements.reputationCategory.textContent = data.reputation?.category || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const stats = data.stats || {};

        if (Elements.statInvestigations) {
            Elements.statInvestigations.textContent = stats.investigations || 0;
        }

        if (Elements.statSolved) {
            Elements.statSolved.textContent = stats.solvedCases || 0;
        }

        if (Elements.statAccuracy) {
            Elements.statAccuracy.textContent = Math.round(stats.accuracy || 0) + '%';
        }

        if (Elements.statScore) {
            Elements.statScore.textContent = stats.totalScore || 0;
        }
    }

    async loadAchievements() {
        try {
            console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');

            const response = await fetch('/api/user/achievements', {
                headers: {
                    'Authorization': `Bearer ${ProfileState.token}`
                }
            });

            if (!response.ok) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è');
                return;
            }

            const achievements = await response.json();
            this.renderAchievements(achievements);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        }
    }

    renderAchievements(achievements) {
        if (!Elements.achievementsContainer) return;

        // –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∏–∫–æ–Ω–∫–∞–º–∏
        const baseAchievements = [
            { id: 'first_case', name: '–ü–ï–†–í–û–ï –î–ï–õ–û', icon: 'üîç', locked: true },
            { id: 'rookie', name: '–ù–û–í–ò–ß–û–ö', icon: 'üéñÔ∏è', locked: true },
            { id: 'expert', name: '–≠–ö–°–ü–ï–†–¢', icon: 'üèÜ', locked: true },
            { id: 'sharp_eye', name: '–û–°–¢–†–´–ô –ì–õ–ê–ó', icon: 'üëÅÔ∏è', locked: true },
            { id: 'serial_detective', name: '–°–ï–†–ò–ô–ù–´–ô –°–´–©–ò–ö', icon: 'üïµÔ∏è', locked: true },
            { id: 'maniac', name: '–ú–ê–ù–¨–Ø–ö', icon: '‚ö°', locked: true }
        ];

        // –û—Ç–º–µ—á–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements.forEach(userAchievement => {
            const achievement = baseAchievements.find(a => a.id === userAchievement.id);
            if (achievement) {
                achievement.locked = false;
                achievement.name = userAchievement.name || achievement.name;
            }
        });

        // –†–µ–Ω–¥–µ—Ä–∏–º
        Elements.achievementsContainer.innerHTML = baseAchievements.map(achievement => `
            <div class="achievement-badge ${achievement.locked ? '' : 'unlocked'}">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-name">${achievement.locked ? '???' : achievement.name}</div>
            </div>
        `).join('');
    }

    async loadLeaderboard() {
        try {
            console.log('üëë –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...');

            const response = await fetch('/api/leaderboard/week', {
                headers: {
                    'Authorization': `Bearer ${ProfileState.token}`
                }
            });

            if (!response.ok) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥');
                return;
            }

            const leaderboard = await response.json();
            this.renderLeaderboard(leaderboard);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
        }
    }

    renderLeaderboard(data) {
        if (!Elements.leaderboardContainer) return;

        const leaders = data.leaders || [];
        const currentUser = ProfileState.profileData;

        if (leaders.length === 0) {
            Elements.leaderboardContainer.innerHTML = `
                <div style="text-align: center; padding: 2rem; color: var(--suspect-gray);">
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–¥–µ—Ä–∞—Ö</p>
                </div>
            `;
            return;
        }

        Elements.leaderboardContainer.innerHTML = leaders.map((leader, index) => {
            const isCurrentUser = currentUser && leader.userId === currentUser.id;
            return `
                <div class="leaderboard-item ${isCurrentUser ? 'current-user' : ''}">
                    <div class="leaderboard-rank">${index + 1}</div>
                    <div class="leaderboard-info">
                        <div class="leaderboard-name">${leader.username || leader.firstName || '–î–µ—Ç–µ–∫—Ç–∏–≤'}</div>
                        <div class="leaderboard-score">${leader.score || 0} –æ—á–∫–æ–≤</div>
                    </div>
                </div>
            `;
        }).join('');
    }

    showLoading() {
        ProfileState.loading = true;
        ProfileState.error = false;

        if (Elements.loadingScreen) Elements.loadingScreen.classList.remove('hidden');
        if (Elements.mainContent) Elements.mainContent.classList.add('hidden');
        if (Elements.errorScreen) Elements.errorScreen.classList.add('hidden');
    }

    showContent() {
        ProfileState.loading = false;
        ProfileState.error = false;

        if (Elements.loadingScreen) Elements.loadingScreen.classList.add('hidden');
        if (Elements.mainContent) Elements.mainContent.classList.remove('hidden');
        if (Elements.errorScreen) Elements.errorScreen.classList.add('hidden');
    }

    showError(message) {
        ProfileState.loading = false;
        ProfileState.error = true;
        ProfileState.errorMessage = message;

        if (Elements.errorMessage) Elements.errorMessage.textContent = message;

        if (Elements.loadingScreen) Elements.loadingScreen.classList.add('hidden');
        if (Elements.mainContent) Elements.mainContent.classList.add('hidden');
        if (Elements.errorScreen) Elements.errorScreen.classList.remove('hidden');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–∞...');
    new ProfileManager();
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ Lucide
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }, 100);
}); 