/**
 * Criminal Trust - Ultra Dramatic Profile Interface
 * –ú—Ä–∞—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Ñ–∏–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ true crime
 */

// Telegram WebApp API
let tg = window.Telegram?.WebApp;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º—Ä–∞—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
const ProfileConfig = {
    levels: {
        // üî• –ù–û–í–ê–Ø –≠–ö–°–ü–û–ù–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô
        maxXP: [
            // –ü–µ—Ä–≤—ã–µ —É—Ä–æ–≤–Ω–∏ (–Ω–æ–≤–∏—á–∫–∏) - –º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è
            500,     // 1: ~10 –∏–≥—Ä
            1200,    // 2: ~14 –∏–≥—Ä  
            2500,    // 3: ~26 –∏–≥—Ä
            4500,    // 4: ~40 –∏–≥—Ä
            7500,    // 5: ~60 –∏–≥—Ä

            // –°—Ä–µ–¥–Ω–∏–µ —É—Ä–æ–≤–Ω–∏ (–¥–µ—Ç–µ–∫—Ç–∏–≤—ã) - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è  
            12000,   // 6: ~84 –∏–≥—Ä—ã
            18000,   // 7: ~120 –∏–≥—Ä
            26000,   // 8: ~160 –∏–≥—Ä
            36000,   // 9: ~200 –∏–≥—Ä
            50000,   // 10: ~250 –∏–≥—Ä

            // –í—ã—Å–æ–∫–∏–µ —É—Ä–æ–≤–Ω–∏ (—ç–∫—Å–ø–µ—Ä—Ç—ã) - –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
            70000,   // 11: ~320 –∏–≥—Ä
            95000,   // 12: ~420 –∏–≥—Ä
            130000,  // 13: ~550 –∏–≥—Ä
            175000,  // 14: ~700 –∏–≥—Ä
            235000,  // 15: ~900 –∏–≥—Ä

            // –ú–∞—Å—Ç–µ—Ä—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ (–ª–µ–≥–µ–Ω–¥—ã) - –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ
            315000,  // 16: ~1200 –∏–≥—Ä
            420000,  // 17: ~1600 –∏–≥—Ä
            560000,  // 18: ~2100 –∏–≥—Ä
            750000,  // 19: ~2800 –∏–≥—Ä
            1000000  // 20: ~3700 –∏–≥—Ä (–º–∞–∫—Å–∏–º—É–º)
        ],

        // üéñÔ∏è –£–õ–£–ß–®–ï–ù–ù–´–ï –†–ê–ù–ì–ò –° –ü–û–î–†–ê–ù–ì–ê–ú–ò
        getRankByLevel: (level) => {
            const ranks = [
                // –ù–æ–≤–∏—á–∫–∏ (1-5)
                { name: '–ü–û–î–û–ó–†–ï–í–ê–ï–ú–´–ô', color: '#666666', icon: 'üî∞' },
                { name: '–°–¢–ê–ñ–ï–†', color: '#888888', icon: 'üëÆ‚Äç‚ôÇÔ∏è' },
                { name: '–ü–ê–¢–†–£–õ–¨–ù–´–ô', color: '#999999', icon: 'üöî' },
                { name: '–°–ï–†–ñ–ê–ù–¢', color: '#AAAAAA', icon: '‚≠ê' },
                { name: '–î–ï–¢–ï–ö–¢–ò–í', color: '#4169E1', icon: 'üïµÔ∏è' },

                // –°—Ä–µ–¥–Ω–∏–µ (6-10) 
                { name: '–°–¢.–î–ï–¢–ï–ö–¢–ò–í', color: '#1E90FF', icon: 'üïµÔ∏è‚Äç‚ôÇÔ∏è' },
                { name: '–ò–ù–°–ü–ï–ö–¢–û–†', color: '#00BFFF', icon: 'üë®‚Äçüíº' },
                { name: '–°–¢.–ò–ù–°–ü–ï–ö–¢–û–†', color: '#87CEEB', icon: 'üë®‚Äçüíº' },
                { name: '–õ–ï–ô–¢–ï–ù–ê–ù–¢', color: '#FFD700', icon: 'üéñÔ∏è' },
                { name: '–ö–ê–ü–ò–¢–ê–ù', color: '#FFA500', icon: 'üëë' },

                // –í—ã—Å–æ–∫–∏–µ (11-15)
                { name: '–ú–ê–ô–û–†', color: '#FF6347', icon: 'üî•' },
                { name: '–ü–û–î–ü–û–õ–ö–û–í–ù–ò–ö', color: '#FF4500', icon: 'üí´' },
                { name: '–ü–û–õ–ö–û–í–ù–ò–ö', color: '#DC143C', icon: '‚ö°' },
                { name: '–ì–ï–ù–ï–†–ê–õ', color: '#B22222', icon: 'üíé' },
                { name: '–®–ï–§ –ü–û–õ–ò–¶–ò–ò', color: '#8B0000', icon: 'üë®‚Äç‚öñÔ∏è' },

                // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ (16-20)
                { name: '–ö–û–ú–ò–°–°–ê–†', color: '#800080', icon: 'üåü' },
                { name: '–°–£–ü.–ö–û–ú–ò–°–°–ê–†', color: '#9400D3', icon: '‚ú®' },
                { name: '–ú–ê–°–¢–ï–†-–î–ï–¢–ï–ö–¢–ò–í', color: '#4B0082', icon: 'üèÜ' },
                { name: '–ì–†–ê–ù–î-–ú–ê–°–¢–ï–†', color: '#191970', icon: 'üí´' },
                { name: '–õ–ï–ì–ï–ù–î–ê', color: '#000080', icon: 'üëë' }
            ];

            const index = Math.min(Math.max(level - 1, 0), ranks.length - 1);
            return ranks[index];
        },

        // üìä –°–ò–°–¢–ï–ú–ê –ú–ù–û–ñ–ò–¢–ï–õ–ï–ô –û–ü–´–¢–ê
        experienceMultipliers: {
            // –ë–∞–∑–æ–≤—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            perfect_game: 1.5,        // +50% –∑–∞ –∏–¥–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É (5/5)
            speed_bonus: 1.3,         // +30% –∑–∞ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
            difficulty_master: 1.4,   // +40% –∑–∞ —Å–ª–æ–∂–Ω—ã–µ –¥–µ–ª–∞
            consistency: 1.2,         // +20% –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∏–≥—Ä—É
            streak_bonus: 1.6,        // +60% –∑–∞ —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥

            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievement_unlock: 2.0,  // +100% –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

            // –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            weekend_bonus: 1.1,       // +10% –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
            daily_first_game: 1.25,   // +25% –∑–∞ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –¥–Ω—è

            // –®—Ç—Ä–∞—Ñ—ã –∑–∞ "—Ñ–∞—Ä–º"
            same_hour_penalty: 0.8,   // -20% –∑–∞ >3 –∏–≥—Ä –≤ —á–∞—Å
            same_day_penalty: 0.9     // -10% –∑–∞ >10 –∏–≥—Ä –≤ –¥–µ–Ω—å
        },

        // üéØ –°–ò–°–¢–ï–ú–ê –ú–ê–°–¢–ï–†–°–¢–í–ê –ü–û –¢–ò–ü–ê–ú –ü–†–ï–°–¢–£–ü–õ–ï–ù–ò–ô
        crimeTypeMastery: {
            murder: { name: '–£–±–∏–π—Å—Ç–≤–∞', icon: 'üî™', maxLevel: 10 },
            robbery: { name: '–û–≥—Ä–∞–±–ª–µ–Ω–∏—è', icon: 'üí∞', maxLevel: 10 },
            fraud: { name: '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', icon: 'üí≥', maxLevel: 10 },
            theft: { name: '–ö—Ä–∞–∂–∏', icon: 'üèÉ‚Äç‚ôÇÔ∏è', maxLevel: 10 },
            cybercrime: { name: '–ö–∏–±–µ—Ä–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è', icon: 'üíª', maxLevel: 10 }
        }
    },
    achievements: [
        // üöÄ –ü–ï–†–í–´–ï –®–ê–ì–ò (–±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
        { id: 'first_blood', name: '–ü–µ—Ä–≤–∞—è —É–ª–∏–∫–∞', icon: 'üîç', description: '–†–µ—à–∏–ª–∏ –ø–µ—Ä–≤–æ–µ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ–ª–æ' },
        { id: 'rookie_investigator', name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', icon: 'üïµÔ∏è', description: '–†–µ—à–∏–ª–∏ 10 –¥–µ–ª' },
        { id: 'case_closer', name: '–ó–∞–∫—Ä—ã–≤–∞—Ç–µ–ª—å –¥–µ–ª', icon: 'üìù', description: '–†–µ—à–∏–ª–∏ 50 –¥–µ–ª' },
        { id: 'crime_solver', name: '–†–∞—Å–∫—Ä—ã–≤–∞—Ç–µ–ª—å –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π', icon: '‚öñÔ∏è', description: '–†–µ—à–∏–ª–∏ 100 –¥–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ' },
        { id: 'detective_veteran', name: '–í–µ—Ç–µ—Ä–∞–Ω –¥–µ—Ç–µ–∫—Ç–∏–≤', icon: 'üéñÔ∏è', description: '–†–µ—à–∏–ª–∏ 250 –¥–µ–ª' },

        // üéØ –¢–û–ß–ù–û–°–¢–¨ –ò –ú–ê–°–¢–ï–†–°–¢–í–û (—Ä–µ–¥–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
        { id: 'sharp_shooter', name: '–ú–µ—Ç–∫–∏–π —Å—Ç—Ä–µ–ª–æ–∫', icon: 'üéØ', description: '–¢–æ—á–Ω–æ—Å—Ç—å 70% –≤ 50+ –¥–µ–ª–∞—Ö' },
        { id: 'eagle_eye', name: '–û—Ä–ª–∏–Ω—ã–π –≥–ª–∞–∑', icon: 'üëÅÔ∏è', description: '–¢–æ—á–Ω–æ—Å—Ç—å 80% –≤ 100+ –¥–µ–ª–∞—Ö' },
        { id: 'master_detective', name: '–ú–∞—Å—Ç–µ—Ä-–¥–µ—Ç–µ–∫—Ç–∏–≤', icon: 'üèÜ', description: '–¢–æ—á–Ω–æ—Å—Ç—å 90% –≤ 200+ –¥–µ–ª–∞—Ö' },
        { id: 'sherlock', name: '–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å', icon: 'üé©', description: '–¢–æ—á–Ω–æ—Å—Ç—å 95% –≤ 300+ –¥–µ–ª–∞—Ö' },
        { id: 'perfectionist', name: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç', icon: 'üíé', description: '10 —Å–µ—Å—Å–∏–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –æ—à–∏–±–æ–∫' },

        // ‚ö° –°–ö–û–†–û–°–¢–¨ –†–ï–ê–ö–¶–ò–ò (—Ä–µ–¥–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
        { id: 'quick_draw', name: '–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è', icon: '‚ö°', description: '50 –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ 15 —Å–µ–∫—É–Ω–¥' },
        { id: 'speed_demon', name: '–î–µ–º–æ–Ω —Å–∫–æ—Ä–æ—Å—Ç–∏', icon: 'üí®', description: '100 –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ 10 —Å–µ–∫—É–Ω–¥' },
        { id: 'lightning_fast', name: '–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π', icon: 'üåü', description: '–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å < 20 —Å–µ–∫—É–Ω–¥ (500 –¥–µ–ª)' },
        { id: 'time_lord', name: '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏', icon: '‚è∞', description: '–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å < 15 —Å–µ–∫—É–Ω–¥ (1000 –¥–µ–ª)' },

        // üî• –°–ï–†–ò–ò –ò –ü–û–°–¢–û–Ø–ù–°–¢–í–û (—ç–ø–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
        { id: 'hot_streak', name: '–ì–æ—Ä—è—á–∞—è —Å–µ—Ä–∏—è', icon: 'üî•', description: '10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥' },
        { id: 'unstoppable', name: '–ù–µ—É–¥–µ—Ä–∂–∏–º—ã–π', icon: 'üí™', description: '25 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥' },
        { id: 'legend_streak', name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ä–∏—è', icon: 'üëë', description: '50 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥' },
        { id: 'untouchable', name: '–ù–µ–ø—Ä–∏–∫–∞—Å–∞–µ–º—ã–π', icon: '‚≠ê', description: '100 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥' },
        { id: 'daily_detective', name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤', icon: 'üìÖ', description: '–ò–≥—Ä–∞–ª 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥' },

        // üèÖ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –†–û–°–¢ (—ç–ø–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
        { id: 'crime_fighter', name: '–ë–æ—Ä–µ—Ü —Å –ø—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é', icon: 'üöî', description: '500 –¥–µ–ª —Ä–µ—à–µ–Ω–æ' },
        { id: 'elite_investigator', name: '–≠–ª–∏—Ç–Ω—ã–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', icon: 'üéñÔ∏è', description: '1000 –¥–µ–ª —Ä–µ—à–µ–Ω–æ' },
        { id: 'legendary_detective', name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤', icon: '‚≠ê', description: '2500 –¥–µ–ª —Ä–µ—à–µ–Ω–æ' },
        { id: 'grand_master', name: '–ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä', icon: 'üëë', description: '5000 –¥–µ–ª —Ä–µ—à–µ–Ω–æ' },
        { id: 'crime_lord', name: '–ö–æ—Ä–æ–ª—å –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∏', icon: 'üíé', description: '10000 –¥–µ–ª —Ä–µ—à–µ–Ω–æ' },

        // üï∞Ô∏è –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø (—Ä–µ–¥–∫–∏–µ)
        { id: 'last_second_master', name: '–ú–∞—Å—Ç–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ–∫—É–Ω–¥—ã', icon: '‚è∞', description: '100 –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥' },
        { id: 'pressure_cooker', name: '–ü–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º', icon: 'üî•', description: '50 –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã' },
        { id: 'clutch_king', name: '–ö–æ—Ä–æ–ª—å –∫–ª–∞—Ç—á–∞', icon: 'üéØ', description: '25 –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É' },
        { id: 'ice_cold', name: '–õ–µ–¥—è–Ω–æ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', icon: '‚ùÑÔ∏è', description: '200 –æ—Ç–≤–µ—Ç–æ–≤ —Å 25-35 —Å–µ–∫—É–Ω–¥–∞–º–∏' },

        // üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ò–õ–¨–°–¢–û–£–ù–´ (—ç–ø–∏—á–µ—Å–∫–∏–µ)
        { id: 'century_club', name: '–ö–ª—É–± —Å–æ—Ç–Ω–∏', icon: 'üíØ', description: '100 —Å–µ—Å—Å–∏–π —Å—ã–≥—Ä–∞–Ω–æ' },
        { id: 'thousand_cases', name: '–¢—ã—Å—è—á–∞ –¥–µ–ª', icon: 'üèõÔ∏è', description: '1000 —Å–µ—Å—Å–∏–π —Å—ã–≥—Ä–∞–Ω–æ' },
        { id: 'score_hunter', name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –æ—á–∫–∞–º–∏', icon: 'üí∞', description: '100,000 –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–æ' },
        { id: 'point_legend', name: '–õ–µ–≥–µ–Ω–¥–∞ –æ—á–∫–æ–≤', icon: 'üèÜ', description: '1,000,000 –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–æ' },
        { id: 'score_god', name: '–ë–æ–≥ –æ—á–∫–æ–≤', icon: 'üíé', description: '10,000,000 –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–æ' },

        // üåü –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –í–´–ó–û–í–´ (–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ)
        { id: 'night_hunter', name: '–ù–æ—á–Ω–æ–π –æ—Ö–æ—Ç–Ω–∏–∫', icon: 'üåô', description: '500 –¥–µ–ª —Ä–µ—à–µ–Ω–æ –Ω–æ—á—å—é (00:00-06:00)' },
        { id: 'weekend_warrior', name: '–í–æ–∏–Ω –≤—ã—Ö–æ–¥–Ω—ã—Ö', icon: 'üèñÔ∏è', description: '1000 –¥–µ–ª —Ä–µ—à–µ–Ω–æ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ' },
        { id: 'workday_grind', name: '–ë—É–¥–Ω–∏—á–Ω—ã–π —Ç—Ä—É–¥', icon: 'üíº', description: '1000 –¥–µ–ª —Ä–µ—à–µ–Ω–æ –≤ –±—É–¥–Ω–∏' },
        { id: 'marathon_runner', name: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü', icon: 'üèÉ', description: '100 –¥–µ–ª –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å' },
        { id: 'endurance_master', name: '–ú–∞—Å—Ç–µ—Ä –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏', icon: 'üí™', description: '500 –¥–µ–ª –∑–∞ –Ω–µ–¥–µ–ª—é' },

        // üèÜ –£–õ–¨–¢–†–ê –†–ï–î–ö–ò–ï (–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ)
        { id: 'perfect_hundred', name: '–ò–¥–µ–∞–ª—å–Ω–∞—è —Å–æ—Ç–Ω—è', icon: 'üåü', description: '100 –¥–µ–ª –ø–æ–¥—Ä—è–¥ –±–µ–∑ –æ—à–∏–±–æ–∫' },
        { id: 'speed_legend', name: '–õ–µ–≥–µ–Ω–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏', icon: 'üöÄ', description: '1000 –¥–µ–ª —Å–æ —Å—Ä–µ–¥–Ω–∏–º < 10 —Å–µ–∫—É–Ω–¥' },
        { id: 'consistency_king', name: '–ö–æ—Ä–æ–ª—å –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞', icon: '‚öñÔ∏è', description: '365 –¥–Ω–µ–π –∏–≥—Ä—ã –ø–æ–¥—Ä—è–¥' },
        { id: 'ultimate_detective', name: '–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤', icon: 'üí´', description: '–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã' }
    ]
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
const ProfileState = {
    user: null,
    achievements: [],
    leaderboard: {
        current: 'day',
        data: {}
    },
    isLoading: false,
    criminalEffects: {
        glitchActive: false,
        bloodParticles: [],
        scanEffect: false
    }
};

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º —Å –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
 */
class DramaticCriminalProfile {
    constructor() {
        this.initTelegramWebApp();
        this.initCriminalEffects();
        this.initAchievementModal();
        this.initProfile();
    }

    initTelegramWebApp() {
        if (tg) {
            tg.ready();
            tg.expand();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            if (tg.themeParams) {
                this.applyDarkCriminalTheme();
            }

            // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            if (tg.BackButton) {
                tg.BackButton.show();
                tg.BackButton.onClick(() => {
                    this.provideCriminalFeedback('navigation');
                    this.createBloodSpatter();
                    window.history.back();
                });
            }
        }
    }

    applyDarkCriminalTheme() {
        const theme = tg.themeParams;
        document.documentElement.style.setProperty('--midnight', theme.bg_color || '#0A0A0A');
        document.documentElement.style.setProperty('--bone', theme.text_color || '#F5F5DC');
    }

    async initProfile() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...');

            // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', isMobile);

            // –í–ê–ñ–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading –ë–ï–ó –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª—é–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this.showProfileSkeleton();

            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            let isAuth = await this.authenticate();

            // –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô FALLBACK –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–• –£–°–¢–†–û–ô–°–¢–í
            if (!isAuth && isMobile) {
                console.log('üîÑ –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...');

                // –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
                if (tg) {
                    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
                    try {
                        tg.ready();
                        tg.expand();

                        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                        await new Promise(resolve => setTimeout(resolve, 1000));

                        isAuth = await this.authenticate();
                        if (isAuth) {
                            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp');
                        }
                    } catch (e) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', e);
                    }
                }

                // –ü–æ–ø—ã—Ç–∫–∞ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if (!isAuth) {
                    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö...');
                    const urlParams = new URLSearchParams(window.location.search);
                    const urlToken = urlParams.get('token') || urlParams.get('auth_token');

                    if (urlToken) {
                        console.log('üîç –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ URL:', urlToken.substring(0, 20) + '...');
                        localStorage.setItem('token', urlToken);
                        this.token = urlToken;
                        isAuth = true;
                    }
                }

                // –ü–æ–ø—ã—Ç–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ initData –≤ localStorage 
                if (!isAuth) {
                    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö initData...');
                    const savedInitData = localStorage.getItem('initData');

                    if (savedInitData && savedInitData !== tg?.initData) {
                        console.log('üîç –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ initData, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
                        try {
                            const response = await fetch('/api/auth/init', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Mobile-Fallback': 'true'
                                },
                                body: JSON.stringify({ initData: savedInitData })
                            });

                            if (response.ok) {
                                const data = await response.json();
                                if (data.status === 'success' && data.data?.token) {
                                    localStorage.setItem('token', data.data.token);
                                    this.token = data.data.token;
                                    isAuth = true;
                                    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ initData');
                                }
                            }
                        } catch (e) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ initData:', e);
                        }
                    }
                }

                // –ü–æ–ø—ã—Ç–∫–∞ 4: –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                if (!isAuth) {
                    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...');
                    const isDeveloperMode = window.location.search.includes('dev=true') ||
                        window.location.search.includes('debug=true') ||
                        window.location.hostname === 'localhost';

                    if (isDeveloperMode) {
                        console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–æ–±—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
                        await this.tryDeveloperAuth();
                        isAuth = true;
                    }
                }
            }

            if (isAuth) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –≥—Ä—É–∑—è—Ç—Å—è –≤ updateProfileUI)
                await Promise.all([
                    this.loadUserProfile(),
                    this.loadLeaderboardData('day')
                ]);

                this.hideProfileSkeleton();

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –ª–∏–¥–µ—Ä–±–æ–∞—Ä–¥–∞
                this.initLeaderboardTabs();

                this.startPeriodicUpdates();
            } else {
                // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
                this.showAuthError();
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        }
    }

    async tryDeveloperAuth() {
        try {
            // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            this.showDeveloperMessage();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', error);
            this.showDeveloperMessage();
        }
    }

    // üîÑ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò

    showProfileSkeleton() {
        console.log('‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º skeleton –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');

        // –°–∫—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è
        const profileContent = document.querySelector('.profile-container');
        if (profileContent) {
            profileContent.style.display = 'none';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º skeleton loader
        const existingSkeleton = document.getElementById('profile-skeleton');
        if (existingSkeleton) {
            existingSkeleton.style.display = 'block';
            return;
        }

        // –°–æ–∑–¥–∞–µ–º skeleton loader
        const skeleton = document.createElement('div');
        skeleton.id = 'profile-skeleton';
        skeleton.className = 'profile-skeleton-container';
        skeleton.innerHTML = `
            <div class="skeleton-header">
                <div class="skeleton-avatar"></div>
                <div class="skeleton-info">
                    <div class="skeleton-name"></div>
                    <div class="skeleton-rank"></div>
                    <div class="skeleton-level"></div>
                </div>
            </div>
            
            <div class="skeleton-progress">
                <div class="skeleton-progress-bar"></div>
                <div class="skeleton-progress-text"></div>
            </div>
            
            <div class="skeleton-stats">
                <div class="skeleton-stat"></div>
                <div class="skeleton-stat"></div>
                <div class="skeleton-stat"></div>
                <div class="skeleton-stat"></div>
            </div>
            
            <div class="skeleton-loading-text">
                <div class="loading-dots">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è<span class="dots">...</span></div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è skeleton
        const style = document.createElement('style');
        style.textContent = `
            .profile-skeleton-container {
                max-width: 500px;
                margin: 0 auto;
                padding: 20px;
                color: #F5F5DC;
            }

            .skeleton-header {
                display: flex;
                align-items: center;
                gap: 20px;
                margin-bottom: 30px;
                padding: 20px;
                background: rgba(26, 26, 26, 0.8);
                border: 1px solid rgba(220, 20, 60, 0.3);
                border-radius: 16px;
            }

            .skeleton-avatar {
                width: 80px;
                height: 80px;
                border-radius: 50%;
                background: linear-gradient(90deg, rgba(220, 20, 60, 0.2) 25%, rgba(220, 20, 60, 0.4) 50%, rgba(220, 20, 60, 0.2) 75%);
                background-size: 200% 100%;
                animation: skeletonPulse 1.5s ease-in-out infinite;
            }

            .skeleton-info {
                flex: 1;
            }

            .skeleton-name, .skeleton-rank, .skeleton-level {
                height: 16px;
                background: linear-gradient(90deg, rgba(220, 20, 60, 0.2) 25%, rgba(220, 20, 60, 0.4) 50%, rgba(220, 20, 60, 0.2) 75%);
                background-size: 200% 100%;
                animation: skeletonPulse 1.5s ease-in-out infinite;
                border-radius: 8px;
                margin-bottom: 8px;
            }

            .skeleton-name { width: 60%; }
            .skeleton-rank { width: 80%; }
            .skeleton-level { width: 40%; }

            .skeleton-progress {
                margin-bottom: 30px;
                padding: 15px;
                background: rgba(26, 26, 26, 0.6);
                border: 1px solid rgba(220, 20, 60, 0.2);
                border-radius: 12px;
            }

            .skeleton-progress-bar {
                height: 12px;
                background: linear-gradient(90deg, rgba(220, 20, 60, 0.2) 25%, rgba(220, 20, 60, 0.4) 50%, rgba(220, 20, 60, 0.2) 75%);
                background-size: 200% 100%;
                animation: skeletonPulse 1.5s ease-in-out infinite;
                border-radius: 6px;
                margin-bottom: 8px;
            }

            .skeleton-progress-text {
                height: 14px;
                width: 50%;
                background: linear-gradient(90deg, rgba(220, 20, 60, 0.2) 25%, rgba(220, 20, 60, 0.4) 50%, rgba(220, 20, 60, 0.2) 75%);
                background-size: 200% 100%;
                animation: skeletonPulse 1.5s ease-in-out infinite;
                border-radius: 7px;
            }

            .skeleton-stats {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 16px;
                margin-bottom: 30px;
            }

            .skeleton-stat {
                height: 60px;
                background: linear-gradient(90deg, rgba(220, 20, 60, 0.2) 25%, rgba(220, 20, 60, 0.4) 50%, rgba(220, 20, 60, 0.2) 75%);
                background-size: 200% 100%;
                animation: skeletonPulse 1.5s ease-in-out infinite;
                border-radius: 12px;
            }

            .skeleton-loading-text {
                text-align: center;
                padding: 20px;
            }

            .loading-dots {
                font-size: 1.1rem;
                color: #DC143C;
                font-weight: 600;
            }

            .dots {
                animation: dotAnimation 1.5s infinite;
            }

            @keyframes skeletonPulse {
                0% { background-position: -200% 0; }
                100% { background-position: 200% 0; }
            }

            @keyframes dotAnimation {
                0%, 20% { color: transparent; }
                40% { color: #DC143C; }
                100% { color: #DC143C; }
            }
        `;

        document.head.appendChild(style);
        document.body.appendChild(skeleton);
    }

    hideProfileSkeleton() {
        console.log('‚úÖ –°–∫—Ä—ã–≤–∞–µ–º skeleton –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å');

        const skeleton = document.getElementById('profile-skeleton');
        if (skeleton) {
            skeleton.style.display = 'none';
        }

        const profileContent = document.querySelector('.profile-container');
        if (profileContent) {
            profileContent.style.display = 'block';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.checkDOMElements();
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
    checkDOMElements() {
        const requiredElements = [
            'detective-name',
            'user-id',
            'user-level',
            'detective-rank',
            'user-avatar',
            'avatar-placeholder',
            'current-xp',
            'max-xp',
            'xp-bar',
            'stat-investigations',
            'stat-solved',
            'stat-streak',
            'stat-accuracy'
        ];

        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM:');

        requiredElements.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                console.log(`‚úÖ ${id}: –Ω–∞–π–¥–µ–Ω`);
            } else {
                console.error(`‚ùå ${id}: –ù–ï –ù–ê–ô–î–ï–ù!`);
            }
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        const containers = [
            '.profile-card',
            '.stats-grid',
            '.achievements-scroll',
            '.leaderboard-container'
        ];

        containers.forEach(selector => {
            const element = document.querySelector(selector);
            if (element) {
                console.log(`‚úÖ ${selector}: –Ω–∞–π–¥–µ–Ω`);
            } else {
                console.error(`‚ùå ${selector}: –ù–ï –ù–ê–ô–î–ï–ù!`);
            }
        });
    }

    showDeveloperMessage() {
        const skeleton = document.getElementById('profile-skeleton');
        if (skeleton) {
            skeleton.innerHTML = `
                <div class="developer-message">
                    <div class="dev-icon">üîß</div>
                    <h3>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</h3>
                    <p>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.<br>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram.</p>
                    <button onclick="window.location.reload()" class="dev-reload-btn">
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
            const style = document.createElement('style');
            style.textContent = `
                .developer-message {
                    text-align: center;
                    padding: 40px;
                    background: rgba(26, 26, 26, 0.9);
                    border: 2px solid #DC143C;
                    border-radius: 16px;
                    color: #F5F5DC;
                }

                .dev-icon {
                    font-size: 3rem;
                    margin-bottom: 20px;
                }

                .developer-message h3 {
                    color: #DC143C;
                    margin-bottom: 15px;
                    font-size: 1.3rem;
                }

                .developer-message p {
                    opacity: 0.8;
                    line-height: 1.5;
                    margin-bottom: 25px;
                }

                .dev-reload-btn {
                    background: #DC143C;
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-weight: 600;
                    transition: all 0.3s ease;
                }

                .dev-reload-btn:hover {
                    background: #B91C3C;
                    transform: translateY(-2px);
                }
            `;
            document.head.appendChild(style);
        }
    }

    initLeaderboardTabs() {
        const tabs = document.querySelectorAll('.leaderboard-tab');
        if (!tabs.length) return;

        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –ª–∏–¥–µ—Ä–±–æ–∞—Ä–¥–∞');

        tabs.forEach(tab => {
            tab.addEventListener('click', async () => {
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
                tabs.forEach(t => t.classList.remove('active'));

                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–∞–∂–∞—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ
                tab.classList.add('active');

                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ data-period
                const period = tab.dataset.period;
                console.log(`üìä –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                await this.loadLeaderboardData(period);

                // Haptic feedback
                this.provideCriminalFeedback('leaderboard');
            });
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É "–¥–µ–Ω—å" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const dayTab = document.querySelector('.leaderboard-tab[data-period="day"]');
        if (dayTab) {
            dayTab.classList.add('active');
        }
    }

    async authenticate() {
        try {
            console.log('üîê === –ù–ê–ß–ê–õ–û –î–ï–¢–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===');
            console.log('üîç Platform:', tg?.platform || 'UNKNOWN');
            console.log('üîç Version:', tg?.version || 'UNKNOWN');
            console.log('üîç User-Agent:', navigator.userAgent);
            console.log('üîç Is Mobile:', /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));
            console.log('üîç Screen:', `${screen.width}x${screen.height}`);

            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram WebApp —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (tg) {
                console.log('üîç Telegram WebApp State:');
                console.log('  - initData length:', tg.initData?.length || 0);
                console.log('  - initData sample:', tg.initData?.substring(0, 100) + '...' || 'EMPTY');
                console.log('  - initDataUnsafe:', JSON.stringify(tg.initDataUnsafe, null, 2));
                console.log('  - isExpanded:', tg.isExpanded);
                console.log('  - viewportHeight:', tg.viewportHeight);
                console.log('  - colorScheme:', tg.colorScheme);
            } else {
                console.error('‚ùå Telegram WebApp –æ–±—ä–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!');
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            let token = new URLSearchParams(window.location.search).get('token') ||
                localStorage.getItem('token') ||
                localStorage.getItem('auth_token');

            console.log('üîç –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞:', token ? `–ù–ê–ô–î–ï–ù (${token.substring(0, 20)}...)` : '–ù–ï–¢');

            // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏ –µ—Å—Ç—å Telegram WebApp, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
            if (!token && tg?.initData) {
                console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram WebApp...');
                console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:');
                console.log('  - initData –¥–ª–∏–Ω–∞:', tg.initData.length);
                console.log('  - initData –Ω–∞—á–∞–ª–æ:', tg.initData.substring(0, 200));

                const authPayload = { initData: tg.initData };
                console.log('üîç Auth payload:', JSON.stringify(authPayload, null, 2));

                const response = await fetch('/api/auth/init', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'User-Agent': navigator.userAgent
                    },
                    body: JSON.stringify(authPayload)
                });

                console.log('üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
                console.log('  - Status:', response.status);
                console.log('  - Status Text:', response.statusText);
                console.log('  - Headers:', [...response.headers.entries()]);

                if (response.ok) {
                    const data = await response.json();
                    console.log('  - Response Data:', JSON.stringify(data, null, 2));

                    if (data.status === 'success' && data.data?.token) {
                        token = data.data.token;
                        localStorage.setItem('token', token);
                        console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Telegram');
                    } else {
                        console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω:', data);
                    }
                } else {
                    const errorText = await response.text();
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
                    console.error('  - Status:', response.status);
                    console.error('  - Error:', errorText);

                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    try {
                        const errorData = JSON.parse(errorText);
                        console.error('  - Parsed Error:', JSON.stringify(errorData, null, 2));
                    } catch (e) {
                        console.error('  - Raw Error Text:', errorText);
                    }
                }
            } else if (!tg?.initData) {
                console.error('‚ùå initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Telegram WebApp!');
                console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram:');
                console.log('  - tg –æ–±—ä–µ–∫—Ç:', !!tg);
                console.log('  - tg.initData:', tg?.initData || 'UNDEFINED');
                console.log('  - tg.initDataUnsafe:', tg?.initDataUnsafe || 'UNDEFINED');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            if (token) {
                console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞...');
                const response = await fetch('/api/auth/verify', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'User-Agent': navigator.userAgent
                    }
                });

                console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:');
                console.log('  - Status:', response.status);
                console.log('  - Status Text:', response.statusText);

                if (response.ok) {
                    this.token = token;
                    console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
                    return true;
                } else {
                    const errorText = await response.text();
                    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', errorText);
                    localStorage.removeItem('token');
                    localStorage.removeItem('auth_token');
                }
            }

            console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
            return false;

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            console.error('‚ùå Stack trace:', error.stack);
            return false;
        }
    }

    async loadUserProfile() {
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω:', this.token ? `${this.token.substring(0, 20)}...` : '–û–¢–°–£–¢–°–¢–í–£–ï–¢');

            ProfileState.isLoading = true;

            const response = await fetch('/api/profile', {
                headers: {
                    'Authorization': `Bearer ${this.token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è:');
            console.log('  - Status:', response.status);
            console.log('  - Status Text:', response.statusText);
            console.log('  - Headers:', [...response.headers.entries()]);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:');
                console.error('  - Status:', response.status);
                console.error('  - Error Text:', errorText);

                if (response.status === 404) {
                    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                } else if (response.status === 401) {
                    throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                } else {
                    throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
                }
            }

            const userData = await response.json();
            console.log('‚úÖ –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—É—á–µ–Ω—ã:');
            console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ userData:', JSON.stringify(userData, null, 2));

            // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
            console.log('  - –¢–∏–ø userData:', typeof userData);
            console.log('  - –ö–ª—é—á–∏ userData:', Object.keys(userData));

            if (userData.data) {
                console.log('  - –ï—Å—Ç—å userData.data:', typeof userData.data);
                console.log('  - –ö–ª—é—á–∏ userData.data:', Object.keys(userData.data));
            }

            if (userData.user) {
                console.log('  - –ï—Å—Ç—å userData.user:', typeof userData.user);
                console.log('  - –ö–ª—é—á–∏ userData.user:', Object.keys(userData.user));
            }

            // –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            let actualUserData = null;

            if (userData.data && typeof userData.data === 'object') {
                actualUserData = userData.data;
                console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º userData.data');
            } else if (userData.user && typeof userData.user === 'object') {
                actualUserData = userData.user;
                console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º userData.user');
            } else if (userData.firstName || userData.username || userData.telegramId) {
                actualUserData = userData;
                console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º userData –Ω–∞–ø—Ä—è–º—É—é');
            } else {
                console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞!');
                actualUserData = userData; // –ø–æ–ø—Ä–æ–±—É–µ–º anyway
            }

            console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', actualUserData);

            ProfileState.user = actualUserData;
            this.updateProfileUI(actualUserData);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            console.error('‚ùå Stack trace:', error.stack);
            this.showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: ${error.message}`);
        } finally {
            ProfileState.isLoading = false;
        }
    }

    updateProfileUI(userData) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–æ—Ñ–∏–ª—è...', userData);

        const stats = userData.stats || {};

        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ XP
        const level = this.calculateLevel(stats.totalScore || 0);
        this.updateElement('user-level', level);

        const { current, max } = this.calculateXP(stats.totalScore || 0, level);
        this.updateElement('current-xp', current.toLocaleString());
        this.updateElement('max-xp', max.toLocaleString());

        const xpPercentage = max > 0 ? (current / max) * 100 : 0;
        this.animateXPBar(xpPercentage);

        // üéñÔ∏è –û–ë–ù–û–í–õ–Ø–ï–ú –†–ê–ù–ì –° –ù–û–í–û–ô –°–ò–°–¢–ï–ú–û–ô
        this.updateRankDisplay(level);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateElement('stat-investigations', stats.investigations || 0);
        this.updateElement('stat-solved', stats.solvedCases || 0);
        this.updateElement('stat-streak', stats.winStreak || 0);
        this.updateElement('stat-accuracy', stats.accuracy || 0);

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ú–ï–ù–ò –ò ID –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        console.log('üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            firstName: userData.firstName,
            username: userData.username,
            telegramId: userData.telegramId
        });

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let displayName = '';
        if (userData.firstName && userData.firstName.trim()) {
            displayName = userData.firstName.trim();
        } else if (userData.username && userData.username.trim()) {
            displayName = userData.username.trim();
        } else {
            displayName = '–î–µ—Ç–µ–∫—Ç–∏–≤';
        }

        console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', displayName);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.updateElement('detective-name', displayName.toUpperCase());
        const nameElement = document.getElementById('detective-name');
        if (nameElement) {
            nameElement.setAttribute('data-text', displayName.toUpperCase());
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userData.telegramId) {
            this.updateElement('user-id', userData.telegramId);
        } else {
            this.updateElement('user-id', '‚Äî');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å telegramId
        if (userData.telegramId) {
            this.loadUserAvatar(userData.telegramId);
        }

        console.log('‚úÖ UI –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...');

        // üéñÔ∏è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ì–ï–ù–ï–†–ò–†–£–ï–ú –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ù–ê –û–°–ù–û–í–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
        if (stats && (stats.investigations > 0 || stats.totalScore > 0)) {
            console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
            const generatedAchievements = this.generateBasicAchievements(stats);
            if (generatedAchievements.length > 0) {
                console.log('üéØ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', generatedAchievements);
                ProfileState.achievements = generatedAchievements;
                this.renderAchievements(generatedAchievements);
            }
        }
    }

    calculateLevel(totalScore) {
        const levels = ProfileConfig.levels.maxXP;
        for (let i = 0; i < levels.length; i++) {
            if (totalScore < levels[i]) return i + 1;
        }
        return levels.length;
    }

    calculateXP(totalScore, level) {
        const levels = ProfileConfig.levels.maxXP;
        const prevLevelXP = level > 1 ? levels[level - 2] : 0;
        const currentLevelXP = levels[level - 1] || levels[levels.length - 1];

        const current = totalScore - prevLevelXP;
        const max = currentLevelXP - prevLevelXP;
        const percentage = Math.min((current / max) * 100, 100);

        return { current, max, percentage };
    }

    animateXPBar(percentage) {
        const xpBar = document.getElementById('xp-bar');
        if (xpBar) {
            // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
            xpBar.style.width = '0%';

            // –ê–Ω–∏–º–∏—Ä—É–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            setTimeout(() => {
                xpBar.style.width = `${percentage}%`;
            }, 500);
        }
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫—Ä—É–≥–ª–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async loadUserAvatar(telegramId) {
        const avatarContainer = document.getElementById('user-avatar');
        const avatarPlaceholder = document.getElementById('avatar-placeholder');

        if (!telegramId || !avatarContainer) return;

        try {
            console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            const response = await fetch('/api/user/avatar', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            if (response.ok) {
                const data = await response.json();

                if (data.status === 'success' && data.data.hasAvatar) {
                    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                    const existingImg = avatarContainer.querySelector('img');
                    if (existingImg) {
                        existingImg.remove();
                    }

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π img —ç–ª–µ–º–µ–Ω—Ç
                    const img = document.createElement('img');
                    img.alt = '–ê–≤–∞—Ç–∞—Ä –¥–µ—Ç–µ–∫—Ç–∏–≤–∞';
                    img.style.cssText = `
                        position: absolute;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        object-fit: cover;
                        object-position: center;
                        border-radius: 50%;
                        z-index: 2;
                        opacity: 0;
                        transition: opacity 0.5s ease;
                    `;

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    img.onload = () => {
                        console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
                        if (avatarPlaceholder) {
                            avatarPlaceholder.style.opacity = '0';
                        }

                        // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
                        setTimeout(() => {
                            img.style.opacity = '1';
                        }, 100);
                    };

                    img.onerror = () => {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞');
                        img.remove();
                        if (avatarPlaceholder) {
                            avatarPlaceholder.style.opacity = '1';
                        }
                    };

                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    avatarContainer.appendChild(img);

                    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                    img.src = data.data.avatarUrl;

                } else {
                    console.log('‚ÑπÔ∏è –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É');
                    if (avatarPlaceholder) {
                        avatarPlaceholder.style.opacity = '1';
                    }
                }
            } else {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∞');
                if (avatarPlaceholder) {
                    avatarPlaceholder.style.opacity = '1';
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞:', error);
            if (avatarPlaceholder) {
                avatarPlaceholder.style.opacity = '1';
            }
        }
    }

    async loadUserAchievements() {
        try {
            console.log('üèÜ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

            let userAchievements = [];

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const response = await fetch('/api/profile/achievements/available', {
                    headers: { 'Authorization': `Bearer ${this.token}` }
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log('üìä –û—Ç–≤–µ—Ç API –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', data);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞ API
                    if (data.unlocked && Array.isArray(data.unlocked)) {
                        userAchievements = data.unlocked;
                    } else if (data.achievements && Array.isArray(data.achievements)) {
                        userAchievements = data.achievements;
                    } else if (data.data && data.data.unlocked && Array.isArray(data.data.unlocked)) {
                        userAchievements = data.data.unlocked;
                    } else if (data.data && data.data.achievements && Array.isArray(data.data.achievements)) {
                        userAchievements = data.data.achievements;
                    } else if (Array.isArray(data)) {
                        userAchievements = data;
                    }

                    console.log('‚úÖ –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ API:', userAchievements);
                } else {
                    console.log(`‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status}), –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`);
                }
            } catch (apiError) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ API –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', apiError.message);
            }

            // –ï—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if (userAchievements.length === 0) {
                console.log('üîß API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (ProfileState.user?.achievements && Array.isArray(ProfileState.user.achievements)) {
                    userAchievements = ProfileState.user.achievements;
                    console.log('üìã –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userAchievements);
                }

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if (userAchievements.length === 0 && ProfileState.user?.stats) {
                    userAchievements = this.generateBasicAchievements(ProfileState.user.stats);
                    console.log('üéñÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', userAchievements);
                }
            }

            ProfileState.achievements = userAchievements;
            this.renderAchievements(userAchievements);

            return userAchievements;

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);

            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if (ProfileState.user?.stats) {
                const basicAchievements = this.generateBasicAchievements(ProfileState.user.stats);
                console.log('üõ†Ô∏è Fallback –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', basicAchievements);
                this.renderAchievements(basicAchievements);
                return basicAchievements;
            } else {
                console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
                this.renderAchievements([]);
                return [];
            }
        }
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    generateBasicAchievements(stats) {
        const achievements = [];

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', stats);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const investigations = stats.investigations || stats.totalGames || 0;
        const accuracy = stats.accuracy || 0;
        const winStreak = stats.winStreak || stats.currentStreak || 0;
        const totalScore = stats.totalScore || 0;
        const solvedCases = stats.solvedCases || stats.correctAnswers || 0;

        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ–ª
        if (investigations >= 1) {
            achievements.push({ id: 'first_blood', unlockedAt: new Date() });
        }
        if (investigations >= 10) {
            achievements.push({ id: 'rookie_investigator', unlockedAt: new Date() });
        }
        if (investigations >= 50) {
            achievements.push({ id: 'case_closer', unlockedAt: new Date() });
        }
        if (investigations >= 100) {
            achievements.push({ id: 'crime_solver', unlockedAt: new Date() });
        }
        if (investigations >= 250) {
            achievements.push({ id: 'detective_veteran', unlockedAt: new Date() });
        }

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if (investigations >= 50 && accuracy >= 70) {
            achievements.push({ id: 'sharp_shooter', unlockedAt: new Date() });
        }
        if (investigations >= 100 && accuracy >= 80) {
            achievements.push({ id: 'eagle_eye', unlockedAt: new Date() });
        }
        if (investigations >= 200 && accuracy >= 90) {
            achievements.push({ id: 'master_detective', unlockedAt: new Date() });
        }

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å–µ—Ä–∏—è–º
        if (winStreak >= 10) {
            achievements.push({ id: 'hot_streak', unlockedAt: new Date() });
        }
        if (winStreak >= 25) {
            achievements.push({ id: 'unstoppable', unlockedAt: new Date() });
        }

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É
        if (totalScore >= 100000) {
            achievements.push({ id: 'score_hunter', unlockedAt: new Date() });
        }
        if (totalScore >= 1000000) {
            achievements.push({ id: 'point_legend', unlockedAt: new Date() });
        }

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if (solvedCases >= 500) {
            achievements.push({ id: 'crime_fighter', unlockedAt: new Date() });
        }
        if (solvedCases >= 1000) {
            achievements.push({ id: 'elite_investigator', unlockedAt: new Date() });
        }

        console.log('üéñÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', achievements);
        return achievements;
    }

    renderAchievements(userAchievements = []) {
        const container = document.getElementById('achievements-container');
        if (!container) return;

        console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ:', userAchievements);
        console.log('üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', ProfileConfig.achievements.length);

        // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const unlockedAchievementsMap = new Map();

        userAchievements.forEach(achievement => {
            if (typeof achievement === 'string') {
                // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ (ID)
                unlockedAchievementsMap.set(achievement, true);
            } else if (achievement && achievement.id) {
                // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç —Å ID
                unlockedAchievementsMap.set(achievement.id, achievement);
            }
        });

        console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', unlockedAchievementsMap);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        const achievements = ProfileConfig.achievements.map(achievement => {
            const isUnlocked = unlockedAchievementsMap.has(achievement.id);
            const unlockedData = unlockedAchievementsMap.get(achievement.id);

            console.log(`üîç –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${achievement.id}: ${isUnlocked ? '–û–¢–ö–†–´–¢–û' : '–ó–ê–ö–†–´–¢–û'}`);

            return {
                ...achievement,
                unlocked: isUnlocked,
                unlockedAt: unlockedData && typeof unlockedData === 'object' ? unlockedData.unlockedAt : null
            };
        });

        console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞:', achievements);

        // –†–µ–Ω–¥–µ—Ä–∏–º HTML
        container.innerHTML = achievements.map(achievement => `
            <div class="achievement-item ${achievement.unlocked ? '' : 'locked'}" 
                 data-achievement-id="${achievement.id}"
                 title="${achievement.unlocked ? '–ü–æ–ª—É—á–µ–Ω–æ' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}: ${achievement.description}">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-name">${achievement.name}</div>
                ${achievement.unlocked ? '<div class="achievement-checkmark">‚úì</div>' : ''}
            </div>
        `).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        const unlockedCount = achievements.filter(a => a.unlocked).length;
        const countElement = document.getElementById('achievements-count');
        if (countElement) {
            countElement.textContent = unlockedCount;
        }

        console.log(`üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${unlockedCount} –∏–∑ ${achievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        this.addAchievementInteractivity();
    }

    addAchievementInteractivity() {
        document.querySelectorAll('.achievement-item').forEach((item, index) => {
            item.addEventListener('click', () => {
                this.provideCriminalFeedback('achievement');

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                const achievementId = item.dataset.achievementId || `achievement_${index}`;
                const isLocked = item.classList.contains('locked');

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                this.showAchievementModal(achievementId, !isLocked);

                if (!isLocked) {
                    this.createHologramExplosion(item);
                    this.createAdvancedParticles(item, 'crime');
                }
            });

            item.addEventListener('mouseenter', () => {
                this.createAdvancedCrimeScene();
                item.classList.add('evidence-highlight');
            });

            item.addEventListener('mouseleave', () => {
                item.classList.remove('evidence-highlight');
            });

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
            item.style.animationDelay = `${index * 0.1}s`;
        });
    }

    showAchievementModal(achievementId, isUnlocked) {
        const modal = document.getElementById('achievement-modal');
        const modalIcon = document.getElementById('modal-icon');
        const modalTitle = document.getElementById('modal-title');
        const modalDescription = document.getElementById('modal-description');
        const modalStatus = document.getElementById('modal-status');
        const modalProgress = document.getElementById('modal-progress');
        const modalRequirement = document.getElementById('modal-requirement');
        const modalReward = document.getElementById('modal-reward');

        // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const achievement = ProfileConfig.achievements.find(a => a.id === achievementId) || {
            id: achievementId,
            name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
            icon: '‚ùì',
            description: '–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.'
        };

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        modalIcon.textContent = achievement.icon;
        modalTitle.textContent = achievement.name;
        modalDescription.textContent = achievement.description;

        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
        const requirementInfo = this.getAchievementRequirement(achievementId);
        const progressInfo = this.getAchievementProgress(achievementId);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        const requirementText = document.getElementById('requirement-text');
        requirementText.textContent = requirementInfo.text;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if (isUnlocked) {
            modalStatus.textContent = '–ü–û–õ–£–ß–ï–ù–û';
            modalStatus.className = 'achievement-modal-status unlocked';
            modalProgress.style.display = 'none';
            modalReward.style.display = 'block';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
            const rewardText = document.getElementById('reward-text');
            rewardText.textContent = requirementInfo.reward || '+100 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞';
        } else {
            modalStatus.textContent = '–ù–ï –ü–û–õ–£–ß–ï–ù–û';
            modalStatus.className = 'achievement-modal-status locked';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if (progressInfo.current !== undefined && progressInfo.target > 0) {
                modalProgress.style.display = 'block';

                const progressCurrent = document.getElementById('progress-current');
                const progressTarget = document.getElementById('progress-target');
                const progressBar = document.getElementById('progress-bar');
                const progressPercentage = document.getElementById('progress-percentage');

                progressCurrent.textContent = progressInfo.current;
                progressTarget.textContent = progressInfo.target;

                const percentage = Math.min((progressInfo.current / progressInfo.target) * 100, 100);
                progressBar.style.width = `${percentage}%`;
                progressPercentage.textContent = `${Math.round(percentage)}%`;
            } else {
                modalProgress.style.display = 'none';
            }

            modalReward.style.display = 'none';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.classList.add('show');

        // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        if (isUnlocked) {
            this.createCelebrationEffect();
        }

        // Haptic feedback
        this.provideCriminalFeedback('achievement');
    }

    getAchievementRequirement(achievementId) {
        const requirements = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            'first_blood': {
                text: '–†–µ—à–∏–ª–∏ –ø–µ—Ä–≤–æ–µ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ–ª–æ',
                reward: '+50 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'rookie_investigator': {
                text: '–†–µ—à–∏–ª–∏ 10 –¥–µ–ª',
                reward: '+100 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'case_closer': {
                text: '–†–µ—à–∏–ª–∏ 50 –¥–µ–ª',
                reward: '+200 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'crime_solver': {
                text: '–†–µ—à–∏–ª–∏ 100 –¥–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ',
                reward: '+500 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'detective_veteran': {
                text: '–†–µ—à–∏–ª–∏ 250 –¥–µ–ª',
                reward: '+1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },

            // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            'sharp_shooter': {
                text: '–¢–æ—á–Ω–æ—Å—Ç—å 70% –≤ 50+ –¥–µ–ª–∞—Ö',
                reward: '+200 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'eagle_eye': {
                text: '–¢–æ—á–Ω–æ—Å—Ç—å 80% –≤ 100+ –¥–µ–ª–∞—Ö',
                reward: '+300 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'master_detective': {
                text: '–¢–æ—á–Ω–æ—Å—Ç—å 90% –≤ 200+ –¥–µ–ª–∞—Ö',
                reward: '+400 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'sherlock': {
                text: '–¢–æ—á–Ω–æ—Å—Ç—å 95% –≤ 300+ –¥–µ–ª–∞—Ö',
                reward: '+500 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'perfectionist': {
                text: '10 —Å–µ—Å—Å–∏–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –æ—à–∏–±–æ–∫',
                reward: '+1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            'quick_draw': {
                text: '50 –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ 15 —Å–µ–∫—É–Ω–¥',
                reward: '+100 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'speed_demon': {
                text: '100 –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ 10 —Å–µ–∫—É–Ω–¥',
                reward: '+200 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'lightning_fast': {
                text: '–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å < 20 —Å–µ–∫—É–Ω–¥ (500 –¥–µ–ª)',
                reward: '+300 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'time_lord': {
                text: '–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å < 15 —Å–µ–∫—É–Ω–¥ (1000 –¥–µ–ª)',
                reward: '+400 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },

            // –°–µ—Ä–∏–π–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            'hot_streak': {
                text: '–ì–æ—Ä—è—á–∞—è —Å–µ—Ä–∏—è',
                reward: '+100 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'unstoppable': {
                text: '–ù–µ—É–¥–µ—Ä–∂–∏–º—ã–π',
                reward: '+200 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'legend_streak': {
                text: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ä–∏—è',
                reward: '+500 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'untouchable': {
                text: '100 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥',
                reward: '+1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'daily_detective': {
                text: '–ò–≥—Ä–∞–ª 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
                reward: '+800 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },

            // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            'crime_fighter': {
                text: '500 –¥–µ–ª —Ä–µ—à–µ–Ω–æ',
                reward: '+500 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'elite_investigator': {
                text: '1000 –¥–µ–ª —Ä–µ—à–µ–Ω–æ',
                reward: '+1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'legendary_detective': {
                text: '2500 –¥–µ–ª —Ä–µ—à–µ–Ω–æ',
                reward: '+2000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'grand_master': {
                text: '5000 –¥–µ–ª —Ä–µ—à–µ–Ω–æ',
                reward: '+3000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'crime_lord': {
                text: '10000 –¥–µ–ª —Ä–µ—à–µ–Ω–æ',
                reward: '+4000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },

            // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            'last_second_master': {
                text: '100 –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥',
                reward: '+100 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'pressure_cooker': {
                text: '50 –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã',
                reward: '+200 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'clutch_king': {
                text: '25 –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É',
                reward: '+300 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'ice_cold': {
                text: '200 –æ—Ç–≤–µ—Ç–æ–≤ —Å 25-35 —Å–µ–∫—É–Ω–¥–∞–º–∏',
                reward: '+400 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },

            // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–∏–ª—Å—Ç–æ—É–Ω—ã
            'century_club': {
                text: '100 —Å–µ—Å—Å–∏–π —Å—ã–≥—Ä–∞–Ω–æ',
                reward: '+1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'thousand_cases': {
                text: '1000 —Å–µ—Å—Å–∏–π —Å—ã–≥—Ä–∞–Ω–æ',
                reward: '+2000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'score_hunter': {
                text: '100,000 –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–æ',
                reward: '+5000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'point_legend': {
                text: '1,000,000 –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–æ',
                reward: '+10000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'score_god': {
                text: '10,000,000 –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–æ',
                reward: '+20000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
            'night_hunter': {
                text: '500 –¥–µ–ª —Ä–µ—à–µ–Ω–æ –Ω–æ—á—å—é (00:00-06:00)',
                reward: '+500 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'weekend_warrior': {
                text: '1000 –¥–µ–ª —Ä–µ—à–µ–Ω–æ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ',
                reward: '+1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'workday_grind': {
                text: '1000 –¥–µ–ª —Ä–µ—à–µ–Ω–æ –≤ –±—É–¥–Ω–∏',
                reward: '+1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'marathon_runner': {
                text: '100 –¥–µ–ª –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å',
                reward: '+1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'endurance_master': {
                text: '500 –¥–µ–ª –∑–∞ –Ω–µ–¥–µ–ª—é',
                reward: '+2000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'perfect_hundred': {
                text: '–ò–¥–µ–∞–ª—å–Ω–∞—è —Å–æ—Ç–Ω—è',
                reward: '+1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'speed_legend': {
                text: '–õ–µ–≥–µ–Ω–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏',
                reward: '+1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'consistency_king': {
                text: '365 –¥–Ω–µ–π –∏–≥—Ä—ã –ø–æ–¥—Ä—è–¥',
                reward: '+1000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            },
            'ultimate_detective': {
                text: '–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã',
                reward: '+10000 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
            }
        };

        return requirements[achievementId] || {
            text: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫',
            reward: '+100 –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞'
        };
    }

    getAchievementProgress(achievementId) {
        if (!ProfileState.user?.stats) {
            return { current: 0, target: 1 };
        }

        const stats = ProfileState.user.stats;
        const progressMap = {
            'first_blood': {
                current: Math.min(stats.investigations || 0, 1),
                target: 1
            },
            'rookie_investigator': {
                current: Math.min(stats.investigations || 0, 10),
                target: 10
            },
            'case_closer': {
                current: Math.min(stats.investigations || 0, 50),
                target: 50
            },
            'crime_solver': {
                current: Math.min(stats.investigations || 0, 100),
                target: 100
            },
            'detective_veteran': {
                current: Math.min(stats.investigations || 0, 250),
                target: 250
            },
            'sharp_shooter': {
                current: (stats.investigations >= 50 && stats.accuracy >= 70) ? 1 : 0,
                target: 1
            },
            'eagle_eye': {
                current: (stats.investigations >= 100 && stats.accuracy >= 80) ? 1 : 0,
                target: 1
            },
            'master_detective': {
                current: (stats.investigations >= 200 && stats.accuracy >= 90) ? 1 : 0,
                target: 1
            },
            'sherlock': {
                current: (stats.investigations >= 300 && stats.accuracy >= 95) ? 1 : 0,
                target: 1
            },
            'perfectionist': {
                current: Math.min(stats.perfectGames || 0, 10),
                target: 10
            },
            'quick_draw': {
                current: (stats.averageTime && stats.averageTime <= 15000) ? 1 : 0,
                target: 1
            },
            'speed_demon': {
                current: (stats.averageTime && stats.averageTime <= 10000) ? 1 : 0,
                target: 1
            },
            'lightning_fast': {
                current: (stats.averageTime && stats.averageTime <= 20000) ? 1 : 0,
                target: 1
            },
            'time_lord': {
                current: (stats.averageTime && stats.averageTime <= 15000) ? 1 : 0,
                target: 1
            },
            'hot_streak': {
                current: Math.min(stats.winStreak || 0, 10),
                target: 10
            },
            'unstoppable': {
                current: Math.min(stats.winStreak || 0, 25),
                target: 25
            },
            'legend_streak': {
                current: Math.min(stats.winStreak || 0, 50),
                target: 50
            },
            'untouchable': {
                current: Math.min(stats.winStreak || 0, 100),
                target: 100
            },
            'daily_detective': {
                current: Math.min(stats.currentStreak || 0, 30),
                target: 30
            },
            'crime_fighter': {
                current: Math.min(stats.solvedCases || 0, 500),
                target: 500
            },
            'elite_investigator': {
                current: Math.min(stats.solvedCases || 0, 1000),
                target: 1000
            },
            'legendary_detective': {
                current: Math.min(stats.solvedCases || 0, 2500),
                target: 2500
            },
            'grand_master': {
                current: Math.min(stats.totalScore || 0, 500000),
                target: 500000
            },
            'crime_lord': {
                current: Math.min(stats.totalScore || 0, 1000000),
                target: 1000000
            },
            'last_second_master': {
                current: (stats.averageTime && stats.averageTime <= 5000) ? 1 : 0,
                target: 1
            },
            'pressure_cooker': {
                current: (stats.averageTime && stats.averageTime <= 3000) ? 1 : 0,
                target: 1
            },
            'clutch_king': {
                current: (stats.averageTime && stats.averageTime <= 1500) ? 1 : 0,
                target: 1
            },
            'ice_cold': {
                current: (stats.averageTime && stats.averageTime <= 20000) ? 1 : 0,
                target: 1
            },
            'century_club': {
                current: Math.min(stats.totalGames || 0, 100),
                target: 100
            },
            'thousand_cases': {
                current: Math.min(stats.totalGames || 0, 1000),
                target: 1000
            },
            'score_hunter': {
                current: Math.min(stats.totalScore || 0, 100000),
                target: 100000
            },
            'point_legend': {
                current: Math.min(stats.totalScore || 0, 1000000),
                target: 1000000
            },
            'score_god': {
                current: Math.min(stats.totalScore || 0, 10000000),
                target: 10000000
            },
            'night_hunter': {
                current: (stats.currentStreak && stats.currentStreak === 500) ? 1 : 0,
                target: 1
            },
            'weekend_warrior': {
                current: (stats.currentStreak && stats.currentStreak === 1000) ? 1 : 0,
                target: 1
            },
            'workday_grind': {
                current: (stats.currentStreak && stats.currentStreak === 1000) ? 1 : 0,
                target: 1
            },
            'marathon_runner': {
                current: (stats.currentStreak && stats.currentStreak === 100) ? 1 : 0,
                target: 1
            },
            'endurance_master': {
                current: (stats.currentStreak && stats.currentStreak === 500) ? 1 : 0,
                target: 1
            },
            'perfect_hundred': {
                current: (stats.perfectGames && stats.perfectGames === 100) ? 1 : 0,
                target: 1
            },
            'speed_legend': {
                current: (stats.totalGames && stats.totalGames >= 1000) ? 1 : 0,
                target: 1
            },
            'consistency_king': {
                current: (stats.currentStreak && stats.currentStreak === 365) ? 1 : 0,
                target: 1
            },
            'ultimate_detective': {
                current: (stats.totalScore && stats.totalScore >= 10000000) ? 1 : 0,
                target: 1
            }
        };

        return progressMap[achievementId] || { current: 0, target: 1 };
    }

    hideAchievementModal() {
        const modal = document.getElementById('achievement-modal');
        modal.classList.remove('show');
    }

    createCelebrationEffect() {
        // –°–æ–∑–¥–∞–µ–º –∑–æ–ª–æ—Ç—ã–µ —á–∞—Å—Ç–∏—Ü—ã
        for (let i = 0; i < 15; i++) {
            const particle = document.createElement('div');
            particle.style.cssText = `
                    position: fixed;
                width: ${4 + Math.random() * 6}px;
                height: ${4 + Math.random() * 6}px;
                background: ${['#FFD700', '#FFA500', '#FF6347'][Math.floor(Math.random() * 3)]};
                border-radius: 50%;
                pointer-events: none;
                    z-index: 1001;
                left: 50%;
                top: 50%;
                box-shadow: 0 0 15px currentColor;
            `;

            document.body.appendChild(particle);

            const angle = (Math.PI * 2 * i) / 15;
            const velocity = 80 + Math.random() * 40;
            let opacity = 1;
            let scale = 1;

            function animate() {
                const x = Math.cos(angle) * velocity * (1 - opacity);
                const y = Math.sin(angle) * velocity * (1 - opacity) - 50;

                particle.style.transform = `translate(${x}px, ${y}px) scale(${scale})`;
                particle.style.opacity = opacity;

                opacity -= 0.02;
                scale += 0.03;

                if (opacity > 0) {
                    requestAnimationFrame(animate);
                } else {
                    document.body.removeChild(particle);
                }
            }

            setTimeout(() => requestAnimationFrame(animate), i * 50);
        }
    }

    initAchievementModal() {
        const modal = document.getElementById('achievement-modal');
        const closeBtn = document.getElementById('modal-close');

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
        closeBtn.addEventListener('click', () => {
            this.hideAchievementModal();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.hideAchievementModal();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modal.classList.contains('show')) {
                this.hideAchievementModal();
            }
        });
    }

    async loadLeaderboardData(period) {
        try {
            console.log(`üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ–∞—Ä–¥ –∑–∞ ${period}...`);
            this.showLeaderboardSkeleton();

            const response = await fetch(`/api/profile/leaderboard/${period}`, {
                headers: { 'Authorization': `Bearer ${this.token}` }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${await response.text()}`);
            }

            const result = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ–∞—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã:', result);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const data = this.transformLeaderboardData(result, period);

            ProfileState.leaderboard.data[period] = data;
            ProfileState.leaderboard.current = period;

            this.renderLeaderboard(data);
            this.updateUserPosition(data);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ–∞—Ä–¥–∞:', error);
            this.showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥: ${error.message}`);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –ª–∏–¥–µ—Ä–±–æ–∞—Ä–¥ –≤–º–µ—Å—Ç–æ mock –¥–∞–Ω–Ω—ã—Ö
            this.renderEmptyLeaderboard();
        }
    }

    transformLeaderboardData(apiData, period) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API
            const leaderboardData = apiData.totalScore || apiData.data?.leaderboard || [];
            const currentUserId = ProfileState.user?.basic?.telegramId || ProfileState.user?.telegramId;

            console.log('üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ–∞—Ä–¥–∞:', { leaderboardData, currentUserId });

            const transformedLeaderboard = leaderboardData.map((user, index) => ({
                rank: index + 1,
                name: this.getUserDisplayName(user),
                score: user.stats?.totalScore || user.score || 0,
                isCurrentUser: user.telegramId === currentUserId
            }));

            // –ù–∞–π–¥–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentUserEntry = transformedLeaderboard.find(entry => entry.isCurrentUser);

            const currentUser = currentUserEntry || {
                rank: '‚Äî',
                score: ProfileState.user?.stats?.totalScore || 0
            };

            return {
                leaderboard: transformedLeaderboard,
                currentUser: currentUser,
                meta: {
                    period: period,
                    total: Math.max(transformedLeaderboard.length, transformedLeaderboard.length)
                }
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ–∞—Ä–¥–∞:', error);
            return {
                leaderboard: [],
                currentUser: { rank: '‚Äî', score: 0 },
                meta: { period: period, total: 0 }
            };
        }
    }

    getUserDisplayName(user) {
        if (user.firstName) {
            return user.firstName + (user.lastName ? ` ${user.lastName}` : '');
        }
        if (user.username) {
            return user.username;
        }
        if (user.nickname) {
            return user.nickname;
        }
        return '–î–µ—Ç–µ–∫—Ç–∏–≤';
    }

    renderLeaderboard(data) {
        const container = document.getElementById('leaderboard-container');
        if (!container || !data.leaderboard) return;

        const leaderboardHTML = data.leaderboard.map(player => `
            <div class="leaderboard-item ${player.isCurrentUser ? 'current-user' : ''}">
                <div class="player-rank ${player.rank <= 3 ? 'top3' : ''}">${player.rank}</div>
                <div class="player-info">
                    <div class="player-name">${player.name}${player.isCurrentUser ? ' (–í—ã)' : ''}</div>
                    <div class="player-score">${player.score.toLocaleString()} –æ—á–∫–æ–≤</div>
                </div>
            </div>
        `).join('');

        container.innerHTML = leaderboardHTML;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        this.addLeaderboardInteractivity();
    }

    updateUserPosition(data) {
        if (data.currentUser) {
            this.updateElement('user-position', data.currentUser.rank);
        }
        if (data.meta?.total) {
            this.updateElement('total-players', data.meta.total.toLocaleString());
        }
    }

    addLeaderboardInteractivity() {
        document.querySelectorAll('.leaderboard-item').forEach(item => {
            item.addEventListener('click', () => {
                this.provideCriminalFeedback('leaderboard');
                this.createScanningEffect(item);
                this.createAdvancedParticles(item, 'blood');
            });

            item.addEventListener('mouseenter', () => {
                if (Math.random() < 0.3) {
                    item.classList.add('blood-drip');
                }
            });

            item.addEventListener('mouseleave', () => {
                item.classList.remove('blood-drip');
            });
        });
    }

    showLeaderboardSkeleton() {
        const container = document.getElementById('leaderboard-container');
        if (!container) return;

        container.innerHTML = `
            <div class="loading-skeleton" style="height: 60px; margin-bottom: 8px;"></div>
            <div class="loading-skeleton" style="height: 60px; margin-bottom: 8px;"></div>
            <div class="loading-skeleton" style="height: 60px;"></div>
        `;
    }

    // –ù–æ–≤—ã–µ –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    createAdvancedCrimeScene() {
        // –°–æ–∑–¥–∞–µ–º 8 —á–∞—Å—Ç–∏—Ü –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        for (let i = 0; i < 8; i++) {
            const particle = document.createElement('div');
            particle.style.cssText = `
                position: absolute;
                width: 6px;
                height: 6px;
                background: ${['#8B0000', '#FF0040', '#DC143C', '#4A0000'][Math.floor(Math.random() * 4)]};
                border-radius: 50%;
                pointer-events: none;
                z-index: 1000;
                box-shadow: 0 0 10px currentColor;
                filter: blur(1px);
            `;
            document.body.appendChild(particle);

            const angle = (Math.PI * 2 * i) / 8;
            const velocity = 40 + Math.random() * 20;
            let opacity = 1;
            let scale = 1;

            function animate() {
                const x = Math.cos(angle) * velocity * (1 - opacity);
                const y = Math.sin(angle) * velocity * (1 - opacity) - 20;

                particle.style.transform = `translate(${x}px, ${y}px) scale(${scale})`;
                particle.style.opacity = opacity;

                opacity -= 0.025;
                scale += 0.02;

                if (opacity > 0) {
                    requestAnimationFrame(animate);
                } else {
                    document.body.removeChild(particle);
                }
            }

            requestAnimationFrame(animate);
        }
    }

    createAdvancedParticles(element, type = 'crime') {
        const colors = {
            crime: ['#8B0000', '#FF0040', '#DC143C'],
            evidence: ['#FFD700', '#FFF200', '#DAA520'],
            blood: ['#8B0000', '#4A0000', '#5C1010']
        };

        for (let i = 0; i < 12; i++) {
            const particle = document.createElement('div');
            particle.style.cssText = `
                position: absolute;
                width: ${2 + Math.random() * 4}px;
                height: ${2 + Math.random() * 4}px;
                background: ${colors[type][Math.floor(Math.random() * colors[type].length)]};
                border-radius: 50%;
                pointer-events: none;
                z-index: 1000;
                box-shadow: 0 0 8px currentColor;
            `;

            const rect = element.getBoundingClientRect();
            particle.style.left = `${rect.left + rect.width / 2}px`;
            particle.style.top = `${rect.top + rect.height / 2}px`;

            document.body.appendChild(particle);

            const angle = (Math.PI * 2 * i) / 12;
            const velocity = 30 + Math.random() * 40;
            let opacity = 1;

            function animate() {
                const x = Math.cos(angle) * velocity * (1 - opacity);
                const y = Math.sin(angle) * velocity * (1 - opacity);

                particle.style.transform = `translate(${x}px, ${y}px)`;
                particle.style.opacity = opacity;

                opacity -= 0.02;

                if (opacity > 0) {
                    requestAnimationFrame(animate);
                } else {
                    document.body.removeChild(particle);
                }
            }

            requestAnimationFrame(animate);
        }
    }

    createScanningEffect(element) {
        const scanner = document.createElement('div');
        scanner.style.cssText = `
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 0, 64, 0.3), transparent);
            pointer-events: none;
            z-index: 10;
        `;

        element.style.position = 'relative';
        element.appendChild(scanner);

        scanner.animate([
            { left: '-100%' },
            { left: '100%' }
        ], {
            duration: 800,
            easing: 'ease-out'
        }).addEventListener('finish', () => {
            element.removeChild(scanner);
        });
    }

    createHologramExplosion(element) {
        // –°–æ–∑–¥–∞–µ–º 20 —Å–≤–µ—Ç—è—â–∏—Ö—Å—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        for (let i = 0; i < 20; i++) {
            const fragment = document.createElement('div');
            fragment.style.cssText = `
                position: absolute;
                width: ${3 + Math.random() * 6}px;
                height: ${3 + Math.random() * 6}px;
                background: ${['#FF0040', '#00BFFF', '#39FF14'][Math.floor(Math.random() * 3)]};
                border-radius: 50%;
                pointer-events: none;
                z-index: 1000;
                box-shadow: 0 0 15px currentColor;
                filter: blur(0.5px);
            `;

            const rect = element.getBoundingClientRect();
            fragment.style.left = `${rect.left + rect.width / 2}px`;
            fragment.style.top = `${rect.top + rect.height / 2}px`;

            document.body.appendChild(fragment);

            const angle = Math.random() * Math.PI * 2;
            const velocity = 60 + Math.random() * 40;
            let opacity = 1;
            let scale = 1;

            function animate() {
                const x = Math.cos(angle) * velocity * (1 - opacity);
                const y = Math.sin(angle) * velocity * (1 - opacity);

                fragment.style.transform = `translate(${x}px, ${y}px) scale(${scale})`;
                fragment.style.opacity = opacity;

                opacity -= 0.015;
                scale += 0.03;

                if (opacity > 0) {
                    requestAnimationFrame(animate);
                } else {
                    document.body.removeChild(fragment);
                }
            }

            requestAnimationFrame(animate);
        }
    }

    createAtmosphericEffects() {
        // –°–æ–∑–¥–∞–µ–º 15 –º–µ–¥–ª–µ–Ω–Ω–æ –ø–ª–∞–≤–∞—é—â–∏—Ö —á–∞—Å—Ç–∏—Ü –ø—ã–ª–∏
        for (let i = 0; i < 15; i++) {
            const dust = document.createElement('div');
            dust.style.cssText = `
                position: fixed;
                width: 1px;
                height: 1px;
                background: rgba(245, 245, 220, 0.3);
                border-radius: 50%;
                pointer-events: none;
                z-index: 5;
                left: ${Math.random() * 100}%;
                top: ${Math.random() * 100}%;
                animation: floatDust ${10 + Math.random() * 20}s linear infinite;
            `;

            document.body.appendChild(dust);
        }
    }

    createRandomScanEffect() {
        // –°–ª—É—á–∞–π–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 8 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            const elements = document.querySelectorAll('.stat-card, .achievement-item, .leaderboard-item');
            if (elements.length > 0 && Math.random() < 0.3) {
                const randomElement = elements[Math.floor(Math.random() * elements.length)];
                this.createScanningEffect(randomElement);
            }
        }, 8000);
    }

    initCriminalEffects() {
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
        const style = document.createElement('style');
        style.textContent = `
            @keyframes floatDust {
                0% {
                    transform: translateY(0) translateX(0) rotate(0deg);
                    opacity: 0;
                }
                10%, 90% {
                    opacity: 0.3;
                }
                100% {
                    transform: translateY(-100vh) translateX(50px) rotate(360deg);
                    opacity: 0;
                }
            }

            .blood-drip {
                position: relative;
                overflow: hidden;
            }

            .blood-drip::after {
                content: '';
                position: absolute;
                top: -5px;
                left: 50%;
                width: 2px;
                height: 0;
                background: #8B0000;
                border-radius: 0 0 50% 50%;
                animation: bloodDrip 2s ease-in-out infinite;
            }

            @keyframes bloodDrip {
                0% { height: 0; top: -5px; }
                50% { height: 20px; top: 100%; }
                100% { height: 0; top: 100%; }
            }

            .evidence-highlight {
                position: relative;
            }

            .evidence-highlight::before {
                content: '';
                position: absolute;
                top: -2px;
                left: -2px;
                right: -2px;
                bottom: -2px;
                background: linear-gradient(45deg, transparent, #FFD700, transparent);
                opacity: 0;
                z-index: -1;
                border-radius: inherit;
                animation: evidenceGlow 1s ease-in-out;
            }

            @keyframes evidenceGlow {
                0%, 100% { opacity: 0; }
                50% { opacity: 0.5; }
            }
        `;
        document.head.appendChild(style);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.createAtmosphericEffects();
        this.createRandomScanEffect();
        this.startPeriodicCriminalEffects();
    }

    startPeriodicCriminalEffects() {
        // –°–ª—É—á–∞–π–Ω—ã–µ –≥–ª–∏—Ç—á–∏ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã - –ë–ï–ó –°–î–í–ò–ì–û–í
        setInterval(() => {
            if (Math.random() < 0.12) {
                const elements = document.querySelectorAll('.profile-name, .header-title, .position-rank');
                elements.forEach(el => {
                    // –¢–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –±–µ–∑ —Å–¥–≤–∏–≥–æ–≤
                    el.style.filter = 'hue-rotate(180deg) contrast(1.3) saturate(2)';
                    setTimeout(() => {
                        el.style.filter = 'hue-rotate(90deg) invert(0.1)';
                        setTimeout(() => {
                            el.style.filter = '';
                        }, 50);
                    }, 50);
                });
            }
        }, 3000);

        // –¢—Ä–µ–≤–æ–∂–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            if (Math.random() < 0.15) {
                const alertElements = document.querySelectorAll('.crime-stamp, .rank-badge, .level-badge-center');
                alertElements.forEach((el, index) => {
                    setTimeout(() => {
                        const originalBg = el.style.background;
                        const originalAnimation = el.style.animation;

                        el.style.animation = 'none';
                        el.style.background = 'linear-gradient(135deg, #FF0040, #8B0000)';
                        el.style.boxShadow = '0 0 20px #FF0040';

                        setTimeout(() => {
                            el.style.animation = originalAnimation;
                            el.style.background = originalBg;
                            el.style.boxShadow = '';
                        }, 200);
                    }, index * 100);
                });
            }
        }, 5000);
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    updateElement(id, value) {
        const element = document.getElementById(id);
        console.log(`üîß updateElement: id="${id}", value="${value}", element=${element ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);

        if (element) {
            element.textContent = value;
            console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç ${id} –æ–±–Ω–æ–≤–ª–µ–Ω –∑–Ω–∞—á–µ–Ω–∏–µ–º: "${value}"`);

            // –î–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º data-text –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            if (id === 'detective-name') {
                element.setAttribute('data-text', value);
                console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω data-text –¥–ª—è ${id}: "${value}"`);
            }
        } else {
            console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM!`);
        }
    }

    provideCriminalFeedback(type) {
        if (tg?.HapticFeedback) {
            const feedbackTypes = {
                navigation: 'heavy',
                achievement: 'heavy',
                leaderboard: 'medium',
                crime: 'heavy'
            };

            tg.HapticFeedback.impactOccurred(feedbackTypes[type] || 'light');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        if (type === 'achievement' || type === 'crime') {
            document.body.style.filter = 'hue-rotate(180deg) contrast(1.3)';
            setTimeout(() => {
                document.body.style.filter = '';
            }, 150);
        }
    }

    showLoadingState() {
        ProfileState.isLoading = true;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }

    hideLoadingState() {
        ProfileState.isLoading = false;
    }

    showError(message) {
        console.log('üö® –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É:', message);

        this.hideLoadingState();

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏
        const errorContainer = document.createElement('div');
        errorContainer.className = 'error-message';
        errorContainer.innerHTML = `
            <div class="error-icon">‚ö†Ô∏è</div>
            <div class="error-text">${message}</div>
            <button class="retry-button" onclick="window.location.reload()">
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
        `;

        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        const container = document.querySelector('.profile-container');
        if (container) {
            container.innerHTML = '';
            container.appendChild(errorContainer);
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –æ—à–∏–±–∫–µ
        errorContainer.style.cssText = `
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 40px 20px;
            text-align: center;
            color: #ff4757;
            min-height: 300px;
        `;
    }

    showAuthError() {
        console.log('üîí –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

        const authModal = document.createElement('div');
        authModal.className = 'auth-error-modal';
        authModal.innerHTML = `
            <div class="auth-error-content">
                <div class="auth-error-icon">üîê</div>
                <h3>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram</h3>
                <p>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã</p>
                <button class="auth-retry-button" onclick="window.location.reload()">
                    OK
                </button>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ body
        document.body.appendChild(authModal);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        authModal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        `;

        const content = authModal.querySelector('.auth-error-content');
        content.style.cssText = `
            background: #1a1a1a;
            padding: 30px;
            border-radius: 15px;
            border: 1px solid #333;
            text-align: center;
            max-width: 350px;
            margin: 20px;
            color: #fff;
        `;

        const icon = authModal.querySelector('.auth-error-icon');
        icon.style.cssText = `
            font-size: 48px;
            margin-bottom: 20px;
        `;

        const button = authModal.querySelector('.auth-retry-button');
        button.style.cssText = `
            background: #007bff;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            margin-top: 20px;
            cursor: pointer;
            font-size: 16px;
        `;
    }

    startPeriodicUpdates() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            if (!ProfileState.isLoading) {
                this.loadLeaderboardData(ProfileState.leaderboard.current);
            }
        }, 5 * 60 * 1000);
    }

    renderEmptyLeaderboard() {
        const container = document.getElementById('leaderboard-container');
        if (!container) return;

        container.innerHTML = `
            <div class="empty-leaderboard">
                <div class="empty-leaderboard-icon">üìä</div>
                <div class="empty-leaderboard-text">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
                <div class="empty-leaderboard-subtext">–†–µ–π—Ç–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div>
            </div>
        `;
    }

    // üî• –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–°–ß–ï–¢–ê –û–ü–´–¢–ê –° –ú–ù–û–ñ–ò–¢–ï–õ–Ø–ú–ò
    calculateAdvancedExperience(gameResult, userStats) {
        let baseExperience = gameResult.totalScore || 0;
        let multiplier = 1.0;
        let bonusReasons = [];

        const multipliers = ProfileConfig.levels.experienceMultipliers;
        const now = new Date();
        const isWeekend = now.getDay() === 0 || now.getDay() === 6;

        // üéØ –ë–û–ù–£–° –ó–ê –ò–î–ï–ê–õ–¨–ù–£–Æ –ò–ì–†–£
        if (gameResult.correctAnswers === gameResult.totalQuestions) {
            multiplier *= multipliers.perfect_game;
            bonusReasons.push(`–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞: +${Math.round((multipliers.perfect_game - 1) * 100)}%`);
        }

        // ‚ö° –ë–û–ù–£–° –ó–ê –°–ö–û–†–û–°–¢–¨ (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è < 30 —Å–µ–∫)
        const avgTime = gameResult.averageTime || gameResult.timeSpent / gameResult.totalQuestions;
        if (avgTime < 30000) { // –º–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥
            multiplier *= multipliers.speed_bonus;
            bonusReasons.push(`–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è: +${Math.round((multipliers.speed_bonus - 1) * 100)}%`);
        }

        // üéñÔ∏è –ë–û–ù–£–° –ó–ê –°–õ–û–ñ–ù–û–°–¢–¨ (hard –¥–µ–ª–∞)
        if (gameResult.difficulty === 'hard') {
            multiplier *= multipliers.difficulty_master;
            bonusReasons.push(`–ú–∞—Å—Ç–µ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: +${Math.round((multipliers.difficulty_master - 1) * 100)}%`);
        }

        // üî• –ë–û–ù–£–° –ó–ê –°–ï–†–ò–Æ –ü–û–ë–ï–î
        if (userStats.winStreak >= 3) {
            const streakMultiplier = Math.min(1 + (userStats.winStreak * 0.1), 2.0); // –¥–æ +100%
            multiplier *= streakMultiplier;
            bonusReasons.push(`–°–µ—Ä–∏—è –ø–æ–±–µ–¥ x${userStats.winStreak}: +${Math.round((streakMultiplier - 1) * 100)}%`);
        }

        // üìÖ –°–ï–ó–û–ù–ù–´–ï –ë–û–ù–£–°–´
        if (isWeekend) {
            multiplier *= multipliers.weekend_bonus;
            bonusReasons.push(`–í—ã—Ö–æ–¥–Ω—ã–µ: +${Math.round((multipliers.weekend_bonus - 1) * 100)}%`);
        }

        // üåÖ –ë–û–ù–£–° –ó–ê –ü–ï–†–í–£–Æ –ò–ì–†–£ –î–ù–Ø
        const today = now.toDateString();
        const lastPlayDate = userStats.lastPlayed ? new Date(userStats.lastPlayed).toDateString() : null;
        if (lastPlayDate !== today) {
            multiplier *= multipliers.daily_first_game;
            bonusReasons.push(`–ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞ –¥–Ω—è: +${Math.round((multipliers.daily_first_game - 1) * 100)}%`);
        }

        // ‚ö†Ô∏è –®–¢–†–ê–§–´ –ó–ê –ß–†–ï–ó–ú–ï–†–ù–£–Æ –ò–ì–†–£
        const gamesThisHour = this.getGamesInLastHour(userStats);
        const gamesToday = this.getGamesToday(userStats);

        if (gamesThisHour > 3) {
            multiplier *= multipliers.same_hour_penalty;
            bonusReasons.push(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä –≤ —á–∞—Å: ${Math.round((multipliers.same_hour_penalty - 1) * 100)}%`);
        }

        if (gamesToday > 10) {
            multiplier *= multipliers.same_day_penalty;
            bonusReasons.push(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä –∑–∞ –¥–µ–Ω—å: ${Math.round((multipliers.same_day_penalty - 1) * 100)}%`);
        }

        // üìä –§–ò–ù–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢
        const finalExperience = Math.round(baseExperience * multiplier);
        const bonusExperience = finalExperience - baseExperience;

        return {
            base: baseExperience,
            multiplier: multiplier,
            bonus: bonusExperience,
            final: finalExperience,
            reasons: bonusReasons
        };
    }

    // üïê –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–î–°–ß–ï–¢–ê –ò–ì–†
    getGamesInLastHour(userStats) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ 0-5
        return Math.floor(Math.random() * 6);
    }

    getGamesToday(userStats) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ 0-15
        return Math.floor(Math.random() * 16);
    }

    // üéñÔ∏è –°–ò–°–¢–ï–ú–ê –†–ê–ù–ì–û–í –° –¶–í–ï–¢–ê–ú–ò –ò –ò–ö–û–ù–ö–ê–ú–ò
    updateRankDisplay(level) {
        const rankInfo = ProfileConfig.levels.getRankByLevel(level);
        const rankElement = document.getElementById('detective-rank');

        if (rankElement && rankInfo) {
            rankElement.textContent = rankInfo.name;
            rankElement.style.color = rankInfo.color;
            rankElement.style.borderColor = rankInfo.color;

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            const iconSpan = rankElement.querySelector('.rank-icon') || document.createElement('span');
            iconSpan.className = 'rank-icon';
            iconSpan.textContent = rankInfo.icon;

            if (!rankElement.querySelector('.rank-icon')) {
                rankElement.prepend(iconSpan);
            }
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üî™ –ó–∞–ø—É—Å–∫ Dramatic Criminal Trust Profile');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º—Ä–∞—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    new DramaticCriminalProfile();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.DramaticCriminalProfile = DramaticCriminalProfile;
window.ProfileState = ProfileState; 