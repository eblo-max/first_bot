/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ñ–∏–ª—è "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ"
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –£–ª—å—Ç—Ä–∞-—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ UX
 */

// –û–±—ä–µ–∫—Ç Telegram WebApp –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram Mini Apps
let tg = window.Telegram?.WebApp;

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function createAuthenticatedUrl(baseUrl) {
    const token = localStorage.getItem('token') || localStorage.getItem('auth_token');
    let url = baseUrl;

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ URL
    if (token) {
        url += `?token=${encodeURIComponent(token)}`;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ Telegram WebApp, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Ç–æ–∂–µ
    if (window.Telegram?.WebApp?.initData) {
        const separator = url.includes('?') ? '&' : '?';
        url += `${separator}initData=${encodeURIComponent(window.Telegram.WebApp.initData)}`;
    }

    return url;
}

/**
 * –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function animateCounter(element, targetValue, duration = 1000) {
    if (!element) return;

    const start = parseInt(element.textContent) || 0;
    const target = parseInt(targetValue) || 0;
    const startTime = performance.now();

    function updateCounter(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);

        // Easing —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        const easeOut = 1 - Math.pow(1 - progress, 3);
        const currentValue = Math.round(start + (target - start) * easeOut);

        element.textContent = element.id === 'stat-accuracy' ? `${currentValue}%` : currentValue;

        if (progress < 1) {
            requestAnimationFrame(updateCounter);
        }
    }

    requestAnimationFrame(updateCounter);
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */
function createParticleEffect(element, type = 'success') {
    if (!element) return;

    const colors = {
        success: ['#F4C430', '#DAA520', '#FFD700'],
        error: ['#DC143C', '#8B0000', '#E53E3E'],
        info: ['#0F3460', '#16213E', '#39FF14']
    };

    for (let i = 0; i < 6; i++) {
        const particle = document.createElement('div');
        particle.style.cssText = `
            position: absolute;
            width: 4px;
            height: 4px;
            background: ${colors[type][Math.floor(Math.random() * colors[type].length)]};
            border-radius: 50%;
            pointer-events: none;
            z-index: 1000;
        `;

        const rect = element.getBoundingClientRect();
        particle.style.left = `${rect.left + rect.width / 2}px`;
        particle.style.top = `${rect.top + rect.height / 2}px`;

        document.body.appendChild(particle);

        // –ê–Ω–∏–º–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü—ã
        const angle = (Math.PI * 2 * i) / 6;
        const velocity = 50 + Math.random() * 50;
        let opacity = 1;
        let scale = 1;

        function animateParticle() {
            particle.style.transform = `translate(${Math.cos(angle) * velocity}px, ${Math.sin(angle) * velocity}px) scale(${scale})`;
            particle.style.opacity = opacity;

            opacity -= 0.02;
            scale += 0.01;

            if (opacity > 0) {
                requestAnimationFrame(animateParticle);
            } else {
                document.body.removeChild(particle);
            }
        }

        requestAnimationFrame(animateParticle);
    }
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const ProfileState = {
    loading: false,
    error: false,
    errorMessage: '',
    profileData: null,
    token: null,
    isAuthenticated: false
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const Elements = {
    loadingScreen: null,
    mainContent: null,
    errorScreen: null,
    errorMessage: null,

    // –ü—Ä–æ—Ñ–∏–ª—å
    detectiveName: null,
    detectiveRank: null,
    reputationLevel: null,
    reputationCategory: null,

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    statInvestigations: null,
    statSolved: null,
    statAccuracy: null,
    statScore: null,

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    achievementsContainer: null,
    leaderboardContainer: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function initElements() {
    Elements.loadingScreen = document.getElementById('loading-screen');
    Elements.mainContent = document.getElementById('main-content');
    Elements.errorScreen = document.getElementById('error-screen');
    Elements.errorMessage = document.getElementById('error-message');

    // –ü—Ä–æ—Ñ–∏–ª—å
    Elements.detectiveName = document.getElementById('detective-name');
    Elements.detectiveRank = document.getElementById('detective-rank');
    Elements.reputationLevel = document.getElementById('reputation-level');
    Elements.reputationCategory = document.getElementById('reputation-category');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    Elements.statInvestigations = document.getElementById('stat-investigations');
    Elements.statSolved = document.getElementById('stat-solved');
    Elements.statAccuracy = document.getElementById('stat-accuracy');
    Elements.statScore = document.getElementById('stat-score');

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    Elements.achievementsContainer = document.getElementById('achievements-container');
    Elements.leaderboardContainer = document.getElementById('leaderboard-container');
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–æ—Ñ–∏–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
 */
class ProfileManager {
    constructor() {
        this.init();
    }

    async init() {
        try {
            console.log('üïµÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—å—Ç—Ä–∞-—Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—å–µ –∞–≥–µ–Ω—Ç–∞...');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
            initElements();

            this.showLoading();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            if (tg) {
                tg.ready();
                tg.expand();

                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
                if (tg.themeParams) {
                    document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#0A0A0F');
                    document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#E8E8E8');
                }

                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
                if (tg.BackButton) {
                    tg.BackButton.show();
                    tg.BackButton.onClick(() => {
                        if (tg.HapticFeedback) {
                            tg.HapticFeedback.impactOccurred('medium');
                        }
                        window.history.back();
                    });
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            await this.checkAuth();

            if (ProfileState.isAuthenticated) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
                await this.loadProfile();
                await this.loadAchievements();
                await this.loadLeaderboard();

                this.showContent();
                this.initInteractivity();
            } else {
                this.showError('–î–æ—Å—Ç—É–ø –∫ –∑–∞—Å–µ–∫—Ä–µ—á–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–µ—â–µ–Ω');
            }

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
            this.showError('–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ' + error.message);
        }
    }

    async checkAuth() {
        try {
            console.log('üîê –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ...');

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL –∏–ª–∏ localStorage
            const urlParams = new URLSearchParams(window.location.search);
            let token = urlParams.get('token') || localStorage.getItem('token') || localStorage.getItem('auth_token');

            if (!token && tg?.initData) {
                // –ü—ã—Ç–∞–µ–º—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
                const response = await fetch('/api/auth/telegram', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        initData: tg.initData
                    })
                });

                if (response.ok) {
                    const data = await response.json();
                    token = data.token;
                    localStorage.setItem('token', token);
                }
            }

            if (token) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                const response = await fetch('/api/auth/verify', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    ProfileState.token = token;
                    ProfileState.isAuthenticated = true;
                    console.log('‚úÖ –ê–≥–µ–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
                } else {
                    console.log('‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞');
                    localStorage.removeItem('token');
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
            ProfileState.isAuthenticated = false;
        }
    }

    async loadProfile() {
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—å–µ...');

            const response = await fetch('/api/user/profile', {
                headers: {
                    'Authorization': `Bearer ${ProfileState.token}`
                }
            });

            if (!response.ok) {
                throw new Error('–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            }

            const profileData = await response.json();
            ProfileState.profileData = profileData;

            console.log('‚úÖ –ó–∞—Å–µ–∫—Ä–µ—á–µ–Ω–Ω–æ–µ –¥–æ—Å—å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', profileData);

            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
            this.updateProfileUI(profileData);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ—Å—å–µ:', error);
            throw error;
        }
    }

    updateProfileUI(data) {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
        if (Elements.detectiveName) {
            const name = data.basic?.firstName || data.username || '–ê–ì–ï–ù–¢';
            this.typewriterEffect(Elements.detectiveName, name.toUpperCase());
        }

        if (Elements.detectiveRank) {
            Elements.detectiveRank.textContent = data.rank?.current || '–ù–û–í–ò–ß–û–ö';
            createParticleEffect(Elements.detectiveRank, 'success');
        }

        // –†–µ–ø—É—Ç–∞—Ü–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        if (Elements.reputationLevel) {
            animateCounter(Elements.reputationLevel, data.reputation?.level || 0, 1500);
        }

        if (Elements.reputationCategory) {
            Elements.reputationCategory.textContent = data.reputation?.category || '–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–û';
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        const stats = data.stats || {};

        if (Elements.statInvestigations) {
            animateCounter(Elements.statInvestigations, stats.investigations || 0);
        }

        if (Elements.statSolved) {
            animateCounter(Elements.statSolved, stats.solvedCases || 0);
        }

        if (Elements.statAccuracy) {
            animateCounter(Elements.statAccuracy, Math.round(stats.accuracy || 0));
        }

        if (Elements.statScore) {
            animateCounter(Elements.statScore, stats.totalScore || 0, 2000);
        }
    }

    /**
     * –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–Ω–æ–π –º–∞—à–∏–Ω–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
     */
    typewriterEffect(element, text, speed = 100) {
        if (!element) return;

        element.textContent = '';
        element.style.width = '0';
        element.style.borderRight = '2px solid var(--evidence-gold)';
        element.style.whiteSpace = 'nowrap';
        element.style.overflow = 'hidden';

        let i = 0;
        const typeInterval = setInterval(() => {
            if (i < text.length) {
                element.textContent += text.charAt(i);
                element.style.width = 'auto';
                i++;
            } else {
                clearInterval(typeInterval);
                setTimeout(() => {
                    element.style.borderRight = 'none';
                }, 500);
            }
        }, speed);
    }

    async loadAchievements() {
        try {
            console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≥—Ä–∞–¥ –∞–≥–µ–Ω—Ç–∞...');

            const response = await fetch('/api/user/achievements', {
                headers: {
                    'Authorization': `Bearer ${ProfileState.token}`
                }
            });

            if (!response.ok) {
                console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
                return;
            }

            const achievements = await response.json();
            this.renderAchievements(achievements);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≥—Ä–∞–¥:', error);
        }
    }

    renderAchievements(achievements) {
        if (!Elements.achievementsContainer) return;

        // –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
        const baseAchievements = [
            { id: 'first_case', name: '–ü–ï–†–í–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø', icon: 'üîç', locked: true, description: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –º–∏—Å—Å–∏—è' },
            { id: 'rookie', name: '–ê–ì–ï–ù–¢-–ù–û–í–ò–ß–û–ö', icon: 'üéñÔ∏è', locked: true, description: '–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞' },
            { id: 'expert', name: '–≠–ö–°–ü–ï–†–¢', icon: 'üèÜ', locked: true, description: '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' },
            { id: 'sharp_eye', name: '–û–°–¢–†–´–ô –ì–õ–ê–ó', icon: 'üëÅÔ∏è', locked: true, description: '–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
            { id: 'serial_detective', name: '–°–ï–†–ò–ô–ù–´–ô –î–ï–¢–ï–ö–¢–ò–í', icon: 'üïµÔ∏è', locked: true, description: '–†–∞—Å–∫—Ä—ã—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ–ª' },
            { id: 'maniac', name: '–ü–ï–†–§–ï–ö–¶–ò–û–ù–ò–°–¢', icon: '‚ö°', locked: true, description: '–ë–µ–∑—É–ø—Ä–µ—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å' }
        ];

        // –û—Ç–º–µ—á–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements.forEach(userAchievement => {
            const achievement = baseAchievements.find(a => a.id === userAchievement.id);
            if (achievement) {
                achievement.locked = false;
                achievement.name = userAchievement.name || achievement.name;
            }
        });

        // –†–µ–Ω–¥–µ—Ä–∏–º —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        Elements.achievementsContainer.innerHTML = baseAchievements.map((achievement, index) => `
            <div class="achievement-medal ${achievement.locked ? '' : 'unlocked'}" 
                 title="${achievement.description}"
                 style="animation-delay: ${index * 0.1}s">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-name">${achievement.locked ? '???' : achievement.name}</div>
            </div>
        `).join('');

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        setTimeout(() => {
            const medals = Elements.achievementsContainer.querySelectorAll('.achievement-medal');
            medals.forEach(medal => {
                medal.addEventListener('click', () => {
                    if (medal.classList.contains('unlocked')) {
                        createParticleEffect(medal, 'success');
                        if (tg?.HapticFeedback) {
                            tg.HapticFeedback.impactOccurred('light');
                        }
                    }
                });
            });
        }, 100);
    }

    async loadLeaderboard() {
        try {
            console.log('üëë –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞–≥–µ–Ω—Ç–æ–≤...');

            const response = await fetch('/api/leaderboard/week', {
                headers: {
                    'Authorization': `Bearer ${ProfileState.token}`
                }
            });

            if (!response.ok) {
                console.log('‚ö†Ô∏è –†–µ–π—Ç–∏–Ω–≥ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                return;
            }

            const leaderboard = await response.json();
            this.renderLeaderboard(leaderboard);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        }
    }

    renderLeaderboard(data) {
        if (!Elements.leaderboardContainer) return;

        const leaders = data.leaders || [];
        const currentUser = ProfileState.profileData;

        if (leaders.length === 0) {
            Elements.leaderboardContainer.innerHTML = `
                <div style="text-align: center; padding: 2rem; color: rgba(232, 232, 232, 0.6);">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">üïµÔ∏è</div>
                    <p style="font-family: 'JetBrains Mono', monospace; text-transform: uppercase;">
                        –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                    </p>
                </div>
            `;
            return;
        }

        Elements.leaderboardContainer.innerHTML = leaders.map((leader, index) => {
            const isCurrentUser = currentUser && leader.userId === currentUser.id;
            const rankIcons = ['üëë', 'ü•à', 'ü•â'];
            const rankIcon = rankIcons[index] || 'üéñÔ∏è';

            return `
                <div class="leaderboard-item ${isCurrentUser ? 'current-user' : ''}" 
                     style="animation-delay: ${index * 0.05}s">
                    <div class="leaderboard-rank">${index + 1}</div>
                    <div class="leaderboard-info">
                        <div class="leaderboard-name">
                            ${rankIcon} ${leader.username || leader.firstName || '–ê–ì–ï–ù–¢'}
                            ${isCurrentUser ? ' (–í–´)' : ''}
                        </div>
                        <div class="leaderboard-score">${leader.score || 0} –û–ß–ö–û–í</div>
                    </div>
                </div>
            `;
        }).join('');

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        setTimeout(() => {
            const items = Elements.leaderboardContainer.querySelectorAll('.leaderboard-item');
            items.forEach(item => {
                item.addEventListener('click', () => {
                    if (tg?.HapticFeedback) {
                        tg.HapticFeedback.impactOccurred('light');
                    }
                });
            });
        }, 100);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
     */
    initInteractivity() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ Telegram HapticFeedback
        if (tg?.HapticFeedback) {
            document.querySelectorAll('.interactive').forEach(element => {
                element.addEventListener('click', () => {
                    tg.HapticFeedback.impactOccurred('light');
                });
            });
        }

        // –ü–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–æ–Ω–∞
        if (window.DeviceMotionEvent) {
            window.addEventListener('devicemotion', (event) => {
                const x = event.accelerationIncludingGravity.x;
                const y = event.accelerationIncludingGravity.y;

                document.body.style.setProperty('--parallax-x', `${x * 2}px`);
                document.body.style.setProperty('--parallax-y', `${y * 2}px`);
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        window.addEventListener('scroll', () => {
            const scrolled = window.pageYOffset;
            const parallax = scrolled * 0.5;

            document.body.style.setProperty('--scroll-parallax', `${parallax}px`);
        });
    }

    showLoading() {
        ProfileState.loading = true;
        ProfileState.error = false;

        if (Elements.loadingScreen) {
            Elements.loadingScreen.classList.remove('hidden');
            Elements.loadingScreen.style.animation = 'loading-fade-in 0.5s ease-out';
        }
        if (Elements.mainContent) Elements.mainContent.classList.add('hidden');
        if (Elements.errorScreen) Elements.errorScreen.classList.add('hidden');
    }

    showContent() {
        ProfileState.loading = false;
        ProfileState.error = false;

        if (Elements.loadingScreen) Elements.loadingScreen.classList.add('hidden');
        if (Elements.mainContent) {
            Elements.mainContent.classList.remove('hidden');
            Elements.mainContent.style.animation = 'fadeInUp 0.8s ease-out';
        }
        if (Elements.errorScreen) Elements.errorScreen.classList.add('hidden');

        // –≠—Ñ—Ñ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        if (tg?.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('success');
        }
    }

    showError(message) {
        ProfileState.loading = false;
        ProfileState.error = true;
        ProfileState.errorMessage = message;

        if (Elements.errorMessage) Elements.errorMessage.textContent = message;

        if (Elements.loadingScreen) Elements.loadingScreen.classList.add('hidden');
        if (Elements.mainContent) Elements.mainContent.classList.add('hidden');
        if (Elements.errorScreen) {
            Elements.errorScreen.classList.remove('hidden');
            Elements.errorScreen.style.animation = 'fadeInUp 0.6s ease-out';
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (tg?.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('error');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—å—Ç—Ä–∞-—Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–∏–ª—è –∞–≥–µ–Ω—Ç–∞...');
    new ProfileManager();
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ Lucide
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }, 100);
}); 