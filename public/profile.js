/**
 * Criminal Trust - –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ TypeScript
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
import { getRankByLevel, calculateLevel, getXPProgress } from './modules/profile-config.js';
import { authService } from './modules/auth-service.js';
import { apiService } from './modules/api-service.js';
// =============================================================================
// –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –ü–†–û–§–ò–õ–Ø
// =============================================================================
export class CriminalTrustProfile {
    constructor() {
        this.isInitialized = false;
        this.effectsInterval = null;
        this.updateInterval = null;
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state = {
            user: null,
            achievements: [],
            leaderboard: {
                current: 'day',
                data: {}
            },
            isLoading: false,
            criminalEffects: {
                glitchActive: false,
                bloodParticles: [],
                scanEffect: false,
                atmosphericEffects: false
            }
        };
        this.init();
    }
    // =========================================================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // =========================================================================
    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Criminal Trust Profile...');
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram WebApp
            this.setupTelegramApp();
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º DOM –∏ —Å–æ–±—ã—Ç–∏—è
            this.setupDOM();
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
            this.initCriminalEffects();
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            await this.authenticate();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            await this.loadProfileData();
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.startPeriodicUpdates();
            this.isInitialized = true;
            console.log('‚úÖ Profile –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        }
    }
    setupTelegramApp() {
        const tg = authService.getTelegramApp();
        if (tg) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
            authService.applyTelegramTheme();
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            authService.setupBackButton(() => {
                console.log('üîô –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
                window.location.href = '/';
            });
            console.log('üì± Telegram WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }
    }
    setupDOM() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (!this.checkDOMElements()) {
            throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        this.initLeaderboardTabs();
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        console.log('üéØ DOM –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    // =========================================================================
    // –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
    // =========================================================================
    async authenticate() {
        console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');
        this.setLoading(true);
        try {
            const authResult = await authService.authenticate();
            if (authResult.success && authResult.user) {
                console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                this.state.user = authResult.user;
            }
            else {
                throw new Error(authResult.error || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            }
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            this.showAuthError();
            throw error;
        }
        finally {
            this.setLoading(false);
        }
    }
    // =========================================================================
    // –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
    // =========================================================================
    async loadProfileData() {
        console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è...');
        this.setLoading(true);
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω
            this.showProfileSkeleton();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const batchData = await apiService.getBatchData();
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            if (batchData.profile) {
                this.state.user = batchData.profile;
                this.updateProfileUI(batchData.profile);
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if (batchData.achievements) {
                this.state.achievements = batchData.achievements;
                this.renderAchievements(batchData.achievements);
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            if (batchData.leaderboard) {
                this.state.leaderboard.data[this.state.leaderboard.current] = batchData.leaderboard;
                this.renderLeaderboard(batchData.leaderboard);
            }
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (this.state.user?.telegramId) {
                await this.loadUserAvatar(this.state.user.telegramId);
            }
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è');
        }
        finally {
            this.hideProfileSkeleton();
            this.setLoading(false);
        }
    }
    // =========================================================================
    // –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
    // =========================================================================
    updateProfileUI(user) {
        try {
            console.log('üéØ –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–æ—Ñ–∏–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏:', user);

            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            this.updateElement('user-name', this.getUserDisplayName(user));
            this.updateElement('user-total-score', (user.stats?.totalScore || 0).toLocaleString());
            this.updateElement('user-games-played', (user.stats?.investigations || 0).toString());
            this.updateElement('user-accuracy', `${Math.round(user.stats?.accuracy || 0)}%`);

            // –£—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç
            const totalScore = user.stats?.totalScore || 0;
            const level = calculateLevel(totalScore);
            const xpProgress = getXPProgress(totalScore, level);
            const rank = getRankByLevel(level);

            this.updateElement('user-level', level.toString());
            this.updateElement('user-rank', rank.name);
            this.updateElement('user-rank-icon', rank.icon);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ä–∞–Ω–≥–∞
            const rankElement = document.getElementById('user-rank');
            if (rankElement) {
                rankElement.style.color = rank.color;
            }

            // –ê–Ω–∏–º–∏—Ä—É–µ–º XP –±–∞—Ä
            this.animateXPBar(xpProgress);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–æ–≤—ã–π –¥–∏—Å–ø–ª–µ–π
            this.updateRankDisplay(level, rank);

            console.log('üéØ UI –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI:', error);
        }
    }
    animateXPBar(percentage) {
        const xpBar = document.querySelector('.xp-progress-fill');
        if (!xpBar)
            return;
        xpBar.style.width = '0%';
        setTimeout(() => {
            xpBar.style.transition = 'width 1.5s cubic-bezier(0.4, 0, 0.2, 1)';
            xpBar.style.width = `${Math.min(percentage, 100)}%`;
        }, 100);
    }
    // =========================================================================
    // –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
    // =========================================================================
    renderAchievements(achievements) {
        const container = document.getElementById('achievements-grid');
        if (!container)
            return;
        container.innerHTML = '';
        achievements.forEach(achievement => {
            const element = this.createAchievementElement(achievement);
            container.appendChild(element);
        });
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        this.addAchievementInteractivity();
        console.log(`üèÜ –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${achievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
    }
    createAchievementElement(achievement) {
        const div = document.createElement('div');
        div.className = `achievement-card ${achievement.isUnlocked ? 'unlocked' : 'locked'}`;
        div.dataset.achievementId = achievement.id;
        const rarityClass = `rarity-${achievement.rarity}`;
        div.classList.add(rarityClass);
        div.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-content">
                <h3 class="achievement-name">${achievement.name}</h3>
                <p class="achievement-description">${achievement.description}</p>
                <div class="achievement-category">${achievement.category}</div>
                ${!achievement.isUnlocked ? `
                    <div class="achievement-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${achievement.progress || 0}%"></div>
                        </div>
                        <span class="progress-text">${Math.round(achievement.progress || 0)}%</span>
                    </div>
                ` : ''}
            </div>
            ${achievement.isUnlocked ? '<div class="achievement-unlock-badge">‚úì</div>' : ''}
        `;
        return div;
    }
    // =========================================================================
    // –õ–ò–î–ï–†–ë–û–†–î
    // =========================================================================
    initLeaderboardTabs() {
        const tabs = document.querySelectorAll('.leaderboard-tab');
        tabs.forEach(tab => {
            tab.addEventListener('click', async (e) => {
                e.preventDefault();
                const period = tab.getAttribute('data-period');
                if (period) {
                    await this.switchLeaderboardPeriod(period);
                }
            });
        });
    }
    async switchLeaderboardPeriod(period) {
        if (this.state.leaderboard.current === period)
            return;
        this.state.leaderboard.current = period;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.querySelectorAll('.leaderboard-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        const activeTab = document.querySelector(`[data-period="${period}"]`);
        if (activeTab) {
            activeTab.classList.add('active');
        }
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        this.showLeaderboardSkeleton();
        try {
            const response = await apiService.getLeaderboard(period);
            if (response.success && response.data) {
                this.state.leaderboard.data[period] = response.data;
                this.renderLeaderboard(response.data);
            }
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
            this.renderEmptyLeaderboard();
        }
    }
    renderLeaderboard(data) {
        const container = document.getElementById('leaderboard-content');
        if (!container) return;

        console.log('üèÜ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', data);

        if (!data.leaderboard || data.leaderboard.length === 0) {
            this.renderEmptyLeaderboard();
            return;
        }

        const html = data.leaderboard.map((entry, index) => {
            const rank = getRankByLevel(1); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞–Ω–≥ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–≤–Ω—è –≤ API
            const isCurrentUser = entry.isCurrentUser;

            return `
                <div class="leaderboard-entry ${isCurrentUser ? 'current-user' : ''}">
                    <div class="position">#${entry.rank || index + 1}</div>
                    <div class="user-info">
                        <div class="user-avatar">
                            <div class="avatar-placeholder">üë§</div>
                        </div>
                        <div class="user-details">
                            <div class="user-name">${entry.name || '–î–µ—Ç–µ–∫—Ç–∏–≤'}</div>
                            <div class="user-rank" style="color: ${rank.color}">
                                ${rank.icon} ${entry.userRank || '–°–¢–ê–ñ–ï–†'}
                            </div>
                        </div>
                    </div>
                    <div class="user-stats">
                        <div class="score">${(entry.score || 0).toLocaleString()}</div>
                        <div class="accuracy">-</div>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = html;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.updateUserPosition(data);
    }
    // =========================================================================
    // –ö–†–ò–ú–ò–ù–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´
    // =========================================================================
    initCriminalEffects() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        let effectsContainer = document.getElementById('criminal-effects');
        if (!effectsContainer) {
            effectsContainer = document.createElement('div');
            effectsContainer.id = 'criminal-effects';
            effectsContainer.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
                z-index: 1000;
            `;
            document.body.appendChild(effectsContainer);
        }
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.startPeriodicCriminalEffects();
        console.log('üé≠ –ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    startPeriodicCriminalEffects() {
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        this.effectsInterval = window.setInterval(() => {
            if (Math.random() > 0.7) { // 30% —à–∞–Ω—Å
                this.createRandomScanEffect();
            }
            if (Math.random() > 0.9) { // 10% —à–∞–Ω—Å
                this.createAtmosphericEffects();
            }
        }, 10000);
    }
    createRandomScanEffect() {
        const elements = document.querySelectorAll('.achievement-card, .leaderboard-entry');
        if (elements.length === 0)
            return;
        const randomElement = elements[Math.floor(Math.random() * elements.length)];
        this.createScanningEffect(randomElement);
    }
    createScanningEffect(element) {
        if (!element)
            return;
        const rect = element.getBoundingClientRect();
        const scanLine = document.createElement('div');
        scanLine.style.cssText = `
            position: absolute;
            top: ${rect.top}px;
            left: ${rect.left}px;
            width: ${rect.width}px;
            height: 2px;
            background: linear-gradient(90deg, transparent, #00ff00, transparent);
            z-index: 1001;
            animation: scan 2s ease-in-out;
        `;
        const effectsContainer = document.getElementById('criminal-effects');
        if (effectsContainer) {
            effectsContainer.appendChild(scanLine);
            setTimeout(() => {
                if (scanLine.parentNode) {
                    scanLine.parentNode.removeChild(scanLine);
                }
            }, 2000);
        }
    }
    createAtmosphericEffects() {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–∏—Ü –∫—Ä–æ–≤–∏
        for (let i = 0; i < 5; i++) {
            setTimeout(() => {
                this.createBloodParticle();
            }, i * 100);
        }
    }
    createBloodParticle() {
        const particle = document.createElement('div');
        const size = Math.random() * 4 + 2;
        const x = Math.random() * window.innerWidth;
        const y = -10;
        particle.style.cssText = `
            position: absolute;
            top: ${y}px;
            left: ${x}px;
            width: ${size}px;
            height: ${size}px;
            background: #8B0000;
            border-radius: 50%;
            pointer-events: none;
            z-index: 999;
        `;
        const effectsContainer = document.getElementById('criminal-effects');
        if (effectsContainer) {
            effectsContainer.appendChild(particle);
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è
            let currentY = y;
            const gravity = 0.5;
            let velocity = 0;
            const animate = () => {
                velocity += gravity;
                currentY += velocity;
                particle.style.top = `${currentY}px`;
                if (currentY < window.innerHeight + 10) {
                    requestAnimationFrame(animate);
                }
                else {
                    if (particle.parentNode) {
                        particle.parentNode.removeChild(particle);
                    }
                }
            };
            requestAnimationFrame(animate);
        }
    }
    // =========================================================================
    // –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´
    // =========================================================================
    getUserDisplayName(user) {
        console.log('üë§ –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);
        return user.name || `${user.firstName || '–î–µ—Ç–µ–∫—Ç–∏–≤'} ${user.lastName || ''}`.trim();
    }
    updateElement(id, value) {
        console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç:`, { id, value });
        const element = document.getElementById(id);
        if (element) {
            console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º:`, id, `—Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${element.textContent}" ‚Üí –Ω–æ–≤–æ–µ: "${value}"`);
            element.textContent = value;
        } else {
            console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:`, id);
            console.log(`üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:`, Array.from(document.querySelectorAll('[id]')).map(el => el.id));
        }
    }
    setLoading(loading) {
        this.state.isLoading = loading;
        const loadingOverlay = document.getElementById('loading-overlay');
        if (loadingOverlay) {
            loadingOverlay.style.display = loading ? 'flex' : 'none';
        }
    }
    showError(message) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram haptic feedback
        authService.hapticFeedback('error');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        const errorContainer = document.getElementById('error-container');
        if (errorContainer) {
            errorContainer.innerHTML = `
                <div class="error-message">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-text">${message}</div>
                    <button class="retry-button" onclick="location.reload()">
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
            errorContainer.style.display = 'block';
        }
    }
    showAuthError() {
        this.showError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ Telegram.');
    }
    // =========================================================================
    // –ü–†–û–í–ï–†–ö–ê DOM
    // =========================================================================
    checkDOMElements() {
        const requiredElements = [
            'user-name',
            'user-total-score',
            'user-games-played',
            'user-accuracy',
            'user-level',
            'achievements-grid',
            'leaderboard-content'
        ];
        const missing = requiredElements.filter(id => !document.getElementById(id));
        if (missing.length > 0) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã:', missing);
            return false;
        }
        return true;
    }
    // =========================================================================
    // –°–ö–ï–õ–ï–¢–û–ù–´ –ó–ê–ì–†–£–ó–ö–ò
    // =========================================================================
    showProfileSkeleton() {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–∫–µ–ª–µ—Ç–æ–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
        const skeletonHTML = `
            <div class="skeleton-loader">
                <div class="skeleton-item skeleton-avatar"></div>
                <div class="skeleton-item skeleton-text"></div>
                <div class="skeleton-item skeleton-text short"></div>
            </div>
        `;
        const profileContainer = document.getElementById('profile-info');
        if (profileContainer) {
            profileContainer.innerHTML = skeletonHTML;
        }
    }
    hideProfileSkeleton() {
        // –£–¥–∞–ª—è–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const skeleton = document.querySelector('.skeleton-loader');
        if (skeleton) {
            skeleton.remove();
        }
    }
    showLeaderboardSkeleton() {
        const container = document.getElementById('leaderboard-content');
        if (!container)
            return;
        const skeletonHTML = Array.from({ length: 5 }, (_, i) => `
            <div class="leaderboard-entry skeleton">
                <div class="skeleton-item position">#${i + 1}</div>
                <div class="skeleton-item user-avatar"></div>
                <div class="skeleton-item user-name"></div>
                <div class="skeleton-item score"></div>
            </div>
        `).join('');
        container.innerHTML = skeletonHTML;
    }
    renderEmptyLeaderboard() {
        const container = document.getElementById('leaderboard-content');
        if (!container)
            return;
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üèÜ</div>
                <div class="empty-text">–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç</div>
                <div class="empty-subtitle">–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>
            </div>
        `;
    }
    // =========================================================================
    // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    // =========================================================================
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        document.addEventListener('click', (e) => {
            const target = e.target;
            if (target.closest('.achievement-card')) {
                const card = target.closest('.achievement-card');
                const achievementId = card.dataset.achievementId;
                if (achievementId) {
                    this.showAchievementModal(achievementId);
                }
            }
        });
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideAchievementModal();
            }
        });
    }
    showAchievementModal(achievementId) {
        const achievement = this.state.achievements.find(a => a.id === achievementId);
        if (!achievement)
            return;
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'achievement-modal';
        modal.innerHTML = `
            <div class="modal-overlay">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>${achievement.name}</h2>
                        <button class="modal-close">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="achievement-large-icon">${achievement.icon}</div>
                        <p class="achievement-description">${achievement.description}</p>
                        <div class="achievement-rarity rarity-${achievement.rarity}">${achievement.rarity}</div>
                        ${achievement.isUnlocked ?
                `<div class="unlock-status unlocked">–ü–æ–ª—É—á–µ–Ω–æ!</div>` :
                `<div class="unlock-status locked">
                                <div class="progress-info">–ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.round(achievement.progress || 0)}%</div>
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: ${achievement.progress || 0}%"></div>
                                </div>
                            </div>`}
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('click', (e) => {
            if (e.target === modal.querySelector('.modal-overlay') ||
                e.target === modal.querySelector('.modal-close')) {
                this.hideAchievementModal();
            }
        });
        // Haptic feedback
        authService.hapticFeedback('light');
    }
    hideAchievementModal() {
        const modal = document.querySelector('.achievement-modal');
        if (modal) {
            modal.remove();
        }
    }
    // =========================================================================
    // –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø
    // =========================================================================
    startPeriodicUpdates() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.updateInterval = window.setInterval(async () => {
            try {
                await this.loadProfileData();
            }
            catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        }, 30000);
    }
    // =========================================================================
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // =========================================================================
    async loadUserAvatar(telegramId) {
        try {
            const avatarUrl = await apiService.getUserAvatar(telegramId);
            if (avatarUrl) {
                const avatarElement = document.querySelector('.user-avatar img');
                if (avatarElement) {
                    avatarElement.src = avatarUrl;
                }
            }
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
        }
    }
    addAchievementInteractivity() {
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        const cards = document.querySelectorAll('.achievement-card');
        cards.forEach(card => {
            card.addEventListener('mouseenter', () => {
                authService.hapticFeedback('light');
            });
        });
    }
    updateUserPosition(data) {
        const positionElement = document.getElementById('user-position');
        if (positionElement && data.currentUser && data.currentUser.rank) {
            positionElement.textContent = `–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: #${data.currentUser.rank}`;
            console.log('üìà –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data.currentUser.rank);
        } else {
            console.log('üìà –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    }
    updateRankDisplay(level, rank) {
        const rankElement = document.getElementById('rank-display');
        if (rankElement) {
            rankElement.innerHTML = `
                <div class="rank-icon">${rank.icon}</div>
                <div class="rank-info">
                    <div class="rank-name">${rank.name}</div>
                    <div class="rank-level">–£—Ä–æ–≤–µ–Ω—å ${level}</div>
                </div>
            `;
        }
    }
    // =========================================================================
    // –î–ï–°–¢–†–£–ö–¢–û–†
    // =========================================================================
    destroy() {
        if (this.effectsInterval) {
            clearInterval(this.effectsInterval);
        }
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }
        // –û—á–∏—â–∞–µ–º –∫—ç—à API
        apiService.clearCache();
        console.log('üßπ Profile —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
    // =========================================================================
    // –ì–ï–¢–¢–ï–†–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    // =========================================================================
    getState() {
        return this.state;
    }
    isReady() {
        return this.isInitialized;
    }
}
// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üéØ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å...');
    window.criminalProfile = new CriminalTrustProfile();
});
// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default CriminalTrustProfile;
