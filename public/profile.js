/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ñ–∏–ª—è "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ"
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

// –û–±—ä–µ–∫—Ç Telegram WebApp –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram Mini Apps
let tg = null;

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function createAuthenticatedUrl(baseUrl) {
    const token = localStorage.getItem('token') || localStorage.getItem('auth_token');
    let url = baseUrl;

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ URL
    if (token) {
        url += `?token=${encodeURIComponent(token)}`;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ Telegram WebApp, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Ç–æ–∂–µ
    if (window.Telegram?.WebApp?.initData) {
        const separator = url.includes('?') ? '&' : '?';
        url += `${separator}initData=${encodeURIComponent(window.Telegram.WebApp.initData)}`;
    }

    return url;
}

/**
 * –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const ProfileManager = {
    /**
     * –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    elements: {
        profileName: document.querySelector('.profile-name'),
        profileBadge: document.querySelector('.profile-badge'),
        profileId: document.querySelector('.profile-id span'),

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        investigationsCount: document.querySelector('.stat-card[data-tag="–û–ü–´–¢"] .stat-value'),
        solvedCases: document.querySelector('.stat-card[data-tag="–£–°–ü–ï–•"] .stat-value'),
        winStreak: document.querySelector('.stat-card[data-tag="–°–ï–†–ò–Ø"] .stat-value'),
        accuracy: document.querySelector('.stat-card[data-tag="–¢–û–ß–ù–û–°–¢–¨"] .stat-value'),

        // –õ–∏–¥–µ—Ä–±–æ—Ä–¥
        leaderboardRows: document.querySelectorAll('.leaderboard-row'),
        leaderboardTabs: document.querySelectorAll('.tab-button'),

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        mainButton: document.querySelector('.nav-button:not(.primary)'),
        newGameButton: document.querySelector('.nav-button.primary'),

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements: document.querySelectorAll('.achievement')
    },

    /**
     * –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
     */
    profileData: null,

    /**
     * –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    state: {
        token: null,
        isLoading: false,
        currentLeaderboardPeriod: 'week',
        isAuthenticated: false,
        error: null
    },

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
     */
    async init() {
        try {
            console.log('üïµÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–∞...');

            this.showLoading();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
            if (tg) {
                tg.ready();
                tg.expand();
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            await this.checkAuth();

            if (this.state.isAuthenticated) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
                await this.loadProfile();
                await this.loadAchievements();
                await this.loadLeaderboard();

                this.showContent();
            } else {
                this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message);
        }
    },

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async checkAuth() {
        try {
            console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL –∏–ª–∏ localStorage
            const urlParams = new URLSearchParams(window.location.search);
            let token = urlParams.get('token') || localStorage.getItem('token') || localStorage.getItem('auth_token');

            if (!token && tg?.initData) {
                // –ü—ã—Ç–∞–µ–º—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
                const response = await fetch('/api/auth/telegram', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        initData: tg.initData
                    })
                });

                if (response.ok) {
                    const data = await response.json();
                    token = data.token;
                    localStorage.setItem('token', token);
                }
            }

            if (token) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                const response = await fetch('/api/auth/verify', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    this.state.token = token;
                    this.state.isAuthenticated = true;
                    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                } else {
                    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
                    localStorage.removeItem('token');
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            this.state.isAuthenticated = false;
        }
    },

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadProfile() {
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...');

            const response = await fetch('/api/user/profile', {
                headers: {
                    'Authorization': `Bearer ${this.state.token}`
                }
            });

            if (!response.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
            }

            const profileData = await response.json();
            this.profileData = profileData;

            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', profileData);

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateProfileUI(profileData);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            throw error;
        }
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
     */
    updateProfileUI(data) {
        if (!data) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        if (this.elements.profileName) {
            this.elements.profileName.textContent = data.basic?.firstName || data.username || '–î–µ—Ç–µ–∫—Ç–∏–≤';
        }

        if (this.elements.profileBadge) {
            this.elements.profileBadge.textContent = data.rank?.current || '–ù–û–í–ò–ß–û–ö';
        }

        if (this.elements.profileId) {
            this.elements.profileId.textContent = data.telegramId || '-';
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.loadUserAvatar();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
        if (this.elements.investigationsCount) {
            this.elements.investigationsCount.textContent = data.stats?.investigations !== undefined ?
                data.stats.investigations : '0';
        }

        if (this.elements.solvedCases) {
            this.elements.solvedCases.textContent = data.stats?.solvedCases !== undefined ?
                data.stats.solvedCases : '0';
        }

        if (this.elements.winStreak) {
            this.elements.winStreak.textContent = data.stats?.winStreak !== undefined ?
                data.stats.winStreak : '0';
        }

        if (this.elements.accuracy) {
            const accuracyValue = data.stats?.accuracy !== undefined ? data.stats.accuracy : 0;
            this.elements.accuracy.textContent = `${accuracyValue}%`;
        }
    },

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
     */
    async loadUserAvatar() {
        const avatarImage = document.getElementById('avatar-image');
        const avatarPlaceholder = document.getElementById('avatar-placeholder');
        const avatarLoading = document.getElementById('avatar-loading');

        if (!avatarImage || !avatarPlaceholder || !avatarLoading) {
            return;
        }

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            avatarLoading.style.display = 'block';
            avatarPlaceholder.style.opacity = '0.3';

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            const token = localStorage.getItem('token') || localStorage.getItem('auth_token');
            if (!token) {
                throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Å —Å–µ—Ä–≤–µ—Ä–∞
            const response = await fetch('/api/user/avatar', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            }

            const data = await response.json();

            if (data.status === 'success' && data.data.hasAvatar && data.data.avatarUrl) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                const img = new Image();

                img.onload = () => {
                    // –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                    avatarImage.src = data.data.avatarUrl;
                    avatarImage.style.display = 'block';
                    avatarPlaceholder.style.display = 'none';
                    avatarLoading.style.display = 'none';

                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
                    avatarImage.style.opacity = '0';
                    setTimeout(() => {
                        avatarImage.style.transition = 'opacity 0.3s ease';
                        avatarImage.style.opacity = '1';
                    }, 50);
                };

                img.onerror = () => {
                    // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    this.showAvatarPlaceholder();
                };

                // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                img.src = data.data.avatarUrl;

            } else {
                // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞
                this.showAvatarPlaceholder();
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞:', error);
            this.showAvatarPlaceholder();
        }
    },

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞
     */
    showAvatarPlaceholder() {
        const avatarImage = document.getElementById('avatar-image');
        const avatarPlaceholder = document.getElementById('avatar-placeholder');
        const avatarLoading = document.getElementById('avatar-loading');

        if (avatarImage) {
            avatarImage.style.display = 'none';
        }

        if (avatarPlaceholder) {
            avatarPlaceholder.style.display = 'block';
            avatarPlaceholder.style.opacity = '1';
        }

        if (avatarLoading) {
            avatarLoading.style.display = 'none';
        }
    },

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
     */
    async loadLeaderboard(period = 'week') {
        try {
            if (!this.state.token) {
                throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
            const response = await fetch(`/api/user/leaderboard?period=${period}`, {
                headers: {
                    'Authorization': `Bearer ${this.state.token}`
                }
            });

            if (!response.ok) {
                if (response.status === 401 || response.status === 403) {
                    // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
                }
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: ${response.status} ${response.statusText}`);
            }

            let data;
            try {
                data = await response.json();
            } catch (parseError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', parseError);
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤');
            }

            if (data.status !== 'success' || !data.data) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
            this.updateLeaderboardUI(data.data);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', error);

            // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            const tableContainer = document.querySelector('.leaderboard-table');
            if (tableContainer) {
                const headerRow = tableContainer.querySelector('.leaderboard-header');
                tableContainer.innerHTML = '';
                if (headerRow) {
                    tableContainer.appendChild(headerRow);
                }

                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Ç–∞–±–ª–∏—Ü—É
                const errorRow = document.createElement('div');
                errorRow.className = 'leaderboard-row';
                errorRow.innerHTML = `
                    <div class="rank-cell">-</div>
                    <div class="user-cell" style="color: var(--blood-red);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
                    <div class="score-cell">-</div>
                `;
                tableContainer.appendChild(errorRow);
            }
        }
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
     */
    updateLeaderboardUI(data) {
        const leaderboardContent = document.getElementById('leaderboard-content');
        if (!leaderboardContent) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
        if (!data || !data.entries || data.entries.length === 0) {
            leaderboardContent.innerHTML = `
                <div class="empty-leaderboard">
                    <div class="empty-leaderboard-icon">üèÜ</div>
                    <div class="empty-leaderboard-text">–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç</div>
                    <div class="empty-leaderboard-subtext">–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º –¥–µ—Ç–µ–∫—Ç–∏–≤–æ–º!</div>
                </div>
            `;
            return;
        }

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        leaderboardContent.innerHTML = '';

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        const currentUserTelegramId = this.profileData?.telegramId;

        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        data.entries.forEach((entry, index) => {
            const row = document.createElement('div');
            row.className = 'leaderboard-row';

            // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (entry.telegramId === currentUserTelegramId) {
                row.classList.add('current-user');
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—á–∫–∏
            const formattedScore = new Intl.NumberFormat('ru-RU').format(entry.totalScore || 0);

            row.innerHTML = `
                <div class="rank-cell">${entry.rank || (index + 1)}</div>
                <div class="user-cell">${entry.name || entry.username || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤'}</div>
                <div class="score-cell">${formattedScore}</div>
            `;

            leaderboardContent.appendChild(row);
        });
    },

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadAchievements() {
        try {
            console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');

            const response = await fetch('/api/user/achievements', {
                headers: {
                    'Authorization': `Bearer ${this.state.token}`
                }
            });

            if (!response.ok) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è');
                return;
            }

            const achievements = await response.json();
            this.renderAchievements(achievements);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        }
    },

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     * @param {Array} achievements - –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    renderAchievements(achievements) {
        if (!this.elements.achievements) return;

        // –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∏–∫–æ–Ω–∫–∞–º–∏
        const baseAchievements = [
            { id: 'first_case', name: '–ü–ï–†–í–û–ï –î–ï–õ–û', icon: 'üîç', locked: true },
            { id: 'rookie', name: '–ù–û–í–ò–ß–û–ö', icon: 'üéñÔ∏è', locked: true },
            { id: 'expert', name: '–≠–ö–°–ü–ï–†–¢', icon: 'üèÜ', locked: true },
            { id: 'sharp_eye', name: '–û–°–¢–†–´–ô –ì–õ–ê–ó', icon: 'üëÅÔ∏è', locked: true },
            { id: 'serial_detective', name: '–°–ï–†–ò–ô–ù–´–ô –°–´–©–ò–ö', icon: 'üïµÔ∏è', locked: true },
            { id: 'maniac', name: '–ú–ê–ù–¨–Ø–ö', icon: '‚ö°', locked: true }
        ];

        // –û—Ç–º–µ—á–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements.forEach(userAchievement => {
            const achievement = baseAchievements.find(a => a.id === userAchievement.id);
            if (achievement) {
                achievement.locked = false;
                achievement.name = userAchievement.name || achievement.name;
            }
        });

        // –†–µ–Ω–¥–µ—Ä–∏–º
        this.elements.achievements.forEach((element, index) => {
            const achievement = baseAchievements[index];
            const iconElement = element.querySelector('.achievement-icon');
            const nameElement = element.querySelector('.achievement-name');

            if (iconElement) {
                iconElement.innerHTML = achievement.icon;
            }

            if (nameElement) {
                nameElement.textContent = achievement.name;
            }

            element.classList.toggle('locked', achievement.locked);
        });
    },

    /**
     * –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    showLoading() {
        this.state.isLoading = true;
        this.state.error = false;

        if (this.elements.loadingScreen) this.elements.loadingScreen.classList.remove('hidden');
        if (this.elements.mainContent) this.elements.mainContent.classList.add('hidden');
        if (this.elements.errorScreen) this.elements.errorScreen.classList.add('hidden');
    },

    /**
     * –û–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    showContent() {
        this.state.isLoading = false;
        this.state.error = false;

        if (this.elements.loadingScreen) this.elements.loadingScreen.classList.add('hidden');
        if (this.elements.mainContent) this.elements.mainContent.classList.remove('hidden');
        if (this.elements.errorScreen) this.elements.errorScreen.classList.add('hidden');
    },

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    showError(message) {
        this.state.error = true;
        this.state.errorMessage = message;

        if (this.elements.errorMessage) this.elements.errorMessage.textContent = message;

        if (this.elements.loadingScreen) this.elements.loadingScreen.classList.add('hidden');
        if (this.elements.mainContent) this.elements.mainContent.classList.add('hidden');
        if (this.elements.errorScreen) this.elements.errorScreen.classList.remove('hidden');
    },

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–æ–≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        this.elements.leaderboardTabs.forEach(tab => {
            tab.addEventListener('click', (event) => {
                // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å active —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
                this.elements.leaderboardTabs.forEach(t => t.classList.remove('active'));
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å active –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∞–±—É
                tab.classList.add('active');

                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-period –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                const period = tab.dataset.period || tab.textContent.trim().toLowerCase();
                this.state.currentLeaderboardPeriod = period;

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                this.loadLeaderboard(period);

                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤ Telegram
                if (tg && tg.HapticFeedback) {
                    tg.HapticFeedback.impactOccurred('medium');
                }
            });
        });

        // –ü—Ä—è–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const mainButton = document.querySelector('[data-action="goToMain"]');
        const newGameButton = document.querySelector('[data-action="startNewGame"]');

        if (mainButton) {
            mainButton.addEventListener('click', (event) => {
                event.preventDefault();
                event.stopPropagation();

                // –¢–∞–∫—Ç–∏–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
                if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
                    window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
                }

                window.location.href = createAuthenticatedUrl('/');
            });
        } else {
            console.error('–ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–∞—è" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        if (newGameButton) {
            newGameButton.addEventListener('click', (event) => {
                event.preventDefault();
                event.stopPropagation();

                // –¢–∞–∫—Ç–∏–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
                if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
                    window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
                }

                window.location.href = createAuthenticatedUrl('/game.html');
            });
        } else {
            console.error('–ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–æ–µ –¥–µ–ª–æ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ fallback
        document.addEventListener('click', (event) => {
            const actionElement = event.target.closest('[data-action]');
            if (!actionElement) return;

            const action = actionElement.getAttribute('data-action');

            // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (action === 'goToMain' || action === 'startNewGame') {
                return; // –≠—Ç–∏ –∫–Ω–æ–ø–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ
            }

            // –¢–∞–∫—Ç–∏–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
                window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
            }
        });
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–∞...');
    new ProfileManager();
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ Lucide
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }, 100);
}); 