/**
 * –î–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—å–µ –∞–≥–µ–Ω—Ç–∞
 * –ú—Ä–∞—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –∏ –Ω—É–∞—Ä–Ω—ã–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
 */

// Telegram WebApp API
let tg = window.Telegram?.WebApp;

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫—Ä–æ–≤–∞–≤—ã—Ö —á–∞—Å—Ç–∏—Ü
 */
function createBloodExplosion(element, type = 'solved') {
    const colors = {
        solved: ['#8B0000', '#DC143C', '#FFD700'],
        failed: ['#FF0040', '#FF6600', '#FFBF00'],
        clue: ['#8B0000', '#4A0E0E', '#DC143C']
    };

    const particleCount = 12;
    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.style.cssText = `
            position: absolute;
            width: 8px;
            height: 8px;
            background: ${colors[type][Math.floor(Math.random() * colors[type].length)]};
            border-radius: 50%;
            pointer-events: none;
            z-index: 2000;
            box-shadow: 0 0 15px currentColor;
        `;

        const rect = element.getBoundingClientRect();
        particle.style.left = `${rect.left + rect.width / 2}px`;
        particle.style.top = `${rect.top + rect.height / 2}px`;

        document.body.appendChild(particle);

        // –ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        const angle = (Math.PI * 2 * i) / particleCount;
        const velocity = 80 + Math.random() * 40;
        let opacity = 1;
        let scale = 1;
        let rotation = 0;

        function animateBloodParticle() {
            const x = Math.cos(angle) * velocity * (1 - opacity);
            const y = Math.sin(angle) * velocity * (1 - opacity);

            particle.style.transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotation}deg)`;
            particle.style.opacity = opacity;

            opacity -= 0.015;
            scale += 0.02;
            rotation += 8;

            if (opacity > 0) {
                requestAnimationFrame(animateBloodParticle);
            } else {
                document.body.removeChild(particle);
            }
        }

        requestAnimationFrame(animateBloodParticle);
    }
}

/**
 * –î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Å –º—Ä–∞—á–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
 */
function criminalCounter(element, targetValue, duration = 1500) {
    if (!element) return;

    const start = parseInt(element.textContent) || 0;
    const target = parseInt(targetValue) || 0;
    const startTime = performance.now();

    function updateCounter(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);

        // –î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π easing —Å –º—Ä–∞—á–Ω—ã–º–∏ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏—è–º–∏
        const easeOut = 1 - Math.pow(1 - progress, 4);
        const fluctuation = Math.sin(progress * 20) * 0.1 * (1 - progress);
        const currentValue = Math.round(start + (target - start) * (easeOut + fluctuation));

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≥–ª–∏—Ç—á–∏ —É–ª–∏–∫
        if (Math.random() < 0.1 && progress < 0.9) {
            element.textContent = Math.random() > 0.5 ? '‚ñà‚ñà‚ñà' : '‚ñì‚ñì‚ñì';
            setTimeout(() => {
                element.textContent = element.id === 'stat-accuracy' ? `${currentValue}%` : currentValue;
            }, 50);
        } else {
            element.textContent = element.id === 'stat-accuracy' ? `${currentValue}%` : currentValue;
        }

        // –ö—Ä–æ–≤–∞–≤–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if (progress < 1) {
            element.style.textShadow = `0 0 ${20 + Math.sin(progress * 10) * 10}px var(--blood-red)`;
            requestAnimationFrame(updateCounter);
        } else {
            element.style.textShadow = '0 0 20px var(--crimson)';
        }
    }

    requestAnimationFrame(updateCounter);
}

/**
 * –≠—Ñ—Ñ–µ–∫—Ç –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–π –ø–µ—á–∞—Ç–Ω–æ–π –º–∞—à–∏–Ω–∫–∏
 */
function detectiveTypewriter(element, text, speed = 80) {
    if (!element) return;

    element.textContent = '';
    element.style.borderRight = '3px solid var(--crimson)';
    element.style.animation = 'name-glow 1s ease-in-out infinite';

    let i = 0;
    const typeInterval = setInterval(() => {
        if (i < text.length) {
            // –°–ª—É—á–∞–π–Ω—ã–µ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            if (Math.random() < 0.1) {
                element.textContent = text.substring(0, i) + '‚ñì';
                setTimeout(() => {
                    element.textContent = text.substring(0, i + 1);
                }, 30);
            } else {
                element.textContent = text.substring(0, i + 1);
            }
            i++;
        } else {
            clearInterval(typeInterval);
            setTimeout(() => {
                element.style.borderRight = 'none';
            }, 1000);
        }
    }, speed);

    // –ú—Ä–∞—á–Ω–æ–µ –º–µ—Ä—Ü–∞–Ω–∏–µ
    element.addEventListener('mouseover', () => {
        element.style.filter = 'hue-rotate(30deg) brightness(1.2)';
        setTimeout(() => {
            element.style.filter = '';
        }, 200);
    });
}

/**
 * –ö—Ä–æ–≤–∞–≤—ã–π –≥–ª–∏—Ç—á —ç—Ñ—Ñ–µ–∫—Ç
 */
function triggerBloodGlitch(element, duration = 300) {
    if (!element) return;

    element.classList.add('blood-glitch');

    // –°–ª—É—á–∞–π–Ω—ã–µ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const originalText = element.textContent;
    const glitchChars = '‚ñì‚ñí‚ñë‚ñà‚ñÑ‚ñå‚ñê‚ñÜ‚ñá';

    let glitchInterval = setInterval(() => {
        if (Math.random() < 0.3) {
            const randomChars = Array(originalText.length).fill().map(() =>
                glitchChars[Math.floor(Math.random() * glitchChars.length)]
            ).join('');
            element.textContent = randomChars;

            setTimeout(() => {
                element.textContent = originalText;
            }, 50);
        }
    }, 100);

    setTimeout(() => {
        clearInterval(glitchInterval);
        element.classList.remove('blood-glitch');
        element.textContent = originalText;
    }, duration);
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const CaseState = {
    investigating: false,
    error: false,
    errorMessage: '',
    detectiveData: null,
    token: null,
    isAuthenticated: false,
    crimeScene: true
};

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const CaseElements = {
    loadingScreen: null,
    mainContent: null,
    errorScreen: null,
    errorMessage: null,

    // –î–æ—Å—å–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞
    detectiveName: null,
    detectiveRank: null,
    reputationLevel: null,
    reputationCategory: null,

    // –ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    statInvestigations: null,
    statSolved: null,
    statAccuracy: null,
    statScore: null,

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    achievementsContainer: null,
    leaderboardContainer: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function initCaseElements() {
    CaseElements.loadingScreen = document.getElementById('loading-screen');
    CaseElements.mainContent = document.getElementById('main-content');
    CaseElements.errorScreen = document.getElementById('error-screen');
    CaseElements.errorMessage = document.getElementById('error-message');

    // –î–æ—Å—å–µ
    CaseElements.detectiveName = document.getElementById('detective-name');
    CaseElements.detectiveRank = document.getElementById('detective-rank');
    CaseElements.reputationLevel = document.getElementById('reputation-level');
    CaseElements.reputationCategory = document.getElementById('reputation-category');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    CaseElements.statInvestigations = document.getElementById('stat-investigations');
    CaseElements.statSolved = document.getElementById('stat-solved');
    CaseElements.statAccuracy = document.getElementById('stat-accuracy');
    CaseElements.statScore = document.getElementById('stat-score');

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    CaseElements.achievementsContainer = document.getElementById('achievements-container');
    CaseElements.leaderboardContainer = document.getElementById('leaderboard-container');
}

/**
 * –î–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—å–µ
 */
class CriminalProfileManager {
    constructor() {
        this.init();
    }

    async init() {
        try {
            console.log('üïµÔ∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—å–µ...');

            initCaseElements();
            this.showInvestigation();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp —Å –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            if (tg) {
                tg.ready();
                tg.expand();

                // –ú—Ä–∞—á–Ω–∞—è —Ç–µ–º–∞
                if (tg.themeParams) {
                    document.documentElement.style.setProperty('--tg-bg', tg.themeParams.bg_color || '#0D0D0D');
                    document.documentElement.style.setProperty('--tg-text', tg.themeParams.text_color || '#F5F5DC');
                }

                // –î–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                if (tg.BackButton) {
                    tg.BackButton.show();
                    tg.BackButton.onClick(() => {
                        this.triggerCrimeSceneTransition();
                        if (tg.HapticFeedback) {
                            tg.HapticFeedback.impactOccurred('heavy');
                        }
                        setTimeout(() => window.history.back(), 300);
                    });
                }
            }

            // –ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            await this.detectiveAuth();

            if (CaseState.isAuthenticated) {
                await this.loadDetectiveDossier();
                await this.loadCriminalAchievements();
                await this.loadDetectiveRanking();

                this.showCaseContent();
                this.initCrimeSceneInteractivity();
            } else {
                this.showError('–î–æ—Å—Ç—É–ø –∫ –¥–æ—Å—å–µ –∑–∞–ø—Ä–µ—â–µ–Ω');
            }

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error);
            this.showError('–°–∏—Å—Ç–µ–º–∞ –≤–∑–ª–æ–º–∞–Ω–∞: ' + error.message);
        }
    }

    async detectiveAuth() {
        try {
            console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–∏–≤–∞...');

            const urlParams = new URLSearchParams(window.location.search);
            let token = urlParams.get('token') || localStorage.getItem('token') || localStorage.getItem('auth_token');

            if (!token && tg?.initData) {
                const response = await fetch('/api/auth/telegram', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ initData: tg.initData })
                });

                if (response.ok) {
                    const data = await response.json();
                    token = data.token;
                    localStorage.setItem('token', token);
                }
            }

            if (token) {
                const response = await fetch('/api/auth/verify', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (response.ok) {
                    CaseState.token = token;
                    CaseState.isAuthenticated = true;
                    console.log('‚úÖ –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');
                } else {
                    console.log('‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ');
                    localStorage.removeItem('token');
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:', error);
            CaseState.isAuthenticated = false;
        }
    }

    async loadDetectiveDossier() {
        try {
            console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—å–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞...');

            const response = await fetch('/api/user/profile', {
                headers: { 'Authorization': `Bearer ${CaseState.token}` }
            });

            if (!response.ok) {
                throw new Error('–î–æ—Å—å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
            }

            const detectiveData = await response.json();
            CaseState.detectiveData = detectiveData;

            console.log('‚úÖ –î–æ—Å—å–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', detectiveData);
            this.updateDetectiveUI(detectiveData);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—å–µ:', error);
            throw error;
        }
    }

    updateDetectiveUI(data) {
        // –î–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–µ –∏–º—è
        if (CaseElements.detectiveName) {
            const name = (data.basic?.firstName || data.username || '–î–ï–¢–ï–ö–¢–ò–í').toUpperCase();
            detectiveTypewriter(CaseElements.detectiveName, name);
        }

        // –î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–Ω–≥
        if (CaseElements.detectiveRank) {
            CaseElements.detectiveRank.textContent = data.rank?.current || '–ù–û–í–ò–ß–û–ö';
            createBloodExplosion(CaseElements.detectiveRank, 'solved');
        }

        // –ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è
        if (CaseElements.reputationLevel) {
            criminalCounter(CaseElements.reputationLevel, data.reputation?.level || 0, 2000);
        }

        if (CaseElements.reputationCategory) {
            CaseElements.reputationCategory.textContent = data.reputation?.category || '–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–û';
        }

        // –ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –º—Ä–∞—á–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        const stats = data.stats || {};

        if (CaseElements.statInvestigations) {
            criminalCounter(CaseElements.statInvestigations, stats.investigations || 0);
        }

        if (CaseElements.statSolved) {
            criminalCounter(CaseElements.statSolved, stats.solvedCases || 0);
        }

        if (CaseElements.statAccuracy) {
            criminalCounter(CaseElements.statAccuracy, Math.round(stats.accuracy || 0));
        }

        if (CaseElements.statScore) {
            criminalCounter(CaseElements.statScore, stats.totalScore || 0, 2500);
        }
    }

    async loadCriminalAchievements() {
        try {
            console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ —É–ª–∏–∫ –∏ –Ω–∞–≥—Ä–∞–¥...');

            const response = await fetch('/api/user/achievements', {
                headers: { 'Authorization': `Bearer ${CaseState.token}` }
            });

            if (!response.ok) {
                console.log('‚ö†Ô∏è –£–ª–∏–∫–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
                return;
            }

            const achievements = await response.json();
            this.renderForensicEvidence(achievements);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ª–∏–∫:', error);
        }
    }

    renderForensicEvidence(achievements) {
        if (!CaseElements.achievementsContainer) return;

        const forensicEvidence = [
            { id: 'first_case', name: '–ü–ï–†–í–û–ï –î–ï–õ–û', icon: 'üîç', locked: true, description: '–ù–∞—á–∞–ª–æ –∫–∞—Ä—å–µ—Ä—ã' },
            { id: 'rookie', name: '–ù–û–í–ò–ß–û–ö', icon: 'üïµÔ∏è', locked: true, description: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏' },
            { id: 'expert', name: '–≠–ö–°–ü–ï–†–¢', icon: 'üíÄ', locked: true, description: '–û–ø—ã—Ç–Ω—ã–π –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç' },
            { id: 'sharp_eye', name: '–û–°–¢–†–´–ô –ì–õ–ê–ó', icon: 'üëÅÔ∏è', locked: true, description: '–ó–∞–º–µ—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏' },
            { id: 'serial_detective', name: '–°–ï–†–ò–ô–ù–´–ô –°–´–©–ò–ö', icon: 'üîó', locked: true, description: '–°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–µ–ª–∞' },
            { id: 'maniac', name: '–ü–ï–†–§–ï–ö–¶–ò–û–ù–ò–°–¢', icon: 'üéØ', locked: true, description: '–ò–¥–µ–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å' }
        ];

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–ª–∏–∫
        achievements.forEach(userAchievement => {
            const evidence = forensicEvidence.find(e => e.id === userAchievement.id);
            if (evidence) {
                evidence.locked = false;
                evidence.name = userAchievement.name || evidence.name;
            }
        });

        // –†–µ–Ω–¥–µ—Ä —Å –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        CaseElements.achievementsContainer.innerHTML = forensicEvidence.map((evidence, index) => `
            <div class="achievement-card hologram-effect interactive-hover ${evidence.locked ? '' : 'unlocked'}" 
                 title="${evidence.description}"
                 style="animation-delay: ${index * 0.15}s">
                <div class="achievement-icon">${evidence.icon}</div>
                <div class="achievement-name">${evidence.locked ? '‚ñì‚ñì‚ñì' : evidence.name}</div>
            </div>
        `).join('');

        // –ö—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        setTimeout(() => {
            const cards = CaseElements.achievementsContainer.querySelectorAll('.achievement-card');
            cards.forEach(card => {
                card.addEventListener('click', () => {
                    if (card.classList.contains('unlocked')) {
                        createForensicExplosion(card, 'solved');
                        triggerForensicGlitch(card);
                        if (tg?.HapticFeedback) {
                            tg.HapticFeedback.impactOccurred('heavy');
                        }
                    }
                });
            });
        }, 300);
    }

    async loadDetectiveRanking() {
        try {
            console.log('üëë –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–µ—Ç–µ–∫—Ç–∏–≤–æ–≤...');

            const response = await fetch('/api/leaderboard/week', {
                headers: { 'Authorization': `Bearer ${CaseState.token}` }
            });

            if (!response.ok) {
                console.log('‚ö†Ô∏è –†–µ–π—Ç–∏–Ω–≥ –¥–µ—Ç–µ–∫—Ç–∏–≤–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                return;
            }

            const leaderboard = await response.json();
            this.renderDetectiveLeaderboard(leaderboard);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        }
    }

    renderDetectiveLeaderboard(data) {
        if (!CaseElements.leaderboardContainer) return;

        const leaders = data.leaders || [];
        const currentUser = CaseState.detectiveData;

        if (leaders.length === 0) {
            CaseElements.leaderboardContainer.innerHTML = `
                <div style="text-align: center; padding: 3rem; color: var(--bone-white);">
                    <div style="font-size: 4rem; margin-bottom: 1rem;">üïµÔ∏è</div>
                    <p style="font-family: 'Special Elite', monospace; text-transform: uppercase; letter-spacing: 2px;">
                        –î–û–°–¨–ï –ó–ê–°–ï–ö–†–ï–ß–ï–ù–û
                    </p>
                </div>
            `;
            return;
        }

        CaseElements.leaderboardContainer.innerHTML = leaders.map((leader, index) => {
            const isCurrentUser = currentUser && leader.userId === currentUser.id;
            const rankIcons = ['ü•á', 'ü•à', 'ü•â'];
            const rankIcon = rankIcons[index] || 'üéñÔ∏è';

            return `
                <div class="leaderboard-item ${isCurrentUser ? 'current-user' : ''}" 
                     style="animation-delay: ${index * 0.05}s; 
                            background: var(--shadow-gradient); 
                            border: 2px solid var(--steel-gray);
                            border-radius: var(--radius-lg);
                            padding: var(--space-lg);
                            margin-bottom: var(--space-md);
                            display: flex; align-items: center; gap: var(--space-md);
                            transition: all var(--transition-detective);">
                    <div style="width: 50px; height: 50px; background: var(--blood-gradient); 
                                color: var(--bone-white); border-radius: 50%; 
                                display: flex; align-items: center; justify-content: center; 
                                font-weight: 900; font-family: 'JetBrains Mono', monospace; 
                                box-shadow: 0 0 20px var(--blood-red);">
                        ${index + 1}
                    </div>
                    <div style="flex: 1;">
                        <div style="font-weight: 700; margin-bottom: 2px; 
                                    font-family: 'Special Elite', monospace; color: var(--bone-white);">
                            ${rankIcon} ${(leader.username || leader.firstName || '–î–ï–¢–ï–ö–¢–ò–í').toUpperCase()}
                            ${isCurrentUser ? ' (–í–´)' : ''}
                        </div>
                        <div style="font-size: 0.9rem; color: rgba(245, 245, 220, 0.7); 
                                    font-family: 'Special Elite', monospace;">
                            ${leader.score || 0} –û–ß–ö–û–í
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        // –î–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∞
        setTimeout(() => {
            const items = CaseElements.leaderboardContainer.querySelectorAll('.leaderboard-item');
            items.forEach(item => {
                item.addEventListener('click', () => {
                    createBloodExplosion(item, 'clue');
                    if (tg?.HapticFeedback) {
                        tg.HapticFeedback.impactOccurred('light');
                    }
                });

                item.addEventListener('mouseenter', () => {
                    item.style.transform = 'translateX(8px) scale(1.02)';
                    item.style.borderColor = 'var(--crimson)';
                    item.style.boxShadow = '0 0 30px rgba(139, 0, 0, 0.4)';
                });

                item.addEventListener('mouseleave', () => {
                    item.style.transform = '';
                    item.style.borderColor = 'var(--steel-gray)';
                    item.style.boxShadow = '';
                });
            });
        }, 100);
    }

    initCrimeSceneInteractivity() {
        // –î–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–µ –∑–≤—É–∫–∏ —á–µ—Ä–µ–∑ HapticFeedback
        if (tg?.HapticFeedback) {
            document.querySelectorAll('.evidence-button, .stat-evidence, .evidence-piece').forEach(element => {
                element.addEventListener('click', () => {
                    tg.HapticFeedback.impactOccurred('medium');
                });
            });
        }

        // –ö—Ä–æ–≤–∞–≤—ã–µ —á–∞—Å—Ç–∏—Ü—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        document.querySelectorAll('.case-module').forEach(module => {
            module.addEventListener('mouseenter', () => {
                this.generateCrimeScene(module);
            });
        });

        // –°–ª—É—á–∞–π–Ω—ã–µ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ –≥–ª–∏—Ç—á–∏
        setInterval(() => {
            if (Math.random() < 0.05) {
                const elements = document.querySelectorAll('.stat-value, .detective-name');
                const randomElement = elements[Math.floor(Math.random() * elements.length)];
                if (randomElement) {
                    triggerBloodGlitch(randomElement, 200);
                }
            }
        }, 5000);
    }

    generateCrimeScene(element) {
        for (let i = 0; i < 6; i++) {
            setTimeout(() => {
                const particle = document.createElement('div');
                particle.style.cssText = `
                    position: absolute;
                    width: 4px;
                    height: 4px;
                    background: var(--blood-red);
                    border-radius: 50%;
                    pointer-events: none;
                    z-index: 1500;
                    box-shadow: 0 0 10px var(--blood-red);
                `;

                const rect = element.getBoundingClientRect();
                particle.style.left = `${rect.left + Math.random() * rect.width}px`;
                particle.style.top = `${rect.top + Math.random() * rect.height}px`;

                document.body.appendChild(particle);

                let life = 1;
                function crimeFloat() {
                    life -= 0.02;
                    particle.style.opacity = life;
                    particle.style.transform = `translate(${Math.sin(Date.now() * 0.01) * 20}px, ${-life * 100}px) scale(${life * 2})`;

                    if (life > 0) {
                        requestAnimationFrame(crimeFloat);
                    } else {
                        document.body.removeChild(particle);
                    }
                }
                requestAnimationFrame(crimeFloat);
            }, i * 100);
        }
    }

    triggerCrimeSceneTransition() {
        document.body.style.filter = 'hue-rotate(30deg) brightness(1.3) contrast(1.5)';
        setTimeout(() => {
            document.body.style.filter = '';
        }, 300);
    }

    showInvestigation() {
        CaseState.investigating = true;
        CaseState.error = false;

        if (CaseElements.loadingScreen) {
            CaseElements.loadingScreen.classList.remove('hidden');
        }
        if (CaseElements.mainContent) CaseElements.mainContent.classList.add('hidden');
        if (CaseElements.errorScreen) CaseElements.errorScreen.classList.add('hidden');
    }

    showCaseContent() {
        CaseState.investigating = false;
        CaseState.error = false;

        if (CaseElements.loadingScreen) CaseElements.loadingScreen.classList.add('hidden');
        if (CaseElements.mainContent) {
            CaseElements.mainContent.classList.remove('hidden');
            // –î–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
            document.querySelectorAll('.case-module').forEach((module, index) => {
                module.style.animationDelay = `${index * 0.1}s`;
            });
        }
        if (CaseElements.errorScreen) CaseElements.errorScreen.classList.add('hidden');

        // –£—Å–ø–µ—à–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        if (tg?.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('success');
        }
    }

    showError(message) {
        CaseState.investigating = false;
        CaseState.error = true;
        CaseState.errorMessage = message;

        if (CaseElements.errorMessage) CaseElements.errorMessage.textContent = message;

        if (CaseElements.loadingScreen) CaseElements.loadingScreen.classList.add('hidden');
        if (CaseElements.mainContent) CaseElements.mainContent.classList.add('hidden');
        if (CaseElements.errorScreen) {
            CaseElements.errorScreen.classList.remove('hidden');
        }

        // –û—à–∏–±–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        if (tg?.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('error');
        }
    }
}

// –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—å–µ...');
    new CriminalProfileManager();
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }, 100);
}); 