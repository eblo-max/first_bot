/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ"
 * –°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
 */

// –û–±—ä–µ–∫—Ç Telegram WebApp –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram Mini Apps
let tg = null;

// –§–ª–∞–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let isInitialized = false;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function initApp() {
    // –ù–ï –û–ß–ò–©–ê–ï–ú –í–ï–°–¨ localStorage - —Ç–æ–ª—å–∫–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
    const savedToken = localStorage.getItem('token');
    const savedAuthToken = localStorage.getItem('auth_token');
    const savedInitData = localStorage.getItem('initData');

    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ sessionStorage –∏ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    sessionStorage.clear();

    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–≤—ã–µ –∫–ª—é—á–∏ –∏–∑ localStorage, —Å–æ—Ö—Ä–∞–Ω—è—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const keysToKeep = ['token', 'auth_token', 'initData'];
    const allKeys = Object.keys(localStorage);
    allKeys.forEach(key => {
        if (!keysToKeep.includes(key)) {
            localStorage.removeItem(key);
        }
    });

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    if (savedToken) localStorage.setItem('token', savedToken);
    if (savedAuthToken) localStorage.setItem('auth_token', savedAuthToken);
    if (savedInitData) localStorage.setItem('initData', savedInitData);

    if (window.GameState) {
        GameState.data.token = null;
        GameState.data.user = null;
        GameState.data.isTestMode = false;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ GameState –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ localStorage
        const existingToken = localStorage.getItem('token') || localStorage.getItem('auth_token');
        // –ë–û–õ–ï–ï –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
        if (existingToken && !existingToken.startsWith('test_token_') && !existingToken.startsWith('guest_')) {
            GameState.data.token = existingToken;
            Logger?.debug('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –≤ GameState –∏–∑ localStorage');
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const existingUser = localStorage.getItem('user');
        if (existingUser) {
            try {
                GameState.data.user = JSON.parse(existingUser);
                Logger?.debug('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ GameState');
            } catch (e) {
                Logger?.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
            }
        }
    }
    isInitialized = false;

    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏–∑ —Ç–µ—Å—Ç–æ–≤
    window.CriminalBluffApp = {
        getData: () => GameState.data,
        isReady: () => isInitialized,
        getState: () => ({
            currentScreen: GameState.current,
            isLoading: document.querySelector('.loading-container').style.display !== 'none',
            totalScore: GameState.data.score,
            currentStoryIndex: GameState.data.currentStoryIndex,
            storiesCount: GameState.data.stories.length
        })
    };

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp API
        if (!window.Telegram || !window.Telegram.WebApp) {
            Logger?.warn('Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
            handleNoTelegramApi();
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Telegram WebApp
        tg = window.Telegram.WebApp;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        const theme = tg.colorScheme || 'dark';
        GameState.data.theme = theme;
        document.body.setAttribute('data-theme', theme);

        // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        tg.expand();
        tg.BackButton.hide();
        tg.BackButton.onClick(() => handleBackButton());

        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
        const existingToken = localStorage.getItem('token') || localStorage.getItem('auth_token');
        console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤:', existingToken ? `${existingToken.substring(0, 20)}...` : '–ù–ï–¢');

        // –ë–û–õ–ï–ï –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
        if (existingToken && !existingToken.startsWith('test_token_') && !existingToken.startsWith('guest_')) {
            // –ï—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            Logger?.debug('‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å');
            await verifyExistingToken(existingToken);
            return;
        }

        // –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –¥–ª—è –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await checkTelegramAuth();

        // –°–æ–æ–±—â–∞–µ–º Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
        tg.ready();
    } catch (error) {
        Logger?.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        handleNoTelegramApi();
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞
    setTimeout(() => {
        if (document.querySelector('.loading-container').style.display !== 'none') {
            Logger?.warn('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
            showContent();
            isInitialized = true;
        }
    }, 2000);
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
 */
function showContent() {
    document.querySelector('.loading-container').style.display = 'none';
    document.querySelector('.container').style.display = 'block';
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ Telegram
 */
function handleBackButton() {
    // –ï—Å–ª–∏ –º—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–≥—Ä–µ
    if (GameState.current === 'result') {
        nextQuestion();
        tg.BackButton.hide();
    }
    // –ï—Å–ª–∏ –º—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    else if (GameState.current === 'finish') {
        goToMain();
        tg.BackButton.hide();
    }
    // –ï—Å–ª–∏ –º—ã –Ω–∞ –∏–≥—Ä–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    else if (GameState.current === 'game') {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∏–≥—Ä—É?')) {
            abandonGame();
        }
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è Telegram WebApp API
 */
function handleNoTelegramApi() {
    GameState.data.isTestMode = true;

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è Telegram WebApp API –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    if (!window.Telegram) {
        window.Telegram = {
            WebApp: {
                ready: () => { Logger?.debug('WebApp.ready() –≤—ã–∑–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'); },
                expand: () => { Logger?.debug('WebApp.expand() –≤—ã–∑–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'); },
                initData: "test_mode_data",
                initDataUnsafe: {
                    user: {
                        id: 12345678,
                        first_name: "Test",
                        last_name: "User",
                        username: "testuser"
                    }
                },
                BackButton: {
                    show: () => { Logger?.debug('BackButton.show() –≤—ã–∑–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'); },
                    hide: () => { Logger?.debug('BackButton.hide() –≤—ã–∑–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'); },
                    onClick: (callback) => { Logger?.debug('BackButton.onClick() —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'); }
                },
                colorScheme: "dark",
                HapticFeedback: {
                    impactOccurred: () => { Logger?.debug('HapticFeedback.impactOccurred –≤—ã–∑–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'); },
                    notificationOccurred: () => { Logger?.debug('HapticFeedback.notificationOccurred –≤—ã–∑–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'); }
                }
            }
        };
    }

    tg = window.Telegram.WebApp;
    handleTestMode();
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–¢–û–õ–¨–ö–û –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å test_mode_data)
 */
function handleTestMode() {
    Logger?.debug('üß™ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å test_mode_data');
    GameState.data.isTestMode = true;
    showContent();
    isInitialized = true;

    // –í–ê–ñ–ù–û: –ù–ï —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
    // –¢–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤
    if (GameState.data.isTestMode && window.location.search.includes('autostory=true')) {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¢–û–õ–¨–ö–û –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤
        const testToken = `test_token_${Date.now()}`;
        GameState.data.token = testToken;
        localStorage.setItem('token', testToken);

        setTimeout(() => {
            const testStory = {
                id: 'test-story-1',
                title: '–¢–µ—Å—Ç–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è',
                content: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –±—ç–∫–µ–Ω–¥–∞.',
                difficulty: 'easy',
                mistakes: [
                    { id: 'mistake-1', text: '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 1', isCorrect: true, explanation: '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç' },
                    { id: 'mistake-2', text: '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 2', isCorrect: false, explanation: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç' },
                    { id: 'mistake-3', text: '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 3', isCorrect: false, explanation: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç' }
                ]
            };

            GameState.data.stories = [testStory];
            GameState.data.currentStoryIndex = 0;
            GameState.data.score = 0;
            GameState.showScreen('game');
            GameState.updateGameScreen();
        }, 1000);
    } else {
        // –û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        setTimeout(() => {
            const profileButton = document.getElementById('goToProfile');
            if (profileButton) {
                profileButton.style.opacity = '0.5';
                profileButton.style.pointerEvents = 'none';
                profileButton.title = '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ';
            }
        }, 100);
    }
}

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram WebApp
 */
async function authorize() {
    try {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const oldToken = localStorage.getItem('token');
        if (oldToken && oldToken.includes('guest_')) {
            localStorage.removeItem('token');
            Logger?.debug('–ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –≥–æ—Å—Ç–µ–≤–æ–π —Ç–æ–∫–µ–Ω, –æ—á–∏—â–∞–µ–º localStorage');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initData –æ—Ç Telegram
        if (!tg.initData || tg.initData.trim() === '') {
            Logger?.error('Telegram WebApp initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç');
            throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const telegramUser = tg.initDataUnsafe?.user;
        if (telegramUser) {
            Logger?.debug('–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', telegramUser.id || telegramUser.first_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        } else {
            Logger?.debug('initDataUnsafe.user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ initData –µ—Å—Ç—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const response = await fetch('/api/auth/init', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                initData: tg.initData
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            Logger?.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${response.status} - ${errorText}`);
            throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${response.status}`);
        }

        const data = await response.json();

        if (!data.data || !data.data.token) {
            throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        GameState.data.token = data.data.token;
        GameState.data.user = data.data.user;

        localStorage.setItem('token', data.data.token);
        localStorage.setItem('auth_token', data.data.token);
        localStorage.setItem('user', JSON.stringify(data.data.user));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º initData –¥–ª—è –±—É–¥—É—â–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if (tg.initData) {
            localStorage.setItem('initData', tg.initData);
        }

        Logger?.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', data.data.user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        showContent();
        isInitialized = true;

    } catch (error) {
        Logger?.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);

        // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        Logger?.debug('–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º.');

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞
            const healthResponse = await fetch('/api/health');
            if (healthResponse.ok) {
                Logger?.debug('API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Telegram');
            }
        } catch (e) {
            Logger?.error('API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e);
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        handleTestMode();
    }
}

/**
 * –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
 */
async function startGame() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (!isInitialized) {
            Logger?.warn('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ. –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.');
            await initApp();

            setTimeout(() => {
                if (!isInitialized) {
                    Logger?.warn('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º.');
                    handleTestMode();
                }
            }, 1000);
            return;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        GameState.data.score = 0;
        GameState.data.currentStoryIndex = 0;
        GameState.data.stories = [];
        GameState.data.gameStartTime = Date.now();

        // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if (GameState.data.isTestMode) {
            const testStories = generateTestStories();
            GameState.data.stories = testStories;
            GameState.data.currentStory = testStories[0];
            GameState.showScreen('game');
            GameState.updateGameScreen();
            startTimer();
            return;
        }

        // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        const response = await fetch('/api/game/start', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${GameState.data.token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        const data = await response.json();

        if (!data.gameId || !data.stories || data.stories.length === 0) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        GameState.data.gameId = data.gameId;
        GameState.data.stories = data.stories;
        GameState.data.currentStory = data.stories[0];

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É
        GameState.showScreen('game');
        GameState.updateGameScreen();
        startTimer();

    } catch (error) {
        Logger?.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:', error);

        // Fallback - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        GameState.data.isTestMode = true;
        const testStories = generateTestStories();
        GameState.data.stories = testStories;
        GameState.data.currentStory = testStories[0];
        GameState.showScreen('game');
        GameState.updateGameScreen();
        startTimer();
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π
 */
function generateTestStories() {
    return [
        {
            id: 'test-1',
            title: '–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ —é–≤–µ–ª–∏—Ä–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞',
            content: '–í–æ—Ä –ø—Ä–æ–Ω–∏–∫ –≤ —é–≤–µ–ª–∏—Ä–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –Ω–æ—á—å—é, –æ—Ç–∫–ª—é—á–∏–ª —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—é, –≤—Å–∫—Ä—ã–ª —Å–µ–π—Ñ –∏ —É–∫—Ä–∞–ª –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏. –û–¥–Ω–∞–∫–æ –æ–Ω –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –≤–∏—Ç—Ä–∏–Ω–µ.',
            difficulty: 'easy',
            mistakes: [
                { id: 'm1', text: '–û—Å—Ç–∞–≤–∏–ª –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤', isCorrect: true, explanation: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤.' },
                { id: 'm2', text: '–û—Ç–∫–ª—é—á–∏–ª —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—é', isCorrect: false, explanation: '–≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –∞ —á–∞—Å—Ç—å –ø–ª–∞–Ω–∞.' },
                { id: 'm3', text: '–î–µ–π—Å—Ç–≤–æ–≤–∞–ª –Ω–æ—á—å—é', isCorrect: false, explanation: '–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - –ª–æ–≥–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –∫—Ä–∞–∂–∏.' }
            ]
        },
        {
            id: 'test-2',
            title: '–ö—Ä–∞–∂–∞ –≤ –æ—Ñ–∏—Å–µ',
            content: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∫—Ä–∞–ª –¥–µ–Ω—å–≥–∏ –∏–∑ –∫–∞—Å—Å—ã –∏ –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–∫—Ä—ã—Ç—å —ç—Ç–æ, –ø–æ–¥–¥–µ–ª–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ù–æ –æ–Ω –∑–∞–±—ã–ª, —á—Ç–æ –≤ –æ—Ñ–∏—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è.',
            difficulty: 'medium',
            mistakes: [
                { id: 'm1', text: '–ü–æ–¥–¥–µ–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã', isCorrect: false, explanation: '–≠—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç—å –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –Ω–µ –æ—à–∏–±–∫–∞.' },
                { id: 'm2', text: '–ó–∞–±—ã–ª –ø—Ä–æ –∫–∞–º–µ—Ä—ã', isCorrect: true, explanation: '–ò–º–µ–Ω–Ω–æ! –ù–µ —É—á–µ–ª —Å–∏—Å—Ç–µ–º—É –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è.' },
                { id: 'm3', text: '–£–∫—Ä–∞–ª –∏–∑ –∫–∞—Å—Å—ã', isCorrect: false, explanation: '–≠—Ç–æ —Å–∞–º–æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∞ –Ω–µ –æ—à–∏–±–∫–∞ –≤ –µ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏.' }
            ]
        }
    ];
}

/**
 * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
 */
function startTimer() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (GameState.data.timerId) {
        clearInterval(GameState.data.timerId);
    }

    const timerDuration = 60; // —Å–µ–∫—É–Ω–¥
    GameState.data.secondsLeft = timerDuration;
    GameState.data.isAnswering = true;

    const timerDisplay = document.getElementById('timer-display');
    const timerFill = document.getElementById('timer-fill');

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (timerDisplay) timerDisplay.textContent = GameState.data.secondsLeft;
    if (timerFill) timerFill.style.strokeDashoffset = '0';

    GameState.data.timerId = setInterval(() => {
        GameState.data.secondsLeft--;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (timerDisplay) timerDisplay.textContent = GameState.data.secondsLeft;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª—å—Ü–æ —Ç–∞–π–º–µ—Ä–∞
        if (timerFill) {
            const progress = GameState.data.secondsLeft / timerDuration;
            const circumference = 2 * Math.PI * 45; // —Ä–∞–¥–∏—É—Å = 45
            const offset = circumference * (1 - progress);
            timerFill.style.strokeDashoffset = offset;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
        if (GameState.data.secondsLeft <= 0) {
            timeExpired();
        }
    }, 1000);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
 */
function timeExpired() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (GameState.data.timerId) {
        clearInterval(GameState.data.timerId);
        GameState.data.timerId = null;
    }

    GameState.data.isAnswering = false;

    // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    if (GameState.data.result) return;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    const currentStory = GameState.data.currentStory;
    if (!currentStory || !currentStory.mistakes) {
        Logger?.error('–¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
    const currentIndex = GameState.data.currentStoryIndex;
    if (GameState.data.stories[currentIndex]) {
        GameState.data.stories[currentIndex] = {
            ...GameState.data.stories[currentIndex],
            answered: true,
            correct: false,
            timeExpired: true,
            selectedMistakeId: null,
            pointsEarned: 0
        };
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    GameState.data.result = {
        correct: false,
        explanation: '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' +
            (currentStory.mistakes.find(m => m.isCorrect)?.text || '–Ω–µ –Ω–∞–π–¥–µ–Ω'),
        pointsEarned: 0,
        timeExpired: true
    };

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (GameState.data.isTestMode) {
        GameState.showScreen('result');
        GameState.updateResultScreen();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            nextQuestion();
        }, 3000);

        return;
    }

    // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
        fetch('/api/game/submit', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${GameState.data.token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                gameId: GameState.data.gameId,
                storyId: currentStory.id,
                mistakeId: null,
                timeExpired: true,
                responseTime: 60000
            })
        });
    } catch (error) {
        Logger?.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    GameState.showScreen('result');
    GameState.updateResultScreen();
}

/**
 * –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */
async function selectAnswer(mistakeId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç
    if (!GameState.data.isAnswering || GameState.data.result) {
        return; // –û—Ç–≤–µ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (GameState.data.timerId) {
        clearInterval(GameState.data.timerId);
        GameState.data.timerId = null;
    }

    GameState.data.isAnswering = false;

    const currentStory = GameState.data.currentStory;
    if (!currentStory) {
        Logger?.error('–¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    const timeTaken = 60 - GameState.data.secondsLeft;
    const timeLeft = GameState.data.secondsLeft;

    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    const selectedMistake = currentStory.mistakes.find(m => m.id === mistakeId);
    if (!selectedMistake) {
        Logger?.error('–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const isCorrect = selectedMistake.isCorrect;

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    if (GameState.data.isTestMode) {
        const pointsDetails = calculateTestPoints(isCorrect, timeTaken, currentStory.difficulty);

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
        GameState.data.score += pointsDetails.total;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –º–∞—Å—Å–∏–≤–µ
        const currentIndex = GameState.data.currentStoryIndex;
        GameState.data.stories[currentIndex] = {
            ...GameState.data.stories[currentIndex],
            answered: true,
            correct: isCorrect,
            selectedMistakeId: mistakeId,
            timeSpent: timeTaken,
            pointsEarned: pointsDetails.total
        };

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        GameState.data.result = {
            correct: isCorrect,
            explanation: selectedMistake.explanation,
            pointsEarned: pointsDetails.total,
            details: pointsDetails
        };

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        GameState.showScreen('result');
        GameState.updateResultScreen();
        return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
        const response = await fetch('/api/game/submit', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${GameState.data.token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                gameId: GameState.data.gameId,
                storyId: currentStory.id,
                mistakeId: mistakeId,
                responseTime: timeTaken * 1000
            })
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        const data = await response.json();

        if (data.status === 'error') {
            Logger?.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', data.message);
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        GameState.data.score = data.data.totalScore;
        GameState.data.result = {
            correct: data.data.correct,
            explanation: data.data.explanation,
            pointsEarned: data.data.pointsEarned
        };

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        GameState.showScreen('result');
        GameState.updateResultScreen();

    } catch (error) {
        Logger?.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);

        // Fallback - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const pointsDetails = calculateTestPoints(isCorrect, timeTaken, currentStory.difficulty);
        GameState.data.score += pointsDetails.total;
        GameState.data.result = {
            correct: isCorrect,
            explanation: selectedMistake.explanation,
            pointsEarned: pointsDetails.total
        };

        GameState.showScreen('result');
        GameState.updateResultScreen();
    }
}

/**
 * –†–∞—Å—á–µ—Ç –æ—á–∫–æ–≤ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
 */
function calculateTestPoints(isCorrect, timeSpent, difficulty = 'medium') {
    if (!isCorrect) {
        return { base: 0, timeBonus: 0, difficultyBonus: 0, total: 0 };
    }

    const basePoints = 100;
    const maxTimeBonus = 50;
    const timeBonus = Math.max(0, Math.round(maxTimeBonus * (1 - timeSpent / 60)));

    let difficultyBonus = 0;
    switch (difficulty) {
        case 'easy': difficultyBonus = 10; break;
        case 'medium': difficultyBonus = 25; break;
        case 'hard': difficultyBonus = 50; break;
    }

    const total = basePoints + timeBonus + difficultyBonus;
    return { base: basePoints, timeBonus, difficultyBonus, total };
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
 */
function nextQuestion() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    GameState.data.result = null;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    GameState.data.currentStoryIndex++;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∏—Å—Ç–æ—Ä–∏–∏
    if (GameState.data.currentStoryIndex >= GameState.data.stories.length) {
        // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        finishGame();
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é
    GameState.data.currentStory = GameState.data.stories[GameState.data.currentStoryIndex];

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É
    GameState.showScreen('game');
    GameState.updateGameScreen();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    startTimer();
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
 */
async function finishGame() {
    document.querySelector('.loading-container').style.display = 'flex';

    try {
        // ========== –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò –¢–û–ß–ù–´–ô –†–ê–°–ß–ï–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ==========

        // 1. –ü–û–î–°–ß–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–´–• –û–¢–í–ï–¢–û–í (—Ç–æ–ª—å–∫–æ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        let actualCorrectAnswers = 0;
        const totalQuestions = 5; // –í—Å–µ–≥–¥–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∏–≥—Ä–µ

        if (GameState.data.stories && GameState.data.stories.length > 0) {
            GameState.data.stories.forEach((story, index) => {
                const isCorrect = story.correct === true;
                if (isCorrect) {
                    actualCorrectAnswers++;
                }

            });
        }

        // 2. –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –§–û–†–ú–£–õ–´ –î–õ–Ø –†–ê–°–ß–ï–¢–ê
        const totalScore = GameState.data.score || 0;

        // –§–æ—Ä–º—É–ª–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏: (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã / –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤) √ó 100%
        const accuracy = Math.round((actualCorrectAnswers / totalQuestions) * 100);

        // 3. –û–¢–ü–†–ê–í–ö–ê –ù–ê –°–ï–†–í–ï–†
        const gameStatistics = {
            gameId: GameState.data.gameId,
            totalScore: totalScore,
            correctAnswers: actualCorrectAnswers,
            totalQuestions: totalQuestions
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã —Å —Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        const response = await fetch('/api/game/finish', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${GameState.data.token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(gameStatistics)
        });

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }

        const serverData = await response.json();

        // 4. –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (–¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•)
        GameState.data.gameResult = {
            totalScore: totalScore,
            correctAnswers: actualCorrectAnswers,
            totalQuestions: totalQuestions,
            accuracy: accuracy,
            serverResponse: serverData
        };

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        GameState.transition('finish');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã:', error);

        // –î–ê–ñ–ï –í –°–õ–£–ß–ê–ï –û–®–ò–ë–ö–ò - –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
        let failsafeCorrectAnswers = 0;
        if (GameState.data.stories) {
            failsafeCorrectAnswers = GameState.data.stories.filter(story => story.correct === true).length;
        }

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Ä–∞–Ω–¥–æ–º–∞)
        GameState.data.gameResult = {
            totalScore: GameState.data.score || 0,
            correctAnswers: failsafeCorrectAnswers,
            totalQuestions: 5,
            accuracy: Math.round((failsafeCorrectAnswers / 5) * 100),
            serverResponse: null,
            isOffline: true
        };

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        GameState.transition('finish');
    } finally {
        document.querySelector('.loading-container').style.display = 'none';
    }
}

/**
 * –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
 */
async function abandonGame() {
    document.querySelector('.loading-container').style.display = 'flex';

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã —Å –ø–æ–º–µ—Ç–∫–æ–π –æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
        await fetch('/api/game/finish', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${GameState.data.token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                gameId: GameState.data.gameId
            })
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        goToMain();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∏–≥—Ä—ã:', error);
        goToMain();
    } finally {
        document.querySelector('.loading-container').style.display = 'none';
    }
}

/**
 * –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
 */
function restartGame() {

    startGame();
}

/**
 * –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
 */
function goToMain() {

    GameState.transition('goToMain');

    if (tg) {
        tg.BackButton.hide();
    }

    // –û—á–∏—â–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    GameState.data.gameId = null;
    GameState.data.stories = [];
    GameState.data.currentStoryIndex = 0;
    GameState.data.currentStory = null;
    clearInterval(GameState.data.timerId);
}

/**
 * –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —á–µ—Ä–µ–∑ Telegram
 * @param {string} type - –¢–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 */
function provideFeedback(type) {
    try {
        if (!tg || !tg.HapticFeedback) return;

        switch (type) {
            case 'correct':
                // –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                tg.HapticFeedback.notificationOccurred('success');
                break;
            case 'incorrect':
                // –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                tg.HapticFeedback.notificationOccurred('error');
                break;
            case 'tap':
                // –õ–µ–≥–∫–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                tg.HapticFeedback.impactOccurred('light');
                break;
        }
    } catch (error) {
        // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram

    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * @param {Event} event - DOM —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
 */
function handleButtonClick(event) {
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-action
    const actionElement = event.target.closest('[data-action]');
    if (!actionElement) return;

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    const action = actionElement.getAttribute('data-action');

    // –¢–∞–∫—Ç–∏–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
    if (tg && tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    switch (action) {
        case 'startGame':
            startGame();
            break;
        case 'selectAnswer':
            const mistakeId = actionElement.getAttribute('data-mistake-id');
            if (mistakeId) selectAnswer(mistakeId);
            break;
        case 'nextQuestion':
            nextQuestion();
            break;
        case 'restartGame':
            restartGame();
            break;
        case 'goToMain':
            goToMain();
            break;
        case 'feedback':
            const feedbackType = actionElement.getAttribute('data-feedback-type');
            if (feedbackType) provideFeedback(feedbackType);
            break;
        default:

    }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function setupEventListeners() {

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É —Å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π
    document.addEventListener('click', handleButtonClick);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã –≤ TG WebApp
    if (tg && tg.colorScheme) {
        const onThemeChanged = () => {
            const newTheme = tg.colorScheme;

            GameState.data.theme = newTheme;
            document.body.setAttribute('data-theme', newTheme);
        };

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        tg.onEvent('themeChanged', onThemeChanged);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
    document.addEventListener('keydown', (event) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        if (GameState.current === 'game' && !GameState.data.isAnswering) {
            const keyToIndex = {
                '1': 0, '2': 1, '3': 2, '4': 3, // –¶–∏—Ñ—Ä—ã
                'a': 0, 'b': 1, 'c': 2, 'd': 3  // –ë—É–∫–≤—ã
            };

            const key = event.key.toLowerCase();
            if (key in keyToIndex) {
                const index = keyToIndex[key];
                const answers = GameState.data.currentStory?.mistakes || [];

                if (index < answers.length) {
                    selectAnswer(answers[index].id);
                }
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        if (event.key === 'Enter' && GameState.current === 'result') {
            nextQuestion();
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
    document.addEventListener('visibilitychange', () => {
        if (GameState.current === 'game' && !GameState.data.isAnswering) {
            if (document.hidden) {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                clearInterval(GameState.data.timerId);
                console.log('–¢–∞–π–º–µ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞)');
            } else {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–∏–º–∞ - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
                startTimer();
                console.log('–¢–∞–π–º–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–∏–º–∞)');
            }
        }
    });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
document.addEventListener('DOMContentLoaded', function () {

    GameState.init();

    setupEventListeners();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (window.location.search.includes('test=true')) {

        GameState.data.isTestMode = true;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ URL
    if (window.location.search.includes('autostart=true')) {

        setTimeout(() => {
            startGame();
        }, 500);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    initApp();
});

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */
GameState.updateUI = function () {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—á–∫–æ–≤
    document.getElementById('score-display').textContent = this.data.score;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏
    if (this.data.stories.length > 0) {
        document.getElementById('question-progress').textContent =
            `${this.data.currentStoryIndex + 1}/${this.data.stories.length}`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
    if (this.current === 'game') {
        document.getElementById('timer-value').textContent = this.data.secondsLeft;
        document.getElementById('timer-bar').style.width = `${(this.data.secondsLeft / this.data.timerDuration) * 100}%`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    if (this.data.currentStory) {
        document.getElementById('story-title').textContent = this.data.currentStory.title;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
        const storyContent = document.getElementById('story-content');
        let content = this.data.currentStory.content || '';

        // –ë–ï–ó–û–ü–ê–°–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ innerHTML
        if (!content.includes('<span class="highlighted-text">')) {
            // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
            const fragments = content.split(/(\—Å–∫—Ä—ã—Ç—É—é –∫–∞–º–µ—Ä—É –Ω–∞–¥ —Å–µ–π—Ñ–æ–º|\–±–µ–∑ –ø–µ—Ä—á–∞—Ç–æ–∫|\—Ä–∞–∫–æ–≤–∏–Ω–æ–π –≤ –ø–æ–¥—Å–æ–±–∫–µ)/gi);

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ
            while (storyContent.firstChild) {
                storyContent.removeChild(storyContent.firstChild);
            }

            fragments.forEach(fragment => {
                if (fragment.match(/—Å–∫—Ä—ã—Ç—É—é –∫–∞–º–µ—Ä—É –Ω–∞–¥ —Å–µ–π—Ñ–æ–º|–±–µ–∑ –ø–µ—Ä—á–∞—Ç–æ–∫|—Ä–∞–∫–æ–≤–∏–Ω–æ–π –≤ –ø–æ–¥—Å–æ–±–∫–µ/gi)) {
                    const span = document.createElement('span');
                    span.className = 'highlighted-text';
                    span.textContent = fragment;
                    storyContent.appendChild(span);
                } else if (fragment) {
                    const textNode = document.createTextNode(fragment);
                    storyContent.appendChild(textNode);
                }
            });
        } else {
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–º–µ—Ç–∫—É, –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            storyContent.textContent = content.replace(/<[^>]*>/g, '');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
        if (document.getElementById('story-date')) {
            document.getElementById('story-date').textContent = this.data.currentStory.date || '';
        }
        if (document.getElementById('story-difficulty')) {
            document.getElementById('story-difficulty').textContent = this.data.currentStory.difficulty || '';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        this.updateAnswers();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
        if (document.getElementById('action-button')) {
            if (this.data.isAnswering) {
                document.getElementById('action-button').textContent = '–ü–û–î–¢–í–ï–†–î–ò–¢–¨ –û–¢–í–ï–¢';
            } else {
                document.getElementById('action-button').textContent = '–°–õ–ï–î–£–Æ–©–ï–ï –î–ï–õ–û';
            }
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (this.data.result && this.current === 'result') {
        this.updateResultScreen();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω —Ñ–∏–Ω–∏—à–∞
    if (this.data.gameResult && this.current === 'finish') {
        this.updateFinishScreen();
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
 */
GameState.updateAnswers = function () {
    const container = document.getElementById('answers-container');
    if (!container || !this.data.currentStory || !this.data.currentStory.mistakes) return;

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    while (container.firstChild) {
        container.removeChild(container.firstChild);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    const letters = ['A', 'B', 'C', 'D'];
    this.data.currentStory.mistakes.forEach((mistake, index) => {
        const answerOption = document.createElement('div');
        answerOption.className = 'answer-option';
        answerOption.dataset.mistakeId = mistake.id;
        answerOption.dataset.action = 'selectAnswer';

        if (this.data.isAnswering) {
            answerOption.classList.add('disabled');
        }

        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä —Å –±—É–∫–≤–æ–π –æ—Ç–≤–µ—Ç–∞
        const marker = document.createElement('div');
        marker.className = 'answer-marker';
        marker.textContent = letters[index];

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        const text = document.createElement('div');
        text.className = 'answer-text';
        text.textContent = mistake.text;

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
        answerOption.appendChild(marker);
        answerOption.appendChild(text);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.appendChild(answerOption);
    });
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞: window.clearAppCache()
 */
function clearAppCache() {

    // –û—á–∏—â–∞–µ–º localStorage –ø–æ–ª–Ω–æ—Å—Ç—å—é

    localStorage.clear();

    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª—é—á–∏
    const keysToRemove = ['token', 'auth_token', 'gameData', 'userData', 'initData'];
    keysToRemove.forEach(key => {
        localStorage.removeItem(key);
        sessionStorage.removeItem(key);

    });

    // –û—á–∏—â–∞–µ–º sessionStorage
    sessionStorage.clear();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if (window.GameState) {
        GameState.data.token = null;
        GameState.data.user = null;
        GameState.data.isTestMode = false;
    }
    isInitialized = false;

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    location.reload();
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
window.clearAppCache = clearAppCache;
window.CriminalBluffApp = window.CriminalBluffApp || {};
window.CriminalBluffApp.clearCache = clearAppCache;

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∞–ª–∏–¥–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram
 */
function handleNoValidAuth() {
    Logger?.warn('‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram');

    // –ù–ï —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

    GameState.data.isTestMode = false; // –≠—Ç–æ –ù–ï —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    GameState.data.token = null; // –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞
    GameState.data.user = null; // –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    showContent();
    isInitialized = true;

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
        const profileButton = document.getElementById('goToProfile');
        if (profileButton) {
            profileButton.style.opacity = '0.5';
            profileButton.style.pointerEvents = 'none';
            profileButton.title = '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram';

            // –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            profileButton.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();

                if (window.Telegram?.WebApp?.showAlert) {
                    window.Telegram.WebApp.showAlert('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram');
                } else {
                    alert('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram');
                }
            });
        }
    }, 100);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 */
async function verifyExistingToken(token) {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');

        const response = await fetch('/api/auth/verify', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const data = await response.json();

            // –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            GameState.data.token = token;
            GameState.data.user = data.user || JSON.parse(localStorage.getItem('user') || '{}');
            GameState.data.isAuthenticated = true;

            Logger?.info('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', data.user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            showContent();
            isInitialized = true;

        } else {
            console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');

            // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –æ—á–∏—â–∞–µ–º –∏ —Ç—Ä–µ–±—É–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            localStorage.removeItem('token');
            localStorage.removeItem('auth_token');
            localStorage.removeItem('user');

            GameState.data.token = null;
            GameState.data.user = null;
            GameState.data.isAuthenticated = false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
            await checkTelegramAuth();
        }

    } catch (error) {
        Logger?.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
        // (–≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º)
        GameState.data.token = token;
        GameState.data.user = JSON.parse(localStorage.getItem('user') || '{}');

        Logger?.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');

        showContent();
        isInitialized = true;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
 */
async function checkTelegramAuth() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –¥–ª—è –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (tg.initData && tg.initData.trim() !== '' && !tg.initData.includes('test_mode_data')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ initData
        try {
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º initData –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const initDataParams = new URLSearchParams(tg.initData);
            const userParam = initDataParams.get('user');

            if (userParam) {
                const userData = JSON.parse(decodeURIComponent(userParam));
                if (userData && userData.id) {
                    Logger?.debug('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ initData:', userData.id);
                    await authorize();
                    return;
                }
            }

            Logger?.debug('‚ö†Ô∏è initData –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            handleNoValidAuth();

        } catch (error) {
            Logger?.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', error);
            handleNoValidAuth();
        }
    } else {
        Logger?.debug('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram initData');
        handleNoValidAuth();
    }
} 