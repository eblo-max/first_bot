/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ"
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */

class Logger {
    constructor() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        this.environment = this.detectEnvironment();

        // –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        this.levels = {
            ERROR: 0,   // –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
            WARN: 1,    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
            INFO: 2,    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            DEBUG: 3    // –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        };

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
        this.currentLevel = this.setLogLevel();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        this.init();
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
     */
    detectEnvironment() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ production –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const isProduction =
            // –î–æ–º–µ–Ω production
            window.location.hostname.includes('.railway.app') ||
            window.location.hostname.includes('criminal-bluff') ||
            // HTTPS –≤ production
            (window.location.protocol === 'https:' && !window.location.hostname.includes('localhost')) ||
            // –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ debug –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            (!window.location.search.includes('debug=true') && !window.location.search.includes('test=true'));

        return isProduction ? 'production' : 'development';
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    setLogLevel() {
        switch (this.environment) {
            case 'production':
                return this.levels.ERROR; // –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –≤ production
            case 'development':
                return this.levels.DEBUG; // –í—Å–µ –ª–æ–≥–∏ –≤ development
            default:
                return this.levels.WARN;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    init() {
        // –í production –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.log –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ
        if (this.environment === 'production') {
            this.overrideConsole();
        }

        // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ
        if (this.currentLevel >= this.levels.INFO) {
            console.info(`üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${this.environment} (—É—Ä–æ–≤–µ–Ω—å: ${this.getLevelName()})`);
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç console –º–µ—Ç–æ–¥–æ–≤ –≤ production
     */
    overrideConsole() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        this.originalConsole = {
            log: console.log,
            warn: console.warn,
            error: console.error,
            info: console.info,
            debug: console.debug
        };

        // –ó–∞–º–µ–Ω—è–µ–º console.log –Ω–∞ –ø—É—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ production
        console.log = () => { };
        console.debug = () => { };

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        console.info = this.createFilteredLogger('info');
        console.warn = this.createFilteredLogger('warn');
        console.error = this.createFilteredLogger('error');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
     */
    createFilteredLogger(type) {
        return (...args) => {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const filteredArgs = this.sanitizeLogData(args);

            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            if (this.originalConsole && this.originalConsole[type]) {
                this.originalConsole[type](...filteredArgs);
            }
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–æ–≤
     */
    sanitizeLogData(args) {
        return args.map(arg => {
            if (typeof arg === 'string') {
                // –£–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                return arg
                    .replace(/Bearer\s+[A-Za-z0-9\-_.]+/g, 'Bearer [HIDDEN]')
                    .replace(/token[^:]*:\s*[^,\s}]+/gi, 'token: [HIDDEN]')
                    .replace(/jwt[^:]*:\s*[^,\s}]+/gi, 'jwt: [HIDDEN]')
                    .replace(/password[^:]*:\s*[^,\s}]+/gi, 'password: [HIDDEN]')
                    .replace(/telegramId[^:]*:\s*\d+/gi, 'telegramId: [HIDDEN]');
            }

            if (typeof arg === 'object' && arg !== null) {
                return this.sanitizeObject(arg);
            }

            return arg;
        });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –æ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    sanitizeObject(obj) {
        const sensitiveKeys = ['token', 'jwt', 'password', 'telegramId', 'initData', 'hash'];
        const sanitized = { ...obj };

        for (const key of Object.keys(sanitized)) {
            if (sensitiveKeys.some(sensitive => key.toLowerCase().includes(sensitive))) {
                sanitized[key] = '[HIDDEN]';
            }
        }

        return sanitized;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
     */
    getLevelName() {
        const levelNames = ['ERROR', 'WARN', 'INFO', 'DEBUG'];
        return levelNames[this.currentLevel] || 'UNKNOWN';
    }

    /**
     * –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    error(...args) {
        if (this.currentLevel >= this.levels.ERROR) {
            const filteredArgs = this.sanitizeLogData(args);
            if (this.originalConsole?.error) {
                this.originalConsole.error('üî¥ [ERROR]', ...filteredArgs);
            } else {
                console.error('üî¥ [ERROR]', ...filteredArgs);
            }
        }
    }

    warn(...args) {
        if (this.currentLevel >= this.levels.WARN) {
            const filteredArgs = this.sanitizeLogData(args);
            if (this.originalConsole?.warn) {
                this.originalConsole.warn('üü° [WARN]', ...filteredArgs);
            } else {
                console.warn('üü° [WARN]', ...filteredArgs);
            }
        }
    }

    info(...args) {
        if (this.currentLevel >= this.levels.INFO) {
            const filteredArgs = this.sanitizeLogData(args);
            if (this.originalConsole?.info) {
                this.originalConsole.info('üîµ [INFO]', ...filteredArgs);
            } else {
                console.info('üîµ [INFO]', ...filteredArgs);
            }
        }
    }

    debug(...args) {
        if (this.currentLevel >= this.levels.DEBUG) {
            const filteredArgs = this.sanitizeLogData(args);
            if (this.originalConsole?.log) {
                this.originalConsole.log('‚ö™ [DEBUG]', ...filteredArgs);
            } else {
                
            }
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ª–æ–≥ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —É—Ä–æ–≤–Ω–∏, –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫)
     */
    force(...args) {
        const filteredArgs = this.sanitizeLogData(args);
        if (this.originalConsole?.error) {
            this.originalConsole.error('üî• [FORCE]', ...filteredArgs);
        } else {
            console.error('üî• [FORCE]', ...filteredArgs);
        }
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
     */
    enableDebug() {
        this.currentLevel = this.levels.DEBUG;
        this.info('Debug —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω');
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
     */
    disable() {
        this.currentLevel = -1;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
window.Logger = new Logger();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = Logger;
} 