/**
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ" –Ω–∞ TypeScript
 * –í–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
 */

import type {
    Achievement,
    AchievementRequirement,
    AchievementSound,
    User,
    UserStats
} from './types/profile-types.js';

// =============================================================================
// –¢–ò–ü–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –î–û–°–¢–ò–ñ–ï–ù–ò–ô
// =============================================================================

interface AchievementNotification {
    achievement: Achievement;
    timestamp: number;
    isShown: boolean;
}

interface SoundEffect {
    name: string;
    volume: number;
    duration: number;
}

interface AchievementIcon {
    svg: string;
    animation?: string;
}

// =============================================================================
// –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –°–ò–°–¢–ï–ú–´ –î–û–°–¢–ò–ñ–ï–ù–ò–ô
// =============================================================================

export class AchievementSystem {
    private achievements: Map<string, Achievement> = new Map();
    private userStats: UserStats | null = null;
    private isInitialized = false;
    private notificationQueue: AchievementNotification[] = [];
    private isShowingNotification = false;
    private soundEffects: Map<string, SoundEffect> = new Map();
    private animationConfig = {
        duration: 2000,
        easing: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)'
    };

    // =========================================================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // =========================================================================

    constructor() {
        this.initAchievementConfig();
    }

    public async init(): Promise<void> {
        if (this.isInitialized) return;

        try {
            console.log('üèÜ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');

            // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.injectStyles();

            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.createNotificationContainer();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            this.initSoundEffects();

            this.isInitialized = true;
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
            throw error;
        }
    }

    // =========================================================================
    // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–ô
    // =========================================================================

    private initAchievementConfig(): void {
        const achievementConfigs: Achievement[] = [
            // –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            {
                id: 'first_case',
                name: '–ü–µ—Ä–≤–æ–µ –¥–µ–ª–æ',
                description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
                category: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
                icon: 'üîç',
                requirement: { type: 'investigations', value: 1 },
                rarity: 'common',
                sound: 'success-light',
                isUnlocked: false
            },
            {
                id: 'rookie',
                name: '–ù–æ–≤–∏—á–æ–∫',
                description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ 5 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
                icon: 'üëÆ‚Äç‚ôÇÔ∏è',
                requirement: { type: 'investigations', value: 5 },
                rarity: 'common',
                sound: 'success-medium',
                isUnlocked: false
            },
            {
                id: 'expert',
                name: '–≠–∫—Å–ø–µ—Ä—Ç',
                description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ 50 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
                icon: 'üïµÔ∏è',
                requirement: { type: 'investigations', value: 50 },
                rarity: 'rare',
                sound: 'success-heavy',
                isUnlocked: false
            },
            {
                id: 'sharp_eye',
                name: '–ú–µ—Ç–∫–∏–π –≥–ª–∞–∑',
                description: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ç–æ—á–Ω–æ—Å—Ç—å 80% –º–∏–Ω–∏–º—É–º –≤ 10 –∏–≥—Ä–∞—Ö',
                category: '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
                icon: 'üéØ',
                requirement: { type: 'accuracy', value: 80, minGames: 10 },
                rarity: 'epic',
                sound: 'success-heavy',
                isUnlocked: false
            },
            {
                id: 'serial_detective',
                name: '–°–µ—Ä–∏–π–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
                description: '5 –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥',
                category: '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
                icon: 'üî•',
                requirement: { type: 'winStreak', value: 5 },
                rarity: 'epic',
                sound: 'success-epic',
                isUnlocked: false
            },
            {
                id: 'maniac',
                name: '–ú–∞–Ω—å—è–∫',
                description: '–ù–∞–±—Ä–∞–Ω–æ 1000 –æ—á–∫–æ–≤',
                category: '–û—á–∫–∏',
                icon: 'üíÄ',
                requirement: { type: 'totalScore', value: 1000 },
                rarity: 'legendary',
                sound: 'success-legendary',
                isUnlocked: false
            },
            {
                id: 'perfectionist',
                name: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
                description: '10 –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π (5/5 –æ—Ç–≤–µ—Ç–æ–≤)',
                category: '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
                icon: 'üíé',
                requirement: { type: 'perfectGames', value: 10 },
                rarity: 'epic',
                sound: 'success-heavy',
                isUnlocked: false
            },
            {
                id: 'speedster',
                name: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
                description: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 60 —Å–µ–∫—É–Ω–¥',
                category: '–°–∫–æ—Ä–æ—Å—Ç—å',
                icon: '‚ö°',
                requirement: { type: 'fastGame', value: 60 },
                rarity: 'rare',
                sound: 'success-medium',
                isUnlocked: false
            },
            {
                id: 'veteran',
                name: '–í–µ—Ç–µ—Ä–∞–Ω',
                description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ 100 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
                icon: 'üéñÔ∏è',
                requirement: { type: 'investigations', value: 100 },
                rarity: 'legendary',
                sound: 'success-legendary',
                isUnlocked: false
            }
        ];

        // –ó–∞–ø–æ–ª–Ω—è–µ–º Map –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        achievementConfigs.forEach(achievement => {
            this.achievements.set(achievement.id, achievement);
        });

        console.log(`üèÜ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.achievements.size} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
    }

    // =========================================================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú–ò –î–ê–ù–ù–´–ú–ò
    // =========================================================================

    public updateUserStats(stats: UserStats): void {
        this.userStats = stats;
        this.updateAchievementProgress();
    }

    public updateUserAchievements(userAchievements: string[]): void {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        this.achievements.forEach((achievement, id) => {
            achievement.isUnlocked = userAchievements.includes(id);
            if (achievement.isUnlocked && !achievement.unlockedAt) {
                achievement.unlockedAt = new Date();
            }
        });
    }

    // =========================================================================
    // –†–ê–°–ß–ï–¢ –ü–†–û–ì–†–ï–°–°–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
    // =========================================================================

    public getAchievementProgress(achievementId: string): number {
        const achievement = this.achievements.get(achievementId);
        if (!achievement || !this.userStats || achievement.isUnlocked) {
            return achievement?.isUnlocked ? 100 : 0;
        }

        const { requirement } = achievement;
        if (!requirement) {
            return 0;
        }

        let currentValue = 0;

        switch (requirement.type) {
            case 'investigations':
                currentValue = this.userStats.totalGames || 0;
                break;

            case 'accuracy':
                if ((this.userStats.totalGames || 0) >= (requirement.minGames || 0)) {
                    currentValue = (this.userStats.totalGames > 0)
                        ? (this.userStats.totalGames / this.userStats.totalGames) * 100
                        : 0;
                }
                break;

            case 'winStreak':
                currentValue = this.userStats.streakHistory?.length
                    ? Math.max(...this.userStats.streakHistory)
                    : 0;
                break;

            case 'totalScore':
                // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π —Å—á–µ—Ç –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                currentValue = 0; // –ó–¥–µ—Å—å –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                break;

            case 'perfectGames':
                currentValue = this.userStats.perfectGames || 0;
                break;

            case 'fastGame':
                currentValue = this.userStats.fastestGame || 0;
                // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∏–≥—Ä (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
                if (currentValue > 0 && currentValue <= requirement.value) {
                    return 100;
                }
                return 0;

            default:
                currentValue = 0;
        }

        const progress = Math.min((currentValue / requirement.value) * 100, 100);
        achievement.progress = progress;
        return progress;
    }

    private updateAchievementProgress(): void {
        if (!this.userStats) return;

        this.achievements.forEach((achievement, id) => {
            if (!achievement.isUnlocked) {
                this.getAchievementProgress(id);
            }
        });
    }

    // =========================================================================
    // –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –î–û–°–¢–ò–ñ–ï–ù–ò–Ø–•
    // =========================================================================

    public async showAchievementNotification(achievement: Achievement): Promise<void> {
        const notification: AchievementNotification = {
            achievement,
            timestamp: Date.now(),
            isShown: false
        };

        this.notificationQueue.push(notification);

        if (!this.isShowingNotification) {
            await this.processNotificationQueue();
        }
    }

    private async processNotificationQueue(): Promise<void> {
        if (this.notificationQueue.length === 0 || this.isShowingNotification) {
            return;
        }

        this.isShowingNotification = true;

        while (this.notificationQueue.length > 0) {
            const notification = this.notificationQueue.shift();
            if (notification && !notification.isShown) {
                await this.displayAchievementNotification(notification.achievement);
                notification.isShown = true;
            }
        }

        this.isShowingNotification = false;
    }

    private async displayAchievementNotification(achievement: Achievement): Promise<void> {
        return new Promise((resolve) => {
            const container = document.getElementById('achievement-notifications');
            if (!container) {
                resolve();
                return;
            }

            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const notificationElement = document.createElement('div');
            notificationElement.className = `achievement-notification rarity-${achievement.rarity}`;
            notificationElement.innerHTML = `
                <div class="notification-content">
                    <div class="achievement-icon-large">${achievement.icon}</div>
                    <div class="achievement-info">
                        <div class="achievement-unlock-title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</div>
                        <div class="achievement-name">${achievement.name}</div>
                        <div class="achievement-description">${achievement.description}</div>
                        <div class="achievement-rarity">${achievement.rarity}</div>
                    </div>
                </div>
                <div class="notification-glow"></div>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container.appendChild(notificationElement);

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
            if (achievement.sound) {
                this.playSound(achievement.sound);
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
            requestAnimationFrame(() => {
                notificationElement.classList.add('show');
            });

            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
            this.createCelebrationEffect(notificationElement);

            // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                notificationElement.classList.add('hide');

                setTimeout(() => {
                    if (notificationElement.parentNode) {
                        notificationElement.parentNode.removeChild(notificationElement);
                    }
                    resolve();
                }, 500);
            }, 4000);
        });
    }

    // =========================================================================
    // –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–´–• –î–û–°–¢–ò–ñ–ï–ù–ò–ô
    // =========================================================================

    public async handleNewAchievements(newAchievements: string[]): Promise<void> {
        for (const achievementId of newAchievements) {
            const achievement = this.achievements.get(achievementId);
            if (achievement && !achievement.isUnlocked) {
                achievement.isUnlocked = true;
                achievement.unlockedAt = new Date();

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await this.showAchievementNotification(achievement);
            }
        }
    }

    // =========================================================================
    // –†–ï–ù–î–ï–†–ò–ù–ì –î–û–°–¢–ò–ñ–ï–ù–ò–ô
    // =========================================================================

    public renderEnhancedAchievements(userAchievements: string[] = []): void {
        const container = document.getElementById('achievements-grid');
        if (!container) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        this.updateUserAchievements(userAchievements);

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        const sortedAchievements = Array.from(this.achievements.values()).sort((a, b) => {
            if (a.isUnlocked && !b.isUnlocked) return -1;
            if (!a.isUnlocked && b.isUnlocked) return 1;

            const rarityOrder = { common: 1, rare: 2, epic: 3, legendary: 4, mythic: 5 };
            return rarityOrder[b.rarity] - rarityOrder[a.rarity];
        });

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        sortedAchievements.forEach(achievement => {
            const element = this.createEnhancedAchievementElement(achievement);
            container.appendChild(element);
        });

        console.log(`üèÜ –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${sortedAchievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
    }

    private createEnhancedAchievementElement(achievement: Achievement): HTMLElement {
        const progress = this.getAchievementProgress(achievement.id);

        const card = document.createElement('div');
        card.className = `achievement-card ${achievement.isUnlocked ? 'unlocked' : 'locked'} rarity-${achievement.rarity}`;
        card.dataset.achievementId = achievement.id;

        card.innerHTML = `
            <div class="achievement-card-inner">
                <div class="achievement-icon-container">
                    <div class="achievement-icon">${achievement.icon}</div>
                    ${achievement.isUnlocked ? '<div class="unlock-badge">‚úì</div>' : ''}
                </div>
                
                <div class="achievement-content">
                    <h3 class="achievement-name">${achievement.name}</h3>
                    <p class="achievement-description">${achievement.description}</p>
                    <div class="achievement-category">${achievement.category}</div>
                    
                    ${!achievement.isUnlocked ? `
                        <div class="achievement-progress">
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${progress}%"></div>
                                <div class="progress-glow"></div>
                            </div>
                            <span class="progress-text">${Math.round(progress)}%</span>
                        </div>
                    ` : achievement.unlockedAt ? `
                        <div class="unlock-date">
                            –ü–æ–ª—É—á–µ–Ω–æ: ${achievement.unlockedAt.toLocaleDateString()}
                        </div>
                    ` : ''}
                </div>
                
                <div class="rarity-indicator rarity-${achievement.rarity}">
                    ${achievement.rarity}
                </div>
            </div>
            
            <div class="card-glow"></div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        card.addEventListener('click', () => {
            this.showAchievementModal(achievement.id, achievement.isUnlocked, []);
        });

        return card;
    }

    // =========================================================================
    // –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –î–û–°–¢–ò–ñ–ï–ù–ò–Ø
    // =========================================================================

    public showAchievementModal(achievementId: string, isUnlocked: boolean, userAchievements: string[] = []): void {
        const achievement = this.achievements.get(achievementId);
        if (!achievement) return;

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.hideAchievementModal();

        const modal = this.createAchievementModal();
        const progress = this.getAchievementProgress(achievementId);

        modal.innerHTML = `
            <div class="modal-overlay">
                <div class="modal-content achievement-modal-content rarity-${achievement.rarity}">
                    <div class="modal-header">
                        <h2 class="modal-title">${achievement.name}</h2>
                        <button class="modal-close" aria-label="–ó–∞–∫—Ä—ã—Ç—å">&times;</button>
                    </div>
                    
                    <div class="modal-body">
                        <div class="achievement-large-display">
                            <div class="achievement-icon-large">${achievement.icon}</div>
                            <div class="achievement-rarity-badge rarity-${achievement.rarity}">
                                ${achievement.rarity}
                            </div>
                        </div>
                        
                        <div class="achievement-details">
                            <p class="achievement-description-full">${achievement.description}</p>
                            <div class="achievement-category-full">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${achievement.category}</div>
                            
                            ${achievement.isUnlocked ? `
                                <div class="unlock-status unlocked">
                                    <div class="unlock-icon">üéâ</div>
                                    <div class="unlock-text">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</div>
                                    ${achievement.unlockedAt ? `
                                        <div class="unlock-date">${achievement.unlockedAt.toLocaleDateString()}</div>
                                    ` : ''}
                                </div>
                            ` : `
                                <div class="unlock-status locked">
                                    <div class="progress-section">
                                        <div class="progress-label">–ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.round(progress)}%</div>
                                        <div class="progress-bar-large">
                                            <div class="progress-fill" style="width: ${progress}%"></div>
                                        </div>
                                    </div>
                                    <div class="requirement-text">
                                        ${achievement.requirement ? this.getRequirementText(achievement.requirement) : '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
                                    </div>
                                    <div class="tips-text">
                                        ${this.getTipsText(achievementId)}
                                    </div>
                                </div>
                            `}
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('click', (e) => {
            if (e.target === modal.querySelector('.modal-overlay') ||
                e.target === modal.querySelector('.modal-close')) {
                this.hideAchievementModal();
            }
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            modal.classList.add('show');
        });
    }

    private createAchievementModal(): HTMLElement {
        const modal = document.createElement('div');
        modal.id = 'achievement-modal';
        modal.className = 'achievement-modal';
        return modal;
    }

    public hideAchievementModal(): void {
        const modal = document.getElementById('achievement-modal');
        if (modal) {
            modal.classList.add('hide');
            setTimeout(() => {
                if (modal.parentNode) {
                    modal.parentNode.removeChild(modal);
                }
            }, 300);
        }
    }

    // =========================================================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // =========================================================================

    private getRequirementText(requirement: AchievementRequirement): string {
        switch (requirement.type) {
            case 'investigations':
                return `–ü—Ä–æ–≤–µ–¥–∏—Ç–µ ${requirement.value} —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π`;
            case 'accuracy':
                return `–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ ${requirement.value}% –≤ ${requirement.minGames || 1} –∏–≥—Ä–∞—Ö`;
            case 'winStreak':
                return `–í—ã–∏–≥—Ä–∞–π—Ç–µ ${requirement.value} –∏–≥—Ä –ø–æ–¥—Ä—è–¥`;
            case 'totalScore':
                return `–ù–∞–±–µ—Ä–∏—Ç–µ ${requirement.value.toLocaleString()} –æ—á–∫–æ–≤`;
            case 'perfectGames':
                return `–ó–∞–≤–µ—Ä—à–∏—Ç–µ ${requirement.value} –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä (5/5 –æ—Ç–≤–µ—Ç–æ–≤)`;
            case 'fastGame':
                return `–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–≥—Ä—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ ${requirement.value} —Å–µ–∫—É–Ω–¥`;
            default:
                return '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ';
        }
    }

    private getTipsText(achievementId: string): string {
        const tips: Record<string, string> = {
            first_case: '–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å!',
            rookie: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞',
            expert: '–†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º',
            sharp_eye: '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞–π—Ç–µ —É–ª–∏–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º',
            serial_detective: '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ, –∞ –Ω–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏',
            maniac: '–ö–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ—á–∫–∏',
            perfectionist: '–û—Ç–≤–µ—á–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤',
            speedster: '–ë—ã—Å—Ç—Ä–æ —á–∏—Ç–∞–π—Ç–µ –∏ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è',
            veteran: '–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ - –∫–ª—é—á –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É'
        };

        return tips[achievementId] || '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏!';
    }

    // =========================================================================
    // –ó–í–£–ö–û–í–´–ï –≠–§–§–ï–ö–¢–´
    // =========================================================================

    private initSoundEffects(): void {
        this.soundEffects.set('success-light', { name: 'light', volume: 0.3, duration: 500 });
        this.soundEffects.set('success-medium', { name: 'medium', volume: 0.5, duration: 800 });
        this.soundEffects.set('success-heavy', { name: 'heavy', volume: 0.7, duration: 1200 });
        this.soundEffects.set('success-epic', { name: 'epic', volume: 0.8, duration: 1500 });
        this.soundEffects.set('success-legendary', { name: 'legendary', volume: 1.0, duration: 2000 });

        console.log('üîä –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    private playSound(type: AchievementSound): void {
        try {
            // –°–æ–∑–¥–∞–µ–º –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ Web Audio API
            const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
            const soundEffect = this.soundEffects.get(type);

            if (!soundEffect) return;

            // –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–≤—É–∫
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();

            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤—É–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            switch (type) {
                case 'success-light':
                    oscillator.frequency.setValueAtTime(440, audioContext.currentTime);
                    break;
                case 'success-medium':
                    oscillator.frequency.setValueAtTime(554, audioContext.currentTime);
                    break;
                case 'success-heavy':
                    oscillator.frequency.setValueAtTime(659, audioContext.currentTime);
                    break;
                case 'success-epic':
                    oscillator.frequency.setValueAtTime(740, audioContext.currentTime);
                    break;
                case 'success-legendary':
                    oscillator.frequency.setValueAtTime(880, audioContext.currentTime);
                    break;
            }

            oscillator.type = 'sine';
            gainNode.gain.setValueAtTime(0, audioContext.currentTime);
            gainNode.gain.linearRampToValueAtTime(soundEffect.volume, audioContext.currentTime + 0.1);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + soundEffect.duration / 1000);

            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + soundEffect.duration / 1000);

        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:', error);
        }
    }

    // =========================================================================
    // –í–ò–ó–£–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´
    // =========================================================================

    private createCelebrationEffect(element: HTMLElement): void {
        const rect = element.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;

        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
        for (let i = 0; i < 20; i++) {
            this.createConfettiParticle(centerX, centerY);
        }
    }

    private createConfettiParticle(x: number, y: number): void {
        const particle = document.createElement('div');
        particle.className = 'confetti-particle';

        const colors = ['#FFD700', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7'];
        const color = colors[Math.floor(Math.random() * colors.length)];

        particle.style.cssText = `
            position: fixed;
            top: ${y}px;
            left: ${x}px;
            width: 8px;
            height: 8px;
            background: ${color};
            pointer-events: none;
            z-index: 10000;
            border-radius: 2px;
        `;

        document.body.appendChild(particle);

        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
        const angle = Math.random() * 2 * Math.PI;
        const velocity = Math.random() * 200 + 100;
        const gravity = 500;

        let currentX = x;
        let currentY = y;
        let velocityX = Math.cos(angle) * velocity;
        let velocityY = Math.sin(angle) * velocity;

        const startTime = Date.now();
        const animate = () => {
            const elapsed = (Date.now() - startTime) / 1000;

            currentX += velocityX * 0.016;
            currentY += velocityY * 0.016;
            velocityY += gravity * 0.016;

            particle.style.left = `${currentX}px`;
            particle.style.top = `${currentY}px`;
            particle.style.opacity = `${Math.max(0, 1 - elapsed / 2)}`;

            if (elapsed < 2 && currentY < window.innerHeight + 50) {
                requestAnimationFrame(animate);
            } else {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }
        };

        requestAnimationFrame(animate);
    }

    // =========================================================================
    // –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–¢–ï–ô–ù–ï–†–û–í –ò –°–¢–ò–õ–ï–ô
    // =========================================================================

    private createNotificationContainer(): void {
        let container = document.getElementById('achievement-notifications');
        if (!container) {
            container = document.createElement('div');
            container.id = 'achievement-notifications';
            container.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 10000;
                pointer-events: none;
            `;
            document.body.appendChild(container);
        }
    }

    private injectStyles(): void {
        const styleId = 'achievement-system-styles';
        if (document.getElementById(styleId)) return;

        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
            /* –°—Ç–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */
            .achievement-card {
                position: relative;
                border-radius: 12px;
                padding: 16px;
                margin: 8px;
                border: 2px solid transparent;
                background: linear-gradient(145deg, #2c2c2c, #1a1a1a);
                cursor: pointer;
                transition: all 0.3s ease;
                overflow: hidden;
            }

            .achievement-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.3);
            }

            .achievement-card.unlocked {
                border-color: #4CAF50;
                background: linear-gradient(145deg, #2d5a2d, #1a3d1a);
            }

            .achievement-card.locked {
                opacity: 0.7;
                border-color: #666;
            }

            /* –†–µ–¥–∫–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */
            .rarity-common { border-color: #808080; }
            .rarity-rare { border-color: #0077be; }
            .rarity-epic { border-color: #9932cc; }
            .rarity-legendary { border-color: #ff8c00; }
            .rarity-mythic { border-color: #ff0080; }

            /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
            .achievement-notification {
                background: linear-gradient(145deg, #2c2c2c, #1a1a1a);
                border-radius: 12px;
                padding: 16px;
                margin-bottom: 12px;
                border-left: 4px solid #4CAF50;
                opacity: 0;
                transform: translateX(100%);
                transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
                pointer-events: auto;
                max-width: 300px;
            }

            .achievement-notification.show {
                opacity: 1;
                transform: translateX(0);
            }

            .achievement-notification.hide {
                opacity: 0;
                transform: translateX(100%);
            }

            /* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */
            .achievement-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                z-index: 10001;
                opacity: 0;
                transition: opacity 0.3s ease;
            }

            .achievement-modal.show {
                opacity: 1;
            }

            .modal-overlay {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .modal-content {
                background: linear-gradient(145deg, #2c2c2c, #1a1a1a);
                border-radius: 16px;
                padding: 24px;
                max-width: 500px;
                width: 90%;
                max-height: 80vh;
                overflow-y: auto;
                border: 2px solid #444;
            }

            /* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã */
            .progress-bar {
                background: #333;
                border-radius: 8px;
                height: 8px;
                overflow: hidden;
                position: relative;
            }

            .progress-fill {
                background: linear-gradient(90deg, #4CAF50, #45a049);
                height: 100%;
                transition: width 1s ease;
                border-radius: 8px;
            }

            /* –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ */
            .confetti-particle {
                animation: confetti-fall 2s linear forwards;
            }

            @keyframes confetti-fall {
                to {
                    transform: translateY(100vh) rotate(720deg);
                    opacity: 0;
                }
            }

            /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
            @media (max-width: 768px) {
                .achievement-notification {
                    max-width: calc(100vw - 40px);
                }
                
                .modal-content {
                    width: 95%;
                    padding: 16px;
                }
            }
        `;

        document.head.appendChild(style);
    }

    // =========================================================================
    // –ì–ï–¢–¢–ï–†–´ –ò –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´
    // =========================================================================

    public getAllAchievements(): Achievement[] {
        return Array.from(this.achievements.values());
    }

    public getAchievement(id: string): Achievement | undefined {
        return this.achievements.get(id);
    }

    public getUnlockedAchievements(): Achievement[] {
        return this.getAllAchievements().filter(a => a.isUnlocked);
    }

    public getLockedAchievements(): Achievement[] {
        return this.getAllAchievements().filter(a => !a.isUnlocked);
    }

    public getAchievementsByCategory(category: string): Achievement[] {
        return this.getAllAchievements().filter(a => a.category === category);
    }

    public getAchievementsByRarity(rarity: string): Achievement[] {
        return this.getAllAchievements().filter(a => a.rarity === rarity);
    }

    public isReady(): boolean {
        return this.isInitialized;
    }

    // =========================================================================
    // –î–ï–°–¢–†–£–ö–¢–û–†
    // =========================================================================

    public destroy(): void {
        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.notificationQueue = [];
        this.isShowingNotification = false;

        // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        const notificationContainer = document.getElementById('achievement-notifications');
        if (notificationContainer) {
            notificationContainer.remove();
        }

        this.hideAchievementModal();

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∏–ª–∏
        const styles = document.getElementById('achievement-system-styles');
        if (styles) {
            styles.remove();
        }

        console.log('üßπ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
    }
}

// =============================================================================
// –≠–ö–°–ü–û–†–¢ SINGLETON –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê
// =============================================================================

export const achievementSystem = new AchievementSystem(); 