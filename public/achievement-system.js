/**
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –ë–ª–µ—Ñ"
 * –í–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
 */

class AchievementSystem {
    constructor() {
        this.achievements = [];
        this.userStats = null;
        this.isInitialized = false;
        this.notificationQueue = [];
        this.isShowingNotification = false;

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        this.achievementConfig = {
            first_case: {
                id: 'first_case',
                name: '–ü–µ—Ä–≤–æ–µ –¥–µ–ª–æ',
                description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
                category: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
                icon: this.getAdvancedIcon('first_case'),
                requirement: { type: 'investigations', value: 1 },
                rarity: 'common',
                sound: 'success-light'
            },
            rookie: {
                id: 'rookie',
                name: '–ù–æ–≤–∏—á–æ–∫',
                description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ 5 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
                icon: this.getAdvancedIcon('rookie'),
                requirement: { type: 'investigations', value: 5 },
                rarity: 'common',
                sound: 'success-medium'
            },
            expert: {
                id: 'expert',
                name: '–≠–∫—Å–ø–µ—Ä—Ç',
                description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ 50 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
                icon: this.getAdvancedIcon('expert'),
                requirement: { type: 'investigations', value: 50 },
                rarity: 'rare',
                sound: 'success-heavy'
            },
            sharp_eye: {
                id: 'sharp_eye',
                name: '–ú–µ—Ç–∫–∏–π –≥–ª–∞–∑',
                description: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ç–æ—á–Ω–æ—Å—Ç—å 80% –º–∏–Ω–∏–º—É–º –≤ 10 –∏–≥—Ä–∞—Ö',
                category: '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
                icon: this.getAdvancedIcon('sharp_eye'),
                requirement: { type: 'accuracy', value: 80, minGames: 10 },
                rarity: 'epic',
                sound: 'success-heavy'
            },
            serial_detective: {
                id: 'serial_detective',
                name: '–°–µ—Ä–∏–π–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
                description: '5 –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥',
                category: '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
                icon: this.getAdvancedIcon('serial_detective'),
                requirement: { type: 'winStreak', value: 5 },
                rarity: 'epic',
                sound: 'success-epic'
            },
            maniac: {
                id: 'maniac',
                name: '–ú–∞–Ω—å—è–∫',
                description: '–ù–∞–±—Ä–∞–Ω–æ 1000 –æ—á–∫–æ–≤',
                category: '–û—á–∫–∏',
                icon: this.getAdvancedIcon('maniac'),
                requirement: { type: 'totalScore', value: 1000 },
                rarity: 'legendary',
                sound: 'success-legendary'
            },
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            perfectionist: {
                id: 'perfectionist',
                name: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
                description: '10 –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π (5/5 –æ—Ç–≤–µ—Ç–æ–≤)',
                category: '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
                icon: this.getAdvancedIcon('perfectionist'),
                requirement: { type: 'perfectGames', value: 10 },
                rarity: 'epic',
                sound: 'success-heavy'
            },
            speedster: {
                id: 'speedster',
                name: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
                description: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 60 —Å–µ–∫—É–Ω–¥',
                category: '–°–∫–æ—Ä–æ—Å—Ç—å',
                icon: this.getAdvancedIcon('speedster'),
                requirement: { type: 'fastGame', value: 60 },
                rarity: 'rare',
                sound: 'success-medium'
            },
            veteran: {
                id: 'veteran',
                name: '–í–µ—Ç–µ—Ä–∞–Ω',
                description: '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ 100 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                category: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
                icon: this.getAdvancedIcon('veteran'),
                requirement: { type: 'investigations', value: 100 },
                rarity: 'legendary',
                sound: 'success-legendary'
            }
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    init() {
        if (this.isInitialized) return;

        console.log('üèÜ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');

        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.injectStyles();

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.createNotificationContainer();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.initSoundEffects();

        this.isInitialized = true;
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏–∫–æ–Ω–æ–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    getAdvancedIcon(achievementId) {
        const icons = {
            first_case: `
                <defs>
                    <linearGradient id="grad-${achievementId}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:#FFD700;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#FFA500;stop-opacity:1" />
                    </linearGradient>
                </defs>
                <path fill="url(#grad-${achievementId})" d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                <circle cx="12" cy="12" r="2" fill="#FFF" opacity="0.8"/>
            `,
            rookie: `
                <defs>
                    <linearGradient id="grad-${achievementId}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:#87CEEB;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#4682B4;stop-opacity:1" />
                    </linearGradient>
                </defs>
                <circle fill="url(#grad-${achievementId})" cx="12" cy="8" r="7" />
                <path fill="#FFF" d="M8.21 13.89L7 23l5-3 5 3-1.21-9.12" opacity="0.9"/>
            `,
            expert: `
                <defs>
                    <linearGradient id="grad-${achievementId}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:#9932CC;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#8A2BE2;stop-opacity:1" />
                    </linearGradient>
                </defs>
                <path fill="url(#grad-${achievementId})" d="M20 7H4a2 2 0 00-2 2v10a2 2 0 002 2h16a2 2 0 002-2V9a2 2 0 00-2-2z" />
                <path fill="#FFF" d="M16 21V5a2 2 0 00-2-2h-4a2 2 0 00-2 2v16" opacity="0.9"/>
                <rect x="10" y="9" width="4" height="2" fill="#FFD700"/>
            `,
            sharp_eye: `
                <defs>
                    <linearGradient id="grad-${achievementId}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:#FF6347;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#DC143C;stop-opacity:1" />
                    </linearGradient>
                </defs>
                <circle fill="url(#grad-${achievementId})" cx="12" cy="12" r="10" />
                <path fill="#FFF" stroke="#FFF" stroke-width="2" d="M8 12l2 2 4-4" />
                <circle cx="12" cy="12" r="3" fill="none" stroke="#FFF" stroke-width="1"/>
            `,
            serial_detective: `
                <defs>
                    <linearGradient id="grad-${achievementId}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:#32CD32;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#228B22;stop-opacity:1" />
                    </linearGradient>
                </defs>
                <path fill="url(#grad-${achievementId})" d="M9 11l3 3L22 4" stroke="#FFF" stroke-width="2"/>
                <path fill="url(#grad-${achievementId})" d="M21 12v7a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h11" />
                <circle cx="15" cy="6" r="2" fill="#FFD700"/>
            `,
            maniac: `
                <defs>
                    <radialGradient id="grad-${achievementId}">
                        <stop offset="0%" style="stop-color:#FFD700;stop-opacity:1" />
                        <stop offset="70%" style="stop-color:#FF4500;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#8B0000;stop-opacity:1" />
                    </radialGradient>
                </defs>
                <circle cx="12" cy="12" r="10" fill="url(#grad-${achievementId})"/>
                <path fill="#FFF" d="M12 2v4M12 18v4M4.93 4.93l2.83 2.83M16.24 16.24l2.83 2.83M2 12h4M18 12h4M4.93 19.07l2.83-2.83M16.24 7.76l2.83-2.83" />
                <text x="12" y="16" text-anchor="middle" fill="#FFF" font-size="8" font-weight="bold">1K</text>
            `,
            perfectionist: `
                <defs>
                    <linearGradient id="grad-${achievementId}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:#E6E6FA;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#9370DB;stop-opacity:1" />
                    </linearGradient>
                </defs>
                <circle fill="url(#grad-${achievementId})" cx="12" cy="12" r="10"/>
                <path fill="#FFF" d="M7 12l3 3 6-6" stroke="#FFF" stroke-width="2"/>
                <circle cx="12" cy="12" r="6" fill="none" stroke="#FFF" stroke-width="1" stroke-dasharray="2,2"/>
            `,
            speedster: `
                <defs>
                    <linearGradient id="grad-${achievementId}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:#00BFFF;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#0080FF;stop-opacity:1" />
                    </linearGradient>
                </defs>
                <path fill="url(#grad-${achievementId})" d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"/>
                <circle cx="18" cy="6" r="1.5" fill="#FFD700"/>
                <circle cx="6" cy="18" r="1.5" fill="#FFD700"/>
            `,
            veteran: `
                <defs>
                    <linearGradient id="grad-${achievementId}" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:#DAA520;stop-opacity:1" />
                        <stop offset="50%" style="stop-color:#FFD700;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#B8860B;stop-opacity:1" />
                    </linearGradient>
                </defs>
                <circle fill="url(#grad-${achievementId})" cx="12" cy="12" r="10"/>
                <path fill="#8B0000" d="M12 4l2 6h6l-5 4 2 6-5-4-5 4 2-6-5-4h6z"/>
                <circle cx="12" cy="12" r="2" fill="#FFD700"/>
                <text x="12" y="21" text-anchor="middle" fill="#FFF" font-size="6" font-weight="bold">100</text>
            `
        };

        return icons[achievementId] || icons.first_case;
    }

    /**
     * –í–Ω–µ–¥—Ä–µ–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
     */
    injectStyles() {
        const styles = `
            <style id="achievement-system-styles">
                /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */
                .achievement-notifications {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 10000;
                    pointer-events: none;
                }

                /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ */
                .achievement-notification {
                    background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
                    border: 2px solid #FFD700;
                    border-radius: 12px;
                    padding: 16px;
                    margin-bottom: 10px;
                    display: flex;
                    align-items: center;
                    min-width: 300px;
                    max-width: 400px;
                    box-shadow: 0 8px 32px rgba(255, 215, 0, 0.3);
                    backdrop-filter: blur(10px);
                    opacity: 0;
                    transform: translateX(100%);
                    transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
                    pointer-events: auto;
                    position: relative;
                    overflow: hidden;
                }

                .achievement-notification::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: -100%;
                    width: 100%;
                    height: 100%;
                    background: linear-gradient(90deg, transparent, rgba(255, 215, 0, 0.3), transparent);
                    animation: achievement-shine 2s infinite;
                }

                .achievement-notification.show {
                    opacity: 1;
                    transform: translateX(0);
                }

                .achievement-notification.rarity-common {
                    border-color: #87CEEB;
                    box-shadow: 0 8px 32px rgba(135, 206, 235, 0.3);
                }

                .achievement-notification.rarity-rare {
                    border-color: #9932CC;
                    box-shadow: 0 8px 32px rgba(153, 50, 204, 0.3);
                }

                .achievement-notification.rarity-epic {
                    border-color: #FF6347;
                    box-shadow: 0 8px 32px rgba(255, 99, 71, 0.3);
                }

                .achievement-notification.rarity-legendary {
                    border-color: #FFD700;
                    box-shadow: 0 8px 32px rgba(255, 215, 0, 0.5);
                    animation: achievement-legendary-glow 2s infinite alternate;
                }

                .achievement-notification-icon {
                    width: 48px;
                    height: 48px;
                    margin-right: 16px;
                    flex-shrink: 0;
                    animation: achievement-icon-bounce 1s ease-out;
                }

                .achievement-notification-content {
                    flex: 1;
                    color: #fff;
                }

                .achievement-notification-title {
                    font-size: 16px;
                    font-weight: bold;
                    margin-bottom: 4px;
                    color: #FFD700;
                }

                .achievement-notification-desc {
                    font-size: 12px;
                    color: #ccc;
                    line-height: 1.3;
                }

                .achievement-notification-category {
                    font-size: 10px;
                    color: #888;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                    margin-bottom: 2px;
                }

                /* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */
                .achievement-progress {
                    margin-top: 8px;
                    background: rgba(0, 0, 0, 0.3);
                    border-radius: 4px;
                    height: 6px;
                    overflow: hidden;
                    position: relative;
                }

                .achievement-progress-bar {
                    height: 100%;
                    background: linear-gradient(90deg, #32CD32, #228B22);
                    border-radius: 4px;
                    transition: width 0.8s ease-out;
                    position: relative;
                }

                .achievement-progress-bar::after {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: -100%;
                    width: 100%;
                    height: 100%;
                    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
                    animation: progress-shine 2s infinite;
                }

                .achievement-progress-text {
                    font-size: 10px;
                    color: #ccc;
                    margin-top: 2px;
                    text-align: center;
                }

                /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */
                .achievement.unlocked {
                    transform: scale(1.02);
                    box-shadow: 0 8px 24px rgba(255, 215, 0, 0.3);
                    animation: achievement-unlock-pulse 1s ease-out;
                }

                .achievement.new-unlock {
                    animation: achievement-new-unlock 2s ease-out;
                }

                /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
                @keyframes achievement-shine {
                    0% { left: -100%; }
                    100% { left: 100%; }
                }

                @keyframes achievement-legendary-glow {
                    0% { box-shadow: 0 8px 32px rgba(255, 215, 0, 0.5); }
                    100% { box-shadow: 0 8px 32px rgba(255, 215, 0, 0.8); }
                }

                @keyframes achievement-icon-bounce {
                    0% { transform: scale(0) rotate(0deg); }
                    50% { transform: scale(1.2) rotate(180deg); }
                    100% { transform: scale(1) rotate(360deg); }
                }

                @keyframes progress-shine {
                    0% { left: -100%; }
                    100% { left: 100%; }
                }

                @keyframes achievement-unlock-pulse {
                    0% { transform: scale(1); }
                    50% { transform: scale(1.05); }
                    100% { transform: scale(1.02); }
                }

                @keyframes achievement-new-unlock {
                    0% { 
                        transform: scale(1);
                        box-shadow: 0 0 0 rgba(255, 215, 0, 0);
                    }
                    20% { 
                        transform: scale(1.1);
                        box-shadow: 0 0 20px rgba(255, 215, 0, 0.6);
                    }
                    40% { 
                        transform: scale(1.05);
                        box-shadow: 0 0 40px rgba(255, 215, 0, 0.4);
                    }
                    100% { 
                        transform: scale(1.02);
                        box-shadow: 0 8px 24px rgba(255, 215, 0, 0.3);
                    }
                }

                /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
                @media (max-width: 480px) {
                    .achievement-notifications {
                        top: 10px;
                        right: 10px;
                        left: 10px;
                    }
                    
                    .achievement-notification {
                        min-width: unset;
                        max-width: unset;
                    }
                }

                /* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */
                .achievement-modal {
                    position: fixed;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: rgba(0, 0, 0, 0.8);
                    backdrop-filter: blur(10px);
                    z-index: 10001;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    opacity: 0;
                    visibility: hidden;
                    transition: all 0.3s ease;
                    padding: 20px;
                }

                .achievement-modal.show {
                    opacity: 1;
                    visibility: visible;
                }

                .achievement-modal-content {
                    background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
                    border: 2px solid #FFD700;
                    border-radius: 16px;
                    padding: 24px;
                    max-width: 500px;
                    width: 100%;
                    max-height: 80vh;
                    overflow-y: auto;
                    position: relative;
                    transform: scale(0.7);
                    transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
                }

                .achievement-modal.show .achievement-modal-content {
                    transform: scale(1);
                }

                .achievement-modal-header {
                    display: flex;
                    align-items: center;
                    margin-bottom: 20px;
                    padding-bottom: 16px;
                    border-bottom: 1px solid rgba(255, 215, 0, 0.3);
                    position: relative;
                }

                .achievement-modal-icon {
                    width: 64px;
                    height: 64px;
                    margin-right: 16px;
                    flex-shrink: 0;
                    filter: drop-shadow(0 0 10px rgba(255, 215, 0, 0.5));
                    animation: achievement-modal-icon-glow 2s infinite alternate;
                }

                .achievement-modal-title {
                    flex: 1;
                }

                .achievement-modal-name {
                    font-size: 24px;
                    font-weight: bold;
                    color: #FFD700;
                    margin-bottom: 4px;
                    text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
                }

                .achievement-modal-rarity {
                    font-size: 12px;
                    text-transform: uppercase;
                    letter-spacing: 1px;
                    font-weight: bold;
                    padding: 4px 8px;
                    border-radius: 4px;
                    display: inline-block;
                }

                .achievement-modal-rarity.common {
                    background: rgba(135, 206, 235, 0.2);
                    color: #87CEEB;
                    border: 1px solid #87CEEB;
                }

                .achievement-modal-rarity.rare {
                    background: rgba(153, 50, 204, 0.2);
                    color: #9932CC;
                    border: 1px solid #9932CC;
                }

                .achievement-modal-rarity.epic {
                    background: rgba(255, 99, 71, 0.2);
                    color: #FF6347;
                    border: 1px solid #FF6347;
                }

                .achievement-modal-rarity.legendary {
                    background: rgba(255, 215, 0, 0.2);
                    color: #FFD700;
                    border: 1px solid #FFD700;
                    animation: achievement-modal-legendary-glow 2s infinite alternate;
                }

                .achievement-modal-close {
                    position: absolute;
                    top: -8px;
                    right: -8px;
                    width: 32px;
                    height: 32px;
                    background: #C4302B;
                    border: none;
                    border-radius: 50%;
                    color: white;
                    font-size: 18px;
                    font-weight: bold;
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    transition: all 0.2s ease;
                    box-shadow: 0 4px 12px rgba(196, 48, 43, 0.3);
                }

                .achievement-modal-close:hover {
                    background: #A02419;
                    transform: scale(1.1);
                }

                .achievement-modal-description {
                    color: #ccc;
                    font-size: 16px;
                    line-height: 1.6;
                    margin-bottom: 20px;
                    text-align: center;
                }

                .achievement-modal-requirement {
                    background: rgba(0, 0, 0, 0.3);
                    border: 1px solid rgba(255, 215, 0, 0.3);
                    border-radius: 8px;
                    padding: 16px;
                    margin-bottom: 20px;
                }

                .achievement-modal-requirement-title {
                    font-size: 14px;
                    font-weight: bold;
                    color: #FFD700;
                    margin-bottom: 8px;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }

                .achievement-modal-requirement-text {
                    color: #fff;
                    font-size: 16px;
                    margin-bottom: 12px;
                }

                .achievement-modal-progress {
                    margin-top: 16px;
                }

                .achievement-modal-progress-bar {
                    height: 8px;
                    background: rgba(0, 0, 0, 0.5);
                    border-radius: 4px;
                    overflow: hidden;
                    margin-bottom: 8px;
                    position: relative;
                    border: 1px solid rgba(255, 215, 0, 0.2);
                }

                .achievement-modal-progress-fill {
                    height: 100%;
                    background: linear-gradient(90deg, #32CD32, #228B22, #32CD32);
                    background-size: 200% 100%;
                    border-radius: 4px;
                    transition: width 1.2s cubic-bezier(0.4, 0, 0.2, 1);
                    position: relative;
                    animation: achievement-progress-gradient 3s ease-in-out infinite;
                }

                .achievement-modal-progress-fill::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: -100%;
                    width: 100%;
                    height: 100%;
                    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.6), transparent);
                    animation: achievement-progress-shine 2s infinite;
                }

                .achievement-modal-progress-fill::after {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: linear-gradient(90deg, transparent 0%, rgba(255, 215, 0, 0.3) 50%, transparent 100%);
                    animation: achievement-progress-sparkle 4s ease-in-out infinite;
                }

                /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ */
                @keyframes achievement-progress-gradient {
                    0% { background-position: 0% 50%; }
                    50% { background-position: 100% 50%; }
                    100% { background-position: 0% 50%; }
                }

                @keyframes achievement-progress-shine {
                    0% { 
                        left: -100%; 
                        opacity: 0;
                    }
                    50% { 
                        opacity: 1;
                    }
                    100% { 
                        left: 100%; 
                        opacity: 0;
                    }
                }

                @keyframes achievement-progress-sparkle {
                    0%, 100% { 
                        transform: translateX(-100%);
                        opacity: 0;
                    }
                    50% { 
                        transform: translateX(100%);
                        opacity: 1;
                    }
                }

                @keyframes achievement-progress-pulse {
                    0%, 100% { 
                        box-shadow: 0 0 5px rgba(50, 205, 50, 0.5);
                        transform: scaleY(1);
                    }
                    50% { 
                        box-shadow: 0 0 15px rgba(50, 205, 50, 0.8);
                        transform: scaleY(1.1);
                    }
                }

                .achievement-modal-progress-text {
                    font-size: 14px;
                    color: #ccc;
                    text-align: center;
                    font-weight: bold;
                    text-shadow: 0 0 5px rgba(255, 215, 0, 0.3);
                }

                .achievement-modal-unlocked {
                    text-align: center;
                    padding: 20px;
                    background: rgba(50, 205, 50, 0.1);
                    border: 1px solid #32CD32;
                    border-radius: 8px;
                    margin-bottom: 20px;
                }

                .achievement-modal-unlocked-text {
                    color: #32CD32;
                    font-size: 18px;
                    font-weight: bold;
                    margin-bottom: 8px;
                }

                .achievement-modal-unlocked-date {
                    color: #888;
                    font-size: 14px;
                }

                .achievement-modal-tips {
                    background: rgba(196, 48, 43, 0.1);
                    border: 1px solid rgba(196, 48, 43, 0.3);
                    border-radius: 8px;
                    padding: 16px;
                }

                .achievement-modal-tips-title {
                    font-size: 14px;
                    font-weight: bold;
                    color: #C4302B;
                    margin-bottom: 8px;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                }

                .achievement-modal-tips-text {
                    color: #ccc;
                    font-size: 14px;
                    line-height: 1.5;
                }

                /* –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
                @keyframes achievement-modal-icon-glow {
                    0% { filter: drop-shadow(0 0 10px rgba(255, 215, 0, 0.5)); }
                    100% { filter: drop-shadow(0 0 20px rgba(255, 215, 0, 0.8)); }
                }

                @keyframes achievement-modal-legendary-glow {
                    0% { box-shadow: 0 0 10px rgba(255, 215, 0, 0.5); }
                    100% { box-shadow: 0 0 20px rgba(255, 215, 0, 0.8); }
                }

                @media (max-width: 480px) {
                    .achievement-modal-content {
                        margin: 10px;
                        padding: 20px;
                        border-radius: 12px;
                    }
                    
                    .achievement-modal-icon {
                        width: 48px;
                        height: 48px;
                    }
                    
                    .achievement-modal-name {
                        font-size: 20px;
                    }
                }
            </style>
        `;

        document.head.insertAdjacentHTML('beforeend', styles);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    createNotificationContainer() {
        if (document.getElementById('achievement-notifications')) return;

        const container = document.createElement('div');
        container.id = 'achievement-notifications';
        container.className = 'achievement-notifications';
        document.body.appendChild(container);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
     */
    initSoundEffects() {
        // –°–æ–∑–¥–∞–µ–º Web Audio API –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        try {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            this.soundEnabled = true;
        } catch (error) {
            console.warn('Web Audio API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', error);
            this.soundEnabled = false;
        }
    }

    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
     */
    playSound(type) {
        if (!this.soundEnabled || !this.audioContext) return;

        const soundConfig = {
            'success-light': { frequency: 800, duration: 0.2 },
            'success-medium': { frequency: 1000, duration: 0.3 },
            'success-heavy': { frequency: 1200, duration: 0.4 },
            'success-epic': { frequency: 1400, duration: 0.5 },
            'success-legendary': { frequency: 1600, duration: 0.6 }
        };

        const config = soundConfig[type] || soundConfig['success-light'];

        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();

        oscillator.connect(gainNode);
        gainNode.connect(this.audioContext.destination);

        oscillator.frequency.setValueAtTime(config.frequency, this.audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(config.frequency * 0.7, this.audioContext.currentTime + config.duration);

        gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + config.duration);

        oscillator.start(this.audioContext.currentTime);
        oscillator.stop(this.audioContext.currentTime + config.duration);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateUserStats(stats) {
        this.userStats = stats;
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', stats);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    getAchievementProgress(achievementId) {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievementId}`);
        console.log('üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.userStats);

        if (!this.userStats) {
            console.warn('‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            return { current: 0, required: 1, percentage: 0 };
        }

        const config = this.achievementConfig[achievementId];
        if (!config) {
            console.warn(`‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ${achievementId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return { current: 0, required: 1, percentage: 0 };
        }

        console.log(`üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ${achievementId}:`, config.requirement);

        const req = config.requirement;
        let current = 0;
        let required = req.value;

        switch (req.type) {
            case 'investigations':
                current = this.userStats.investigations || 0;
                console.log(`üîé –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: current=${current}, required=${required}`);
                break;
            case 'accuracy':
                current = this.userStats.accuracy || 0;
                required = req.value;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä
                if (req.minGames && (this.userStats.investigations || 0) < req.minGames) {
                    current = 0;
                    console.log(`üéØ –¢–æ—á–Ω–æ—Å—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä (${this.userStats.investigations || 0} < ${req.minGames}), current=0`);
                } else {
                    console.log(`üéØ –¢–æ—á–Ω–æ—Å—Ç—å: current=${current}%, required=${required}%`);
                }
                break;
            case 'winStreak':
                current = this.userStats.winStreak || 0;
                console.log(`üî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: current=${current}, required=${required}`);
                break;
            case 'totalScore':
                current = this.userStats.totalScore || 0;
                console.log(`üíØ –û–±—â–∏–π —Å—á–µ—Ç: current=${current}, required=${required}`);
                break;
            case 'perfectGames':
                current = this.userStats.perfectGames || 0;
                console.log(`‚≠ê –ò–¥–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã: current=${current}, required=${required}`);
                break;
            case 'fastGame':
                current = this.userStats.fastestGame || 999;
                // –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ - –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É
                const result = {
                    current: Math.max(0, required - current),
                    required,
                    percentage: current <= required ? 100 : ((required / current) * 100)
                };
                console.log(`‚ö° –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞: fastestGame=${current}s, required=${required}s, result=`, result);
                return result;
        }

        const percentage = Math.min(100, (current / required) * 100);
        const result = { current, required, percentage };
        console.log(`üìà –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è ${achievementId}:`, result);
        return result;
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
     */
    showAchievementNotification(achievement) {
        const config = this.achievementConfig[achievement.id];
        if (!config) {
            console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:', achievement.id);
            return;
        }

        console.log('üèÜ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏:', achievement.name);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        this.notificationQueue.push({ achievement, config });

        // –ï—Å–ª–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑
        if (!this.isShowingNotification) {
            this.processNotificationQueue();
        }

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        this.playSound(config.sound);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ Telegram
        if (window.Telegram?.WebApp?.HapticFeedback) {
            window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async processNotificationQueue() {
        if (this.notificationQueue.length === 0) {
            this.isShowingNotification = false;
            return;
        }

        this.isShowingNotification = true;
        const { achievement, config } = this.notificationQueue.shift();

        const container = document.getElementById('achievement-notifications');
        if (!container) return;

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `achievement-notification rarity-${config.rarity}`;

        notification.innerHTML = `
            <svg class="achievement-notification-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                ${config.icon}
            </svg>
            <div class="achievement-notification-content">
                <div class="achievement-notification-title">${achievement.name}</div>
                <div class="achievement-notification-desc">${achievement.description}</div>
            </div>
        `;

        container.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => notification.classList.add('show'), 100);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';

            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 500–º—Å
                setTimeout(() => this.processNotificationQueue(), 500);
            }, 500);
        }, 4000);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     */
    handleNewAchievements(newAchievements) {
        if (!Array.isArray(newAchievements) || newAchievements.length === 0) return;

        console.log('üéâ –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', newAchievements);

        newAchievements.forEach(achievement => {
            this.showAchievementNotification(achievement);
            this.animateAchievementUnlock(achievement.id);
        });
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ UI
     */
    animateAchievementUnlock(achievementId) {
        const achievementElements = document.querySelectorAll('.achievement');

        achievementElements.forEach(element => {
            const achievementConfig = this.achievementConfig[achievementId];
            if (achievementConfig && element.dataset.achievementId === achievementId) {
                element.classList.remove('locked');
                element.classList.add('unlocked', 'new-unlock');

                // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    element.classList.remove('new-unlock');
                }, 2000);
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    updateAchievementProgress() {
        if (!this.userStats) return;

        Object.keys(this.achievementConfig).forEach(achievementId => {
            const progressElement = document.querySelector(`[data-achievement-id="${achievementId}"] .achievement-progress-bar`);
            const textElement = document.querySelector(`[data-achievement-id="${achievementId}"] .achievement-progress-text`);

            if (progressElement && textElement) {
                const progress = this.getAchievementProgress(achievementId);

                progressElement.style.width = `${progress.percentage}%`;
                textElement.textContent = `${progress.current}/${progress.required}`;
            }
        });
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    renderEnhancedAchievements(userAchievements = []) {
        const container = document.querySelector('.achievements-grid');
        if (!container) return;

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';

        Object.values(this.achievementConfig).forEach(config => {
            const isUnlocked = userAchievements.some(a => a.id === config.id);
            const progress = this.getAchievementProgress(config.id);

            const achievementEl = document.createElement('div');
            achievementEl.className = `achievement ${isUnlocked ? 'unlocked' : 'locked'} rarity-${config.rarity}`;
            achievementEl.dataset.achievementId = config.id;
            achievementEl.title = config.description;
            achievementEl.style.cursor = 'pointer';

            achievementEl.innerHTML = `
                <svg class="achievement-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    ${isUnlocked ? config.icon : '<path d="M6 10h12M6 14h12M6 18h12" stroke="currentColor" opacity="0.3"/>'}
                </svg>
                <div class="achievement-name">${isUnlocked ? config.name : '???'}</div>
                ${!isUnlocked ? `
                    <div class="achievement-progress">
                        <div class="achievement-progress-bar" style="width: ${progress.percentage}%"></div>
                    </div>
                    <div class="achievement-progress-text">${progress.current}/${progress.required}</div>
                ` : ''}
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            achievementEl.addEventListener('click', () => {
                this.showAchievementModal(config.id, isUnlocked, userAchievements);
            });

            container.appendChild(achievementEl);
        });
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
     */
    showAchievementModal(achievementId, isUnlocked, userAchievements = []) {
        const config = this.achievementConfig[achievementId];
        if (!config) return;

        console.log(`üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievementId}`);

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let modal = document.getElementById('achievement-modal');
        if (!modal) {
            modal = this.createAchievementModal();
        }

        const progress = this.getAchievementProgress(achievementId);
        const userAchievement = userAchievements.find(a => a.id === achievementId);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        const requirementText = this.getRequirementText(config.requirement);
        const tipsText = this.getTipsText(achievementId);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.querySelector('.achievement-modal-icon').innerHTML = config.icon;
        modal.querySelector('.achievement-modal-name').textContent = isUnlocked ? config.name : '???';
        modal.querySelector('.achievement-modal-rarity').textContent = config.rarity.toUpperCase();
        modal.querySelector('.achievement-modal-rarity').className = `achievement-modal-rarity ${config.rarity}`;

        modal.querySelector('.achievement-modal-description').textContent =
            isUnlocked ? config.description : '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        const requirementSection = modal.querySelector('.achievement-modal-requirement');
        const unlockedSection = modal.querySelector('.achievement-modal-unlocked');

        if (isUnlocked) {
            // –°–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            requirementSection.style.display = 'none';
            unlockedSection.style.display = 'block';
            unlockedSection.querySelector('.achievement-modal-unlocked-text').textContent = 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!';
            unlockedSection.querySelector('.achievement-modal-unlocked-date').textContent =
                userAchievement?.unlockedAt ? `–ü–æ–ª—É—á–µ–Ω–æ: ${new Date(userAchievement.unlockedAt).toLocaleDateString()}` : '';
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
            requirementSection.style.display = 'block';
            unlockedSection.style.display = 'none';

            requirementSection.querySelector('.achievement-modal-requirement-text').textContent = requirementText;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            const progressBar = requirementSection.querySelector('.achievement-modal-progress-fill');
            const progressText = requirementSection.querySelector('.achievement-modal-progress-text');

            // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progressBar.style.width = '0%';
            progressText.textContent = '0 / 0';

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                progressBar.style.width = `${progress.percentage}%`;
                progressText.textContent = `${progress.current} / ${progress.required}`;

                // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if (progress.percentage > 0 && progress.percentage < 100) {
                    progressBar.style.animation = 'achievement-progress-gradient 3s ease-in-out infinite, achievement-progress-pulse 2s ease-in-out infinite';
                }
            }, 300);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã
        modal.querySelector('.achievement-modal-tips-text').textContent = tipsText;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        modal.classList.add('show');

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        if (window.Telegram?.WebApp?.HapticFeedback) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    createAchievementModal() {
        const modal = document.createElement('div');
        modal.id = 'achievement-modal';
        modal.className = 'achievement-modal';

        modal.innerHTML = `
            <div class="achievement-modal-content">
                <div class="achievement-modal-header">
                    <svg class="achievement-modal-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    </svg>
                    <div class="achievement-modal-title">
                        <div class="achievement-modal-name"></div>
                        <div class="achievement-modal-rarity"></div>
                    </div>
                    <button class="achievement-modal-close">√ó</button>
                </div>
                
                <div class="achievement-modal-description"></div>
                
                <div class="achievement-modal-unlocked" style="display: none;">
                    <div class="achievement-modal-unlocked-text"></div>
                    <div class="achievement-modal-unlocked-date"></div>
                </div>
                
                <div class="achievement-modal-requirement">
                    <div class="achievement-modal-requirement-title">–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å</div>
                    <div class="achievement-modal-requirement-text"></div>
                    <div class="achievement-modal-progress">
                        <div class="achievement-modal-progress-bar">
                            <div class="achievement-modal-progress-fill"></div>
                        </div>
                        <div class="achievement-modal-progress-text"></div>
                    </div>
                </div>
                
                <div class="achievement-modal-tips">
                    <div class="achievement-modal-tips-title">üí° –°–æ–≤–µ—Ç –¥–µ—Ç–µ–∫—Ç–∏–≤–∞</div>
                    <div class="achievement-modal-tips-text"></div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeButton = modal.querySelector('.achievement-modal-close');
        closeButton.addEventListener('click', () => {
            this.hideAchievementModal();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.hideAchievementModal();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modal.classList.contains('show')) {
                this.hideAchievementModal();
            }
        });

        document.body.appendChild(modal);
        return modal;
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    hideAchievementModal() {
        const modal = document.getElementById('achievement-modal');
        if (modal) {
            modal.classList.remove('show');

            // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            if (window.Telegram?.WebApp?.HapticFeedback) {
                window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    getRequirementText(requirement) {
        switch (requirement.type) {
            case 'investigations':
                return `–ü—Ä–æ–≤–µ–¥–∏—Ç–µ ${requirement.value} —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π`;
            case 'accuracy':
                return `–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ ${requirement.value}% –º–∏–Ω–∏–º—É–º –≤ ${requirement.minGames || 1} –∏–≥—Ä–∞—Ö`;
            case 'winStreak':
                return `–ü—Ä–æ–≤–µ–¥–∏—Ç–µ ${requirement.value} –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥`;
            case 'totalScore':
                return `–ù–∞–±–µ—Ä–∏—Ç–µ ${requirement.value} –æ—á–∫–æ–≤`;
            case 'perfectGames':
                return `–ü—Ä–æ–≤–µ–¥–∏—Ç–µ ${requirement.value} –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π (5/5 –æ—Ç–≤–µ—Ç–æ–≤)`;
            case 'fastGame':
                return `–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–≥—Ä—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ ${requirement.value} —Å–µ–∫—É–Ω–¥`;
            default:
                return '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è';
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    getTipsText(achievementId) {
        const tips = {
            'first_case': '–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å! –í–∞—à–µ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.',
            'rookie': '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –∏–∑—É—á–∞—Ç—å –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏. –û–ø—ã—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π.',
            'expert': '–¢–µ—Ä–ø–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É. –ö–∞–∂–¥–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–µ–ª–∞–µ—Ç –≤–∞—Å –æ–ø—ã—Ç–Ω–µ–µ.',
            'sharp_eye': '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∏—â–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏. –ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏.',
            'serial_detective': '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∫–∞–∂–¥–æ–º –≤–æ–ø—Ä–æ—Å–µ. –û–¥–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç —Å–µ—Ä–∏—é.',
            'maniac': '–ë—ã—Å—Ç—Ä—ã–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–∞—é—Ç –±–æ–ª—å—à–µ –æ—á–∫–æ–≤. –ò–∑—É—á–∞–π—Ç–µ —Ç–∏–ø—ã –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π.',
            'perfectionist': '–°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –∏–¥–µ–∞–ª—É –≤ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ. –û—à–∏–±–∫–∏ —É—á–∞—Ç, –Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è.',
            'speedster': '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏. –ò–Ω—Ç—É–∏—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–∏–≤–∞ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º.',
            'veteran': '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ - –≤–∞—à –ø—É—Ç—å –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É. –ö–∞–∂–¥–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏.'
        };

        return tips[achievementId] || '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ—Ç–∫—Ä–æ—é—Ç—Å—è —Å–∞–º–∏ —Å–æ–±–æ–π.';
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
window.AchievementSystem = new AchievementSystem();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.AchievementSystem.init();
    });
} else {
    window.AchievementSystem.init();
} 