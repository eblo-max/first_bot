/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ (LeaderboardService)
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
 */

import Leaderboard, { type ILeaderboard, type UpdateAllResults } from '../models/Leaderboard';
import User, { type IUser, type UserRank } from '../models/User';

// –¢–∏–ø—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
type LeaderboardPeriod = 'day' | 'week' | 'month' | 'all';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
export interface ServiceStatus {
    isRunning: boolean;
    isUpdating: boolean;
    lastUpdateTime: Date | null;
    updateIntervalMs: number;
    nextUpdateIn: number | null;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
export interface LeaderboardUserData {
    rank: number;
    isCurrentUser: boolean;
    name: string;
    score: number;
    userRank: UserRank;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
export interface LeaderboardResult {
    leaderboard: LeaderboardUserData[];
    currentUser: LeaderboardUserData | null;
    cached: boolean;
    fallback?: boolean;
    updatedAt?: Date;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –¥–∞—Ç—ã MongoDB
interface DateFilter {
    lastVisit?: {
        $gte: Date;
    };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è lean –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserLeanDocument {
    telegramId: string;
    firstName?: string;
    lastName?: string;
    username?: string;
    nickname?: string;
    stats: {
        totalScore: number;
    };
    rank: UserRank;
}

class LeaderboardService {
    private updateInterval: NodeJS.Timeout | null = null;
    private isUpdating: boolean = false;
    private lastUpdateTime: Date | null = null;
    private readonly updateIntervalMs: number = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

    /**
     * –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
     */
    public start(): void {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...');

        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        this.updateLeaderboards();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.updateInterval = setInterval(() => {
            this.updateLeaderboards();
        }, this.updateIntervalMs);

        console.log(`‚úÖ –°–ª—É–∂–±–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.updateIntervalMs / 1000}—Å)`);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã
     */
    public stop(): void {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
            console.log('üõë –°–ª—É–∂–±–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
     */
    public async updateLeaderboards(): Promise<UpdateAllResults> {
        if (this.isUpdating) {
            console.log('‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...');
            return {};
        }

        this.isUpdating = true;
        const startTime = Date.now();

        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...');

            // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            await Leaderboard.cleanupOldEntries();

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            const results = await Leaderboard.updateAllLeaderboards();

            this.lastUpdateTime = new Date();
            const duration = Date.now() - startTime;

            console.log(`‚úÖ –†–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞ ${duration}–º—Å`);
            return results;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', error);
            throw error;
        } finally {
            this.isUpdating = false;
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
     */
    public async forceUpdatePeriod(period: LeaderboardPeriod): Promise<number> {
        try {
            console.log(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: ${period}`);
            const count = await Leaderboard.updatePeriodLeaderboard(period);
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${count}`);
            return count;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ${period}:`, error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±—ã
     */
    public getStatus(): ServiceStatus {
        return {
            isRunning: !!this.updateInterval,
            isUpdating: this.isUpdating,
            lastUpdateTime: this.lastUpdateTime,
            updateIntervalMs: this.updateIntervalMs,
            nextUpdateIn: this.updateInterval ?
                Math.max(0, this.updateIntervalMs - (Date.now() - (this.lastUpdateTime?.getTime() || 0))) :
                null
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
     */
    public async getLeaderboard(
        period: LeaderboardPeriod = 'all',
        limit: number = 20,
        currentUserId: string | null = null
    ): Promise<LeaderboardResult> {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
            const cachedLeaderboard = await Leaderboard.getLeaderboard(period, limit);

            if (cachedLeaderboard && cachedLeaderboard.length > 0) {
                console.log(`üìä –ü–æ–ª—É—á–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ ${period} (${cachedLeaderboard.length} –∑–∞–ø–∏—Å–µ–π)`);

                // –ò—â–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
                let currentUserData: LeaderboardUserData | null = null;
                const currentUserInTop = cachedLeaderboard.find(entry => entry.userId === currentUserId);

                if (currentUserInTop) {
                    currentUserData = {
                        rank: currentUserInTop.rank,
                        isCurrentUser: true,
                        name: currentUserInTop.username,
                        score: currentUserInTop.score,
                        userRank: currentUserInTop.userRank
                    };
                } else if (currentUserId) {
                    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ
                    const userPosition = await Leaderboard.getUserPosition(currentUserId, period);
                    if (userPosition) {
                        currentUserData = {
                            rank: userPosition.rank,
                            isCurrentUser: true,
                            name: userPosition.username,
                            score: userPosition.score,
                            userRank: userPosition.userRank
                        };
                    }
                }

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è frontend
                const formattedLeaderboard: LeaderboardUserData[] = cachedLeaderboard.map(entry => ({
                    rank: entry.rank,
                    isCurrentUser: entry.userId === currentUserId,
                    name: entry.username,
                    score: entry.score,
                    userRank: entry.userRank
                }));

                return {
                    leaderboard: formattedLeaderboard,
                    currentUser: currentUserData,
                    cached: true,
                    updatedAt: cachedLeaderboard[0]?.updatedAt
                };
            } else {
                console.log(`üìä –ö—ç—à –ø—É—Å—Ç –¥–ª—è ${period}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
                return await this.getFallbackLeaderboard(period, limit, currentUserId);
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ${period}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:`, error);
            return await this.getFallbackLeaderboard(period, limit, currentUserId);
        }
    }

    /**
     * Fallback - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
     */
    private async getFallbackLeaderboard(
        period: LeaderboardPeriod = 'all',
        limit: number = 20,
        currentUserId: string | null = null
    ): Promise<LeaderboardResult> {
        console.log(`üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${period}`);

        let dateFilter: DateFilter = {};
        const now = new Date();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if (period === 'day') {
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);
            dateFilter = { lastVisit: { $gte: yesterday } };
        } else if (period === 'week') {
            const lastWeek = new Date(now);
            lastWeek.setDate(lastWeek.getDate() - 7);
            dateFilter = { lastVisit: { $gte: lastWeek } };
        } else if (period === 'month') {
            const lastMonth = new Date(now);
            lastMonth.setMonth(lastMonth.getMonth() - 1);
            dateFilter = { lastVisit: { $gte: lastMonth } };
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
        const topUsers = await User.find(dateFilter)
            .sort({ 'stats.totalScore': -1 })
            .limit(limit)
            .select('telegramId firstName lastName username nickname stats.totalScore rank')
            .lean() as UserLeanDocument[];

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const leaderboard: LeaderboardUserData[] = topUsers.map((user, index) => {
            const displayName = this.formatUserDisplayName(user);

            return {
                rank: index + 1,
                isCurrentUser: user.telegramId === currentUserId,
                name: displayName,
                score: user.stats.totalScore,
                userRank: user.rank
            };
        });

        // –ò—â–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Ç–æ–ø–µ
        let currentUserData: LeaderboardUserData | null = null;
        const currentUserInTop = leaderboard.find(entry => entry.isCurrentUser);

        if (!currentUserInTop && currentUserId) {
            const user = await User.findOne({ telegramId: currentUserId }).lean() as UserLeanDocument | null;
            if (user) {
                const higherScoreCount = await User.countDocuments({
                    'stats.totalScore': { $gt: user.stats.totalScore },
                    ...dateFilter
                });

                const displayName = this.formatUserDisplayName(user);

                currentUserData = {
                    rank: higherScoreCount + 1,
                    isCurrentUser: true,
                    name: displayName,
                    score: user.stats.totalScore,
                    userRank: user.rank
                };
            }
        }

        return {
            leaderboard,
            currentUser: currentUserData,
            cached: false,
            fallback: true
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private formatUserDisplayName(user: UserLeanDocument): string {
        return user.nickname ||
            (user.firstName ? `${user.firstName} ${user.lastName || ''}`.trim() :
                (user.username || `–ò–≥—Ä–æ–∫ ${user.telegramId.slice(-4)}`));
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–ª—É–∂–±—ã
const leaderboardService = new LeaderboardService();

export default leaderboardService;
module.exports = leaderboardService; 