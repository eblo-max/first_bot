const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    telegramId: {
        type: String,
        required: true,
        unique: true,
        index: true
    },
    username: String,
    firstName: String,
    lastName: String,
    nickname: String,
    registeredAt: {
        type: Date,
        default: Date.now
    },
    lastVisit: {
        type: Date,
        default: Date.now
    },

    // üèÜ –î–ï–¢–ï–ö–¢–ò–í–ù–´–ï –ó–í–ê–ù–ò–Ø (–æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è)
    rank: {
        type: String,
        enum: [
            '–°–¢–ê–ñ–ï–†',           // 0-150 –æ—á–∫–æ–≤
            '–°–õ–ï–î–û–í–ê–¢–ï–õ–¨',      // 150-400 –æ—á–∫–æ–≤  
            '–î–ï–¢–ï–ö–¢–ò–í',         // 400-900 –æ—á–∫–æ–≤
            '–°–¢–ê–†–®–ò–ô_–î–ï–¢–ï–ö–¢–ò–í', // 900-2000 –æ—á–∫–æ–≤
            '–ò–ù–°–ü–ï–ö–¢–û–†',        // 2000-4500 –æ—á–∫–æ–≤
            '–ö–û–ú–ò–°–°–ê–†',         // 4500-10000 –æ—á–∫–æ–≤
            '–ì–õ–ê–í–ù–´–ô_–ò–ù–°–ü–ï–ö–¢–û–†',// 10000-20000 –æ—á–∫–æ–≤
            '–®–ï–§_–ü–û–õ–ò–¶–ò–ò'      // 20000+ –æ—á–∫–æ–≤
        ],
        default: '–°–¢–ê–ñ–ï–†'
    },

    // ‚≠ê –†–ï–ü–£–¢–ê–¶–ò–û–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
    reputation: {
        // –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (0-100)
        level: {
            type: Number,
            default: 50,
            min: 0,
            max: 100
        },

        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        category: {
            type: String,
            enum: ['–ö–†–ò–¢–ò–ö–£–ï–ú–´–ô', '–û–ë–´–ß–ù–´–ô', '–£–í–ê–ñ–ê–ï–ú–´–ô', '–≠–õ–ò–¢–ù–´–ô', '–õ–ï–ì–ï–ù–î–ê–†–ù–´–ô'],
            default: '–û–ë–´–ß–ù–´–ô'
        },

        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        accuracy: {
            type: Number,
            default: 0,
            min: 0,
            max: 100
        },
        speed: {
            type: Number,
            default: 0,
            min: 0,
            max: 100
        },
        consistency: {
            type: Number,
            default: 0,
            min: 0,
            max: 100
        },
        difficulty: {
            type: Number,
            default: 0,
            min: 0,
            max: 100
        }
    },

    // üìä –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    stats: {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        investigations: {
            type: Number,
            default: 0
        },
        solvedCases: {
            type: Number,
            default: 0
        },
        totalQuestions: {
            type: Number,
            default: 0
        },
        totalScore: {
            type: Number,
            default: 0
        },

        // –°–µ—Ä–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        winStreak: {
            type: Number,
            default: 0
        },
        maxWinStreak: {
            type: Number,
            default: 0
        },
        perfectGames: {
            type: Number,
            default: 0
        },

        // –¢–æ—á–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
        accuracy: {
            type: Number,
            default: 0
        },
        averageTime: {
            type: Number,
            default: 0
        },
        fastestGame: {
            type: Number,
            default: 0
        },

        // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        dailyStreakCurrent: {
            type: Number,
            default: 0
        },
        dailyStreakBest: {
            type: Number,
            default: 0
        },
        lastActiveDate: {
            type: Date,
            default: Date.now
        },

        // –°–ª–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª
        easyGames: { type: Number, default: 0 },
        mediumGames: { type: Number, default: 0 },
        hardGames: { type: Number, default: 0 },
        expertGames: { type: Number, default: 0 }
    },

    // üéØ –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
    achievements: [{
        id: String,
        name: String,
        description: String,
        category: {
            type: String,
            enum: ['–ü–†–û–ì–†–ï–°–°', '–ú–ê–°–¢–ï–†–°–¢–í–û', '–°–ö–û–†–û–°–¢–¨', '–°–ï–†–ò–ò', '–û–°–û–ë–´–ï']
        },
        rarity: {
            type: String,
            enum: ['–û–ë–´–ß–ù–û–ï', '–†–ï–î–ö–û–ï', '–≠–ü–ò–ß–ï–°–ö–û–ï', '–õ–ï–ì–ï–ù–î–ê–†–ù–û–ï']
        },
        unlockedAt: Date,
        progress: {
            current: { type: Number, default: 0 },
            target: { type: Number, default: 1 }
        }
    }],

    // üìà –ò–°–¢–û–†–ò–Ø –ò–ì–† –° –ú–ï–¢–ê–î–ê–ù–ù–´–ú–ò
    gameHistory: [{
        gameId: String,
        date: {
            type: Date,
            default: Date.now
        },
        score: Number,
        correctAnswers: Number,
        totalQuestions: Number,
        timeSpent: Number,
        difficulty: {
            type: String,
            enum: ['EASY', 'MEDIUM', 'HARD', 'EXPERT'],
            default: 'MEDIUM'
        },
        perfectGame: {
            type: Boolean,
            default: false
        },
        reputationGained: Number
    }],

    // üéÅ –ù–ê–ì–†–ê–î–´ –ò –ë–û–ù–£–°–´
    rewards: {
        experienceBonus: {
            type: Number,
            default: 1.0
        },
        reputationBonus: {
            type: Number,
            default: 1.0
        },
        nextRankProgress: {
            type: Number,
            default: 0
        }
    }
}, { timestamps: true });

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
userSchema.virtual('calculatedAccuracy').get(function () {
    if (this.stats.totalQuestions === 0) return 0;
    return Math.round((this.stats.solvedCases / this.stats.totalQuestions) * 100);
});

// üéØ –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–°–õ–ï –ò–ì–†–´
userSchema.methods.updateStatsAfterGame = function (gameResult) {
    const prevStats = { ...this.stats };

    // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.stats.investigations += 1;
    this.stats.solvedCases += gameResult.correctAnswers;
    this.stats.totalQuestions += gameResult.totalQuestions;
    this.stats.totalScore += gameResult.totalScore;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const difficulty = gameResult.difficulty || 'MEDIUM';
    if (difficulty === 'EASY') this.stats.easyGames += 1;
    else if (difficulty === 'MEDIUM') this.stats.mediumGames += 1;
    else if (difficulty === 'HARD') this.stats.hardGames += 1;
    else if (difficulty === 'EXPERT') this.stats.expertGames += 1;

    // –ü–æ–¥—Å—á–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –∏ —Å–µ—Ä–∏–π
    const isPerfectGame = gameResult.correctAnswers === gameResult.totalQuestions;
    if (isPerfectGame) {
        this.stats.perfectGames += 1;
        this.stats.winStreak += 1;
        if (this.stats.winStreak > this.stats.maxWinStreak) {
            this.stats.maxWinStreak = this.stats.winStreak;
        }
    } else {
        this.stats.winStreak = 0;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    if (gameResult.timeSpent) {
        if (this.stats.averageTime === 0) {
            this.stats.averageTime = gameResult.timeSpent;
        } else {
            this.stats.averageTime = Math.round(
                (this.stats.averageTime * (this.stats.investigations - 1) + gameResult.timeSpent) / this.stats.investigations
            );
        }

        if (this.stats.fastestGame === 0 || gameResult.timeSpent < this.stats.fastestGame) {
            this.stats.fastestGame = gameResult.timeSpent;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    this.updateDailyStreak();

    // –ü–µ—Ä–µ—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏
    this.stats.accuracy = this.calculatedAccuracy;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    this.updateReputation(gameResult, prevStats);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
    this.updateRank();

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    this.gameHistory.push({
        gameId: gameResult.gameId || `game_${Date.now()}`,
        score: gameResult.totalScore,
        correctAnswers: gameResult.correctAnswers,
        totalQuestions: gameResult.totalQuestions,
        timeSpent: gameResult.timeSpent || 0,
        difficulty: difficulty,
        perfectGame: isPerfectGame,
        reputationGained: gameResult.reputationGained || 0
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    this.checkAchievements();

    this.lastVisit = new Date();
    return this.save();
};

// ‚≠ê –°–ò–°–¢–ï–ú–ê –†–ê–°–ß–ï–¢–ê –†–ï–ü–£–¢–ê–¶–ò–ò
userSchema.methods.updateReputation = function (gameResult, prevStats) {
    const weights = {
        accuracy: 0.35,
        speed: 0.25,
        consistency: 0.25,
        difficulty: 0.15
    };

    // –†–∞—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏

    // 1. –¢–æ—á–Ω–æ—Å—Ç—å (0-100)
    const accuracyScore = Math.min(100, this.stats.accuracy * 1.2);
    this.reputation.accuracy = Math.round(accuracyScore);

    // 2. –°–∫–æ—Ä–æ—Å—Ç—å (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
    let speedScore = 0;
    if (gameResult.timeSpent && this.stats.averageTime > 0) {
        const speedRatio = this.stats.averageTime / gameResult.timeSpent;
        speedScore = Math.min(100, speedRatio * 50);
    }
    this.reputation.speed = Math.round(
        (this.reputation.speed * 0.8) + (speedScore * 0.2)
    );

    // 3. –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–∏–π –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏–≥—Ä)
    const consistencyBase = Math.min(this.stats.winStreak * 8, 60);
    const streakBonus = Math.min(this.stats.dailyStreakCurrent * 3, 30);
    const gamesPlayed = Math.min(this.stats.investigations * 0.5, 10);
    const consistencyScore = consistencyBase + streakBonus + gamesPlayed;
    this.reputation.consistency = Math.round(Math.min(100, consistencyScore));

    // 4. –°–ª–æ–∂–Ω–æ—Å—Ç—å (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤ —Ä–µ—à–∞–µ–º—ã—Ö –¥–µ–ª)
    const totalGames = this.stats.investigations;
    if (totalGames > 0) {
        const difficultyScore = (
            (this.stats.easyGames * 10) +
            (this.stats.mediumGames * 25) +
            (this.stats.hardGames * 50) +
            (this.stats.expertGames * 100)
        ) / totalGames;
        this.reputation.difficulty = Math.round(Math.min(100, difficultyScore));
    }

    // –û–±—â–∏–π —Ä–∞—Å—á–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    const totalReputation = (
        this.reputation.accuracy * weights.accuracy +
        this.reputation.speed * weights.speed +
        this.reputation.consistency * weights.consistency +
        this.reputation.difficulty * weights.difficulty
    );

    this.reputation.level = Math.round(Math.max(0, Math.min(100, totalReputation)));

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    if (this.reputation.level >= 90) this.reputation.category = '–õ–ï–ì–ï–ù–î–ê–†–ù–´–ô';
    else if (this.reputation.level >= 75) this.reputation.category = '–≠–õ–ò–¢–ù–´–ô';
    else if (this.reputation.level >= 60) this.reputation.category = '–£–í–ê–ñ–ê–ï–ú–´–ô';
    else if (this.reputation.level >= 30) this.reputation.category = '–û–ë–´–ß–ù–´–ô';
    else this.reputation.category = '–ö–†–ò–¢–ò–ö–£–ï–ú–´–ô';

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    gameResult.reputationGained = Math.round(totalReputation - (prevStats.reputation?.level || 50));
};

// üìÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ï–ñ–ï–î–ù–ï–í–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò
userSchema.methods.updateDailyStreak = function () {
    const today = new Date();
    const lastActive = new Date(this.stats.lastActiveDate);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–≥—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—á–µ—Ä–∞
    const daysDiff = Math.floor((today - lastActive) / (1000 * 60 * 60 * 24));

    if (daysDiff === 0) {
        // –ò–≥—Ä–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è - —Å–µ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
        return;
    } else if (daysDiff === 1) {
        // –ò–≥—Ä–∞–ª –≤—á–µ—Ä–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é
        this.stats.dailyStreakCurrent += 1;
        if (this.stats.dailyStreakCurrent > this.stats.dailyStreakBest) {
            this.stats.dailyStreakBest = this.stats.dailyStreakCurrent;
        }
    } else {
        // –ü—Ä–æ–ø—É—Å—Ç–∏–ª –¥–Ω–∏ - –æ–±–Ω—É–ª—è–µ–º —Å–µ—Ä–∏—é
        this.stats.dailyStreakCurrent = 1;
    }

    this.stats.lastActiveDate = today;
};

// üèÜ –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ê–ù–ì–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
userSchema.methods.updateRank = function () {
    const score = this.stats.totalScore;
    const prevRank = this.rank;

    if (score >= 20000) {
        this.rank = '–®–ï–§_–ü–û–õ–ò–¶–ò–ò';
    } else if (score >= 10000) {
        this.rank = '–ì–õ–ê–í–ù–´–ô_–ò–ù–°–ü–ï–ö–¢–û–†';
    } else if (score >= 4500) {
        this.rank = '–ö–û–ú–ò–°–°–ê–†';
    } else if (score >= 2000) {
        this.rank = '–ò–ù–°–ü–ï–ö–¢–û–†';
    } else if (score >= 900) {
        this.rank = '–°–¢–ê–†–®–ò–ô_–î–ï–¢–ï–ö–¢–ò–í';
    } else if (score >= 400) {
        this.rank = '–î–ï–¢–ï–ö–¢–ò–í';
    } else if (score >= 150) {
        this.rank = '–°–õ–ï–î–û–í–ê–¢–ï–õ–¨';
    } else {
        this.rank = '–°–¢–ê–ñ–ï–†';
    }

    // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
    const rankThresholds = [0, 150, 400, 900, 2000, 4500, 10000, 20000, Infinity];
    const currentRankIndex = rankThresholds.findIndex(threshold => score < threshold) - 1;

    if (currentRankIndex >= 0 && currentRankIndex < rankThresholds.length - 2) {
        const currentThreshold = rankThresholds[currentRankIndex];
        const nextThreshold = rankThresholds[currentRankIndex + 1];
        this.rewards.nextRankProgress = Math.round(
            ((score - currentThreshold) / (nextThreshold - currentThreshold)) * 100
        );
    } else {
        this.rewards.nextRankProgress = 100;
    }

    // –ï—Å–ª–∏ —Ä–∞–Ω–≥ –ø–æ–≤—ã—Å–∏–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    if (prevRank !== this.rank) {
        this.achievements.push({
            id: `rank_${this.rank.toLowerCase()}`,
            name: `–ó–≤–∞–Ω–∏–µ: ${this.getRankDisplayName()}`,
            description: `–ü–æ–ª—É—á–µ–Ω–æ –∑–≤–∞–Ω–∏–µ ${this.getRankDisplayName()}`,
            category: '–ü–†–û–ì–†–ï–°–°',
            rarity: this.getRankRarity(),
            unlockedAt: new Date(),
            progress: { current: 1, target: 1 }
        });
    }
};

// üéñÔ∏è –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ê–ï–ú–û–ì–û –ù–ê–ó–í–ê–ù–ò–Ø –†–ê–ù–ì–ê
userSchema.methods.getRankDisplayName = function () {
    const rankNames = {
        '–°–¢–ê–ñ–ï–†': '–°—Ç–∞–∂–µ—Ä',
        '–°–õ–ï–î–û–í–ê–¢–ï–õ–¨': '–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
        '–î–ï–¢–ï–ö–¢–ò–í': '–î–µ—Ç–µ–∫—Ç–∏–≤',
        '–°–¢–ê–†–®–ò–ô_–î–ï–¢–ï–ö–¢–ò–í': '–°—Ç–∞—Ä—à–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
        '–ò–ù–°–ü–ï–ö–¢–û–†': '–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä',
        '–ö–û–ú–ò–°–°–ê–†': '–ö–æ–º–∏—Å—Å–∞—Ä',
        '–ì–õ–ê–í–ù–´–ô_–ò–ù–°–ü–ï–ö–¢–û–†': '–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä',
        '–®–ï–§_–ü–û–õ–ò–¶–ò–ò': '–®–µ—Ñ –ø–æ–ª–∏—Ü–∏–∏'
    };
    return rankNames[this.rank] || this.rank;
};

// üåü –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–î–ö–û–°–¢–ò –†–ê–ù–ì–ê
userSchema.methods.getRankRarity = function () {
    const rankRarities = {
        '–°–¢–ê–ñ–ï–†': '–û–ë–´–ß–ù–û–ï',
        '–°–õ–ï–î–û–í–ê–¢–ï–õ–¨': '–û–ë–´–ß–ù–û–ï',
        '–î–ï–¢–ï–ö–¢–ò–í': '–û–ë–´–ß–ù–û–ï',
        '–°–¢–ê–†–®–ò–ô_–î–ï–¢–ï–ö–¢–ò–í': '–†–ï–î–ö–û–ï',
        '–ò–ù–°–ü–ï–ö–¢–û–†': '–†–ï–î–ö–û–ï',
        '–ö–û–ú–ò–°–°–ê–†': '–≠–ü–ò–ß–ï–°–ö–û–ï',
        '–ì–õ–ê–í–ù–´–ô_–ò–ù–°–ü–ï–ö–¢–û–†': '–≠–ü–ò–ß–ï–°–ö–û–ï',
        '–®–ï–§_–ü–û–õ–ò–¶–ò–ò': '–õ–ï–ì–ï–ù–î–ê–†–ù–û–ï'
    };
    return rankRarities[this.rank] || '–û–ë–´–ß–ù–û–ï';
};

// üèÖ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
userSchema.methods.checkAchievements = function () {
    const newAchievements = [];

    // === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê ===

    // –ü–µ—Ä–≤–æ–µ –¥–µ–ª–æ
    if (this.stats.investigations >= 1 && !this.hasAchievement('first_case')) {
        newAchievements.push({
            id: 'first_case',
            name: '–ü–µ—Ä–≤–æ–µ –¥–µ–ª–æ',
            description: '–ü—Ä–æ–≤–µ–ª–∏ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
            category: '–ü–†–û–ì–†–ï–°–°',
            rarity: '–û–ë–´–ß–ù–û–ï',
            unlockedAt: new Date(),
            progress: { current: 1, target: 1 }
        });
    }

    // –°–µ—Ä–∏—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    const investigationMilestones = [
        { count: 5, id: 'detective_rookie', name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤', rarity: '–û–ë–´–ß–ù–û–ï' },
        { count: 25, id: 'detective_experienced', name: '–û–ø—ã—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤', rarity: '–û–ë–´–ß–ù–û–ï' },
        { count: 50, id: 'detective_veteran', name: '–í–µ—Ç–µ—Ä–∞–Ω —Ä–æ–∑—ã—Å–∫–∞', rarity: '–†–ï–î–ö–û–ï' },
        { count: 100, id: 'detective_master', name: '–ú–∞—Å—Ç–µ—Ä —Å–ª–µ–¥—Å—Ç–≤–∏—è', rarity: '–†–ï–î–ö–û–ï' },
        { count: 250, id: 'detective_legend', name: '–õ–µ–≥–µ–Ω–¥–∞ –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∏', rarity: '–≠–ü–ò–ß–ï–°–ö–û–ï' },
        { count: 500, id: 'detective_immortal', name: '–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π —Å—ã—â–∏–∫', rarity: '–õ–ï–ì–ï–ù–î–ê–†–ù–û–ï' }
    ];

    investigationMilestones.forEach(milestone => {
        if (this.stats.investigations >= milestone.count && !this.hasAchievement(milestone.id)) {
            newAchievements.push({
                id: milestone.id,
                name: milestone.name,
                description: `–ü—Ä–æ–≤–µ–¥–µ–Ω–æ ${milestone.count} —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π`,
                category: '–ü–†–û–ì–†–ï–°–°',
                rarity: milestone.rarity,
                unlockedAt: new Date(),
                progress: { current: milestone.count, target: milestone.count }
            });
        }
    });

    // === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ú–ê–°–¢–ï–†–°–¢–í–ê ===

    // –¢–æ—á–Ω–æ—Å—Ç—å
    if (this.stats.accuracy >= 95 && this.stats.investigations >= 20 && !this.hasAchievement('perfectionist')) {
        newAchievements.push({
            id: 'perfectionist',
            name: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
            description: '–¢–æ—á–Ω–æ—Å—Ç—å 95%+ –≤ 20+ –∏–≥—Ä–∞—Ö',
            category: '–ú–ê–°–¢–ï–†–°–¢–í–û',
            rarity: '–≠–ü–ò–ß–ï–°–ö–û–ï',
            unlockedAt: new Date(),
            progress: { current: 1, target: 1 }
        });
    }

    if (this.stats.accuracy >= 90 && this.stats.investigations >= 50 && !this.hasAchievement('master_detective')) {
        newAchievements.push({
            id: 'master_detective',
            name: '–ú–∞—Å—Ç–µ—Ä-–¥–µ—Ç–µ–∫—Ç–∏–≤',
            description: '–¢–æ—á–Ω–æ—Å—Ç—å 90%+ –≤ 50+ –∏–≥—Ä–∞—Ö',
            category: '–ú–ê–°–¢–ï–†–°–¢–í–û',
            rarity: '–†–ï–î–ö–û–ï',
            unlockedAt: new Date(),
            progress: { current: 1, target: 1 }
        });
    }

    // –ò–¥–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã
    const perfectGameMilestones = [
        { count: 5, id: 'perfect_5', name: '–°–Ω–∞–π–ø–µ—Ä', rarity: '–û–ë–´–ß–ù–û–ï' },
        { count: 15, id: 'perfect_15', name: '–ë–µ–∑–æ—à–∏–±–æ—á–Ω—ã–π', rarity: '–†–ï–î–ö–û–ï' },
        { count: 50, id: 'perfect_50', name: '–ì–µ–Ω–∏–π –¥–µ–¥—É–∫—Ü–∏–∏', rarity: '–≠–ü–ò–ß–ï–°–ö–û–ï' },
        { count: 100, id: 'perfect_100', name: '–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å', rarity: '–õ–ï–ì–ï–ù–î–ê–†–ù–û–ï' }
    ];

    perfectGameMilestones.forEach(milestone => {
        if (this.stats.perfectGames >= milestone.count && !this.hasAchievement(milestone.id)) {
            newAchievements.push({
                id: milestone.id,
                name: milestone.name,
                description: `${milestone.count} –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä`,
                category: '–ú–ê–°–¢–ï–†–°–¢–í–û',
                rarity: milestone.rarity,
                unlockedAt: new Date(),
                progress: { current: milestone.count, target: milestone.count }
            });
        }
    });

    // === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –°–ö–û–†–û–°–¢–ò ===

    // –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤—Ä–µ–º—è –∏–≥—Ä—ã –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥)
    if (this.stats.fastestGame > 0 && this.stats.fastestGame <= 30 && !this.hasAchievement('speed_demon')) {
        newAchievements.push({
            id: 'speed_demon',
            name: '–î–µ–º–æ–Ω —Å–∫–æ—Ä–æ—Å—Ç–∏',
            description: '–†–µ—à–∏–ª–∏ –¥–µ–ª–æ –∑–∞ 30 —Å–µ–∫—É–Ω–¥',
            category: '–°–ö–û–†–û–°–¢–¨',
            rarity: '–†–ï–î–ö–û–ï',
            unlockedAt: new Date(),
            progress: { current: 1, target: 1 }
        });
    }

    // –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤—Ä–µ–º—è –∏–≥—Ä—ã –º–µ–Ω—å—à–µ 15 —Å–µ–∫—É–Ω–¥)
    if (this.stats.fastestGame > 0 && this.stats.fastestGame <= 15 && !this.hasAchievement('lightning_fast')) {
        newAchievements.push({
            id: 'lightning_fast',
            name: '–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π',
            description: '–†–µ—à–∏–ª–∏ –¥–µ–ª–æ –∑–∞ 15 —Å–µ–∫—É–Ω–¥',
            category: '–°–ö–û–†–û–°–¢–¨',
            rarity: '–≠–ü–ò–ß–ï–°–ö–û–ï',
            unlockedAt: new Date(),
            progress: { current: 1, target: 1 }
        });
    }

    // === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –°–ï–†–ò–ô ===

    // –°–µ—Ä–∏–∏ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä
    const streakMilestones = [
        { count: 3, id: 'streak_3', name: '–£–¥–∞—á–Ω–∞—è —Å–µ—Ä–∏—è', rarity: '–û–ë–´–ß–ù–û–ï' },
        { count: 5, id: 'streak_5', name: '–ì–æ—Ä—è—á–∞—è —Ä—É–∫–∞', rarity: '–†–ï–î–ö–û–ï' },
        { count: 10, id: 'streak_10', name: '–ù–µ–æ—Å—Ç–∞–Ω–æ–≤–∏–º—ã–π', rarity: '–≠–ü–ò–ß–ï–°–ö–û–ï' },
        { count: 20, id: 'streak_20', name: '–ú–∞—à–∏–Ω–∞ –ø—Ä–∞–≤–æ—Å—É–¥–∏—è', rarity: '–õ–ï–ì–ï–ù–î–ê–†–ù–û–ï' }
    ];

    streakMilestones.forEach(milestone => {
        if (this.stats.maxWinStreak >= milestone.count && !this.hasAchievement(milestone.id)) {
            newAchievements.push({
                id: milestone.id,
                name: milestone.name,
                description: `–°–µ—Ä–∏—è –∏–∑ ${milestone.count} –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä`,
                category: '–°–ï–†–ò–ò',
                rarity: milestone.rarity,
                unlockedAt: new Date(),
                progress: { current: milestone.count, target: milestone.count }
            });
        }
    });

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–µ—Ä–∏–∏
    const dailyStreakMilestones = [
        { count: 3, id: 'daily_3', name: '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ', rarity: '–û–ë–´–ß–ù–û–ï' },
        { count: 7, id: 'daily_7', name: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', rarity: '–†–ï–î–ö–û–ï' },
        { count: 30, id: 'daily_30', name: '–ú–µ—Å—è—á–Ω–∞—è –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å', rarity: '–≠–ü–ò–ß–ï–°–ö–û–ï' },
        { count: 100, id: 'daily_100', name: '–û–¥–µ—Ä–∂–∏–º—ã–π —Ä–∞–±–æ—Ç–æ–π', rarity: '–õ–ï–ì–ï–ù–î–ê–†–ù–û–ï' }
    ];

    dailyStreakMilestones.forEach(milestone => {
        if (this.stats.dailyStreakBest >= milestone.count && !this.hasAchievement(milestone.id)) {
            newAchievements.push({
                id: milestone.id,
                name: milestone.name,
                description: `${milestone.count} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥`,
                category: '–°–ï–†–ò–ò',
                rarity: milestone.rarity,
                unlockedAt: new Date(),
                progress: { current: milestone.count, target: milestone.count }
            });
        }
    });

    // === –û–°–û–ë–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===

    // –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (this.stats.expertGames >= 10 && !this.hasAchievement('expert_specialist')) {
        newAchievements.push({
            id: 'expert_specialist',
            name: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è',
            description: '–†–µ—à–∏–ª–∏ 10 –¥–µ–ª —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è',
            category: '–û–°–û–ë–´–ï',
            rarity: '–≠–ü–ò–ß–ï–°–ö–û–ï',
            unlockedAt: new Date(),
            progress: { current: 10, target: 10 }
        });
    }

    // –í—ã—Å–æ–∫–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è
    if (this.reputation.level >= 90 && !this.hasAchievement('legendary_reputation')) {
        newAchievements.push({
            id: 'legendary_reputation',
            name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è',
            description: '–î–æ—Å—Ç–∏–≥–ª–∏ 90+ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏',
            category: '–û–°–û–ë–´–ï',
            rarity: '–õ–ï–ì–ï–ù–î–ê–†–ù–û–ï',
            unlockedAt: new Date(),
            progress: { current: 1, target: 1 }
        });
    }

    // –†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤ (–∏–≥—Ä–∞–ª –≤–æ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    if (this.stats.easyGames > 0 && this.stats.mediumGames > 0 &&
        this.stats.hardGames > 0 && this.stats.expertGames > 0 &&
        !this.hasAchievement('versatile_detective')) {
        newAchievements.push({
            id: 'versatile_detective',
            name: '–†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
            description: '–†–µ—à–∞–ª–∏ –¥–µ–ª–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
            category: '–û–°–û–ë–´–ï',
            rarity: '–†–ï–î–ö–û–ï',
            unlockedAt: new Date(),
            progress: { current: 1, target: 1 }
        });
    }

    // –ú–∏–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –æ—á–∫–∞–º
    const scoreMilestones = [
        { score: 1000, id: 'score_1k', name: '–ü–µ—Ä–≤–∞—è —Ç—ã—Å—è—á–∞', rarity: '–û–ë–´–ß–ù–û–ï' },
        { score: 5000, id: 'score_5k', name: '–ü—è—Ç—å —Ç—ã—Å—è—á –æ—á–∫–æ–≤', rarity: '–†–ï–î–ö–û–ï' },
        { score: 10000, id: 'score_10k', name: '–î–µ—Å—è—Ç—å —Ç—ã—Å—è—á –æ—á–∫–æ–≤', rarity: '–≠–ü–ò–ß–ï–°–ö–û–ï' },
        { score: 25000, id: 'score_25k', name: '–ß–µ—Ç–≤–µ—Ä—Ç—å —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á', rarity: '–õ–ï–ì–ï–ù–î–ê–†–ù–û–ï' }
    ];

    scoreMilestones.forEach(milestone => {
        if (this.stats.totalScore >= milestone.score && !this.hasAchievement(milestone.id)) {
            newAchievements.push({
                id: milestone.id,
                name: milestone.name,
                description: `–ù–∞–±—Ä–∞–Ω–æ ${milestone.score} –æ—á–∫–æ–≤`,
                category: '–ü–†–û–ì–†–ï–°–°',
                rarity: milestone.rarity,
                unlockedAt: new Date(),
                progress: { current: milestone.score, target: milestone.score }
            });
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (newAchievements.length > 0) {
        this.achievements.push(...newAchievements);
        this.save();
    }

    return newAchievements;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
userSchema.methods.hasAchievement = function (achievementId) {
    return this.achievements.some(achievement => achievement.id === achievementId);
};

// üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –†–ï–ü–£–¢–ê–¶–ò–ò
userSchema.methods.getReputationBreakdown = function () {
    return {
        level: this.reputation.level,
        category: this.reputation.category,
        components: {
            accuracy: {
                value: this.reputation.accuracy,
                label: '–¢–æ—á–Ω–æ—Å—Ç—å',
                description: '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤'
            },
            speed: {
                value: this.reputation.speed,
                label: '–°–∫–æ—Ä–æ—Å—Ç—å',
                description: '–ë—ã—Å—Ç—Ä–æ—Ç–∞ —Ä–µ—à–µ–Ω–∏—è –¥–µ–ª'
            },
            consistency: {
                value: this.reputation.consistency,
                label: '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ',
                description: '–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –∏ —Å–µ—Ä–∏–∏'
            },
            difficulty: {
                value: this.reputation.difficulty,
                label: '–°–ª–æ–∂–Ω–æ—Å—Ç—å',
                description: '–£—Ä–æ–≤–µ–Ω—å —Ä–µ—à–∞–µ–º—ã—Ö –¥–µ–ª'
            }
        }
    };
};

// üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
userSchema.methods.getAchievementsProgress = function () {
    const categories = ['–ü–†–û–ì–†–ï–°–°', '–ú–ê–°–¢–ï–†–°–¢–í–û', '–°–ö–û–†–û–°–¢–¨', '–°–ï–†–ò–ò', '–û–°–û–ë–´–ï'];
    const rarities = ['–û–ë–´–ß–ù–û–ï', '–†–ï–î–ö–û–ï', '–≠–ü–ò–ß–ï–°–ö–û–ï', '–õ–ï–ì–ï–ù–î–ê–†–ù–û–ï'];

    const progress = {
        total: this.achievements.length,
        byCategory: {},
        byRarity: {},
        recent: this.achievements
            .filter(a => a.unlockedAt)
            .sort((a, b) => new Date(b.unlockedAt) - new Date(a.unlockedAt))
            .slice(0, 5)
    };

    categories.forEach(category => {
        progress.byCategory[category] = this.achievements.filter(a => a.category === category).length;
    });

    rarities.forEach(rarity => {
        progress.byRarity[rarity] = this.achievements.filter(a => a.rarity === rarity).length;
    });

    return progress;
};

const User = mongoose.model('User', userSchema);

module.exports = User; 