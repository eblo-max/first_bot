const mongoose = require('mongoose');

const leaderboardSchema = new mongoose.Schema({
    userId: {
        type: String,
        required: true,
        index: true
    },
    username: {
        type: String,
        required: true
    },
    firstName: String,
    lastName: String,
    nickname: String,
    score: {
        type: Number,
        required: true,
        default: 0
    },
    rank: {
        type: Number,
        required: true
    },
    userRank: {
        type: String,
        enum: ['–ù–û–í–ò–ß–û–ö', '–î–ï–¢–ï–ö–¢–ò–í', '–ò–ù–°–ü–ï–ö–¢–û–†', '–°–õ–ï–î–û–í–ê–¢–ï–õ–¨', '–≠–ö–°–ü–ï–†–¢', '–ö–†–ò–ú–ò–ù–ê–õ–ò–°–¢'],
        default: '–ù–û–í–ò–ß–û–ö'
    },
    period: {
        type: String,
        enum: ['day', 'week', 'month', 'all'],
        required: true,
        index: true
    },
    investigations: {
        type: Number,
        default: 0
    },
    accuracy: {
        type: Number,
        default: 0
    },
    winStreak: {
        type: Number,
        default: 0
    },
    lastGameDate: Date,
    updatedAt: {
        type: Date,
        default: Date.now,
        index: true
    }
}, {
    timestamps: true,
    collection: 'leaderboard'
});

// –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤—ã–±–æ—Ä–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
leaderboardSchema.index({ period: 1, score: -1, rank: 1 });

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
leaderboardSchema.index({ period: 1, userId: 1 });

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
leaderboardSchema.index({ updatedAt: 1 });

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
 */
leaderboardSchema.statics.updatePeriodLeaderboard = async function (period) {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${period}`);

    const User = mongoose.model('User');
    let dateFilter = {};
    const now = new Date();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
    switch (period) {
        case 'day':
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);
            dateFilter = { lastVisit: { $gte: yesterday } };
            break;
        case 'week':
            const lastWeek = new Date(now);
            lastWeek.setDate(lastWeek.getDate() - 7);
            dateFilter = { lastVisit: { $gte: lastWeek } };
            break;
        case 'month':
            const lastMonth = new Date(now);
            lastMonth.setMonth(lastMonth.getMonth() - 1);
            dateFilter = { lastVisit: { $gte: lastMonth } };
            break;
        case 'all':
        default:
            // –î–ª—è "–≤—Å–µ –≤—Ä–µ–º—è" —Ñ–∏–ª—å—Ç—Ä –Ω–µ –Ω—É–∂–µ–Ω
            break;
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
        const users = await User.find(dateFilter)
            .sort({ 'stats.totalScore': -1 })
            .select('telegramId firstName lastName username nickname stats rank lastVisit')
            .lean();

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ${period}: ${users.length}`);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        await this.deleteMany({ period });

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
        const leaderboardEntries = users.map((user, index) => {
            const displayName = user.nickname ||
                (user.firstName ? `${user.firstName} ${user.lastName || ''}`.trim() :
                    (user.username || `–ò–≥—Ä–æ–∫ ${user.telegramId.slice(-4)}`));

            return {
                userId: user.telegramId,
                username: displayName,
                firstName: user.firstName,
                lastName: user.lastName,
                nickname: user.nickname,
                score: user.stats.totalScore,
                rank: index + 1,
                userRank: user.rank,
                period,
                investigations: user.stats.investigations,
                accuracy: user.stats.accuracy,
                winStreak: user.stats.winStreak,
                lastGameDate: user.lastVisit,
                updatedAt: now
            };
        });

        // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–∞–∫–µ—Ç–æ–º
        if (leaderboardEntries.length > 0) {
            await this.insertMany(leaderboardEntries);
            console.log(`‚úÖ –†–µ–π—Ç–∏–Ω–≥ ${period} –æ–±–Ω–æ–≤–ª–µ–Ω: ${leaderboardEntries.length} –∑–∞–ø–∏—Å–µ–π`);
        }

        return leaderboardEntries.length;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ${period}:`, error);
        throw error;
    }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
 */
leaderboardSchema.statics.updateAllLeaderboards = async function () {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...');

    const periods = ['day', 'week', 'month', 'all'];
    const results = {};

    for (const period of periods) {
        try {
            const count = await this.updatePeriodLeaderboard(period);
            results[period] = { success: true, count };
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ${period}:`, error);
            results[period] = { success: false, error: error.message };
        }
    }

    console.log('üèÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', results);
    return results;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
 */
leaderboardSchema.statics.getLeaderboard = async function (period = 'all', limit = 20) {
    try {
        const entries = await this.find({ period })
            .sort({ rank: 1 })
            .limit(limit)
            .lean();

        console.log(`üìã –ü–æ–ª—É—á–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ ${period}: ${entries.length} –∑–∞–ø–∏—Å–µ–π`);
        return entries;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ${period}:`, error);
        throw error;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
 */
leaderboardSchema.statics.getUserPosition = async function (userId, period = 'all') {
    try {
        const entry = await this.findOne({ userId, period }).lean();
        return entry;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ ${period}:`, error);
        throw error;
    }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
 */
leaderboardSchema.statics.cleanupOldEntries = async function () {
    const oneDayAgo = new Date();
    oneDayAgo.setDate(oneDayAgo.getDate() - 1);

    try {
        const result = await this.deleteMany({
            updatedAt: { $lt: oneDayAgo }
        });

        if (result.deletedCount > 0) {
            console.log(`üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Ä–µ–π—Ç–∏–Ω–≥–∞: ${result.deletedCount}`);
        }

        return result.deletedCount;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        throw error;
    }
};

const Leaderboard = mongoose.model('Leaderboard', leaderboardSchema);

module.exports = Leaderboard; 