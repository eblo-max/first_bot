/**
 * üöÄ –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ï–† "–ö–†–ò–ú–ò–ù–ê–õ–¨–ù–´–ô –ë–õ–ï–§"
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TypeScript
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - Express —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–ª–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
 * - Telegram Mini App API
 * - MongoDB —á–µ—Ä–µ–∑ Mongoose
 * - –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (Helmet, CORS, Rate Limiting)
 * - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * - Graceful shutdown
 */

import express, { Request, Response, NextFunction, Application } from 'express';
import cors from 'cors';
import helmet from 'helmet';
import path from 'path';
import mongoose from 'mongoose';
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

console.log('üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());

// =============== –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ ===============

import { error, warn, info, httpMiddleware } from './utils/logger';

import {
    generalLimiter,
    authLimiter,
    gameLimiter,
    apiLimiter,
    staticLimiter
} from './middleware/rateLimiter';

import authRoutes from './routes/auth';
import gameRoutes from './routes/game';
import userRoutes from './routes/user';
import profileRoutes from './routes/profile';

import seedDatabase from './utils/seedData';
import * as leaderboardService from './services/leaderboardService';

// =============== –¢–ò–ü–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°–´ ===============

interface HealthCheckResponse {
    status: 'ok' | 'error';
    timestamp: string;
    uptime: number;
    environment: string | undefined;
    memory: NodeJS.MemoryUsage;
    mongodb: 'connected' | 'disconnected';
}

interface ErrorResponse {
    error: string;
    message: string;
    stack?: string;
}

interface CorsOptions {
    origin: (string | RegExp)[];
    credentials: boolean;
    optionsSuccessStatus: number;
}

interface ServerConfig {
    port: number;
    mongoURIs: (string | undefined)[];
    isProduction: boolean;
    isDevelopment: boolean;
    maxJsonSize: string;
}

// =============== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–†–í–ï–†–ê ===============

const serverConfig: ServerConfig = {
    port: parseInt(process.env.PORT || '3000', 10),
    mongoURIs: [
        process.env.MONGO_URL,
        'mongodb://localhost:27017/criminal-bluff',
        'mongodb://127.0.0.1:27017/criminal-bluff'
    ],
    isProduction: process.env.NODE_ENV === 'production',
    isDevelopment: process.env.NODE_ENV === 'development',
    maxJsonSize: process.env.MAX_JSON_SIZE || '1mb'
};

// =============== –°–û–ó–î–ê–ù–ò–ï EXPRESS –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===============

const app: Application = express();

// =============== MIDDLEWARE –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (–ü–û–†–Ø–î–û–ö –í–ê–ñ–ï–ù!) ===============

// 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ trust proxy –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–æ–≤
app.set('trust proxy', 1);

// 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Helmet CSP —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'",
                "https://telegram.org",
                "https://unpkg.com",
                "https://cdn.jsdelivr.net"],
            styleSrc: ["'self'", "'unsafe-inline'",
                "https://unpkg.com",
                "https://cdn.jsdelivr.net",
                "https://fonts.googleapis.com"],
            connectSrc: ["'self'", "https://api.telegram.org", "wss://*.telegram.org"],
            imgSrc: ["'self'", "data:", "https://telegram.org", "https://*.telegram.org"],
            fontSrc: ["'self'", "data:", "https://fonts.gstatic.com"],
            objectSrc: ["'none'"],
            mediaSrc: ["'self'"],
            frameSrc: ["'self'", "https://telegram.org", "https://*.telegram.org"],
            workerSrc: ["'self'", "blob:"]
        }
    },
    crossOriginEmbedderPolicy: false,
    hsts: {
        maxAge: 31536000,
        includeSubDomains: true,
        preload: true
    }
}));

// 3. CORS —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const corsOptions: CorsOptions = {
    origin: [
        'https://t.me',
        'https://web.telegram.org',
        /https:\/\/.*\.railway\.app$/,
        /https:\/\/.*\.vercel\.app$/,
        process.env.FRONTEND_URL,
        'http://localhost:3000'
    ].filter(Boolean) as (string | RegExp)[],
    credentials: true,
    optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

// 4. –ü–∞—Ä—Å–∏–Ω–≥ JSON —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
app.use(express.json({
    limit: serverConfig.maxJsonSize,
    strict: true
}));
app.use(express.urlencoded({
    extended: true,
    limit: serverConfig.maxJsonSize
}));

// 5. –ë–∞–∑–æ–≤—ã–π rate limiter –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(generalLimiter);

// 6. Middleware –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((_req: Request, res: Response, next: NextFunction): void => {
    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');
    next();
});

// 7. –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(httpMiddleware());

// 8. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use((_req: Request, res: Response, next: NextFunction): void => {
    res.set('X-Content-Type-Options', 'nosniff');
    res.set('X-Frame-Options', 'DENY');
    res.set('X-XSS-Protection', '1; mode=block');
    res.set('X-Download-Options', 'noopen');
    res.set('X-Permitted-Cross-Domain-Policies', 'none');
    res.set('Referrer-Policy', 'strict-origin-when-cross-origin');
    next();
});

// =============== –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ê–†–®–†–£–¢–´ ===============

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
app.get('/', staticLimiter, (req: Request, res: Response): void => {
    info('üè† –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º index.html (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)', { ip: req.ip });
    const publicPath = serverConfig.isProduction
        ? path.join(__dirname, '../../public')
        : path.join(__dirname, '../public');
    res.sendFile(path.join(publicPath, 'index.html'));
});

// –ò–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
app.get('/game', staticLimiter, (req: Request, res: Response): void => {
    info('üéÆ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º game.html', { ip: req.ip });
    const publicPath = serverConfig.isProduction
        ? path.join(__dirname, '../../public')
        : path.join(__dirname, '../public');
    res.sendFile(path.join(publicPath, 'game.html'));
});

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/profile', staticLimiter, (req: Request, res: Response): void => {
    info('üë§ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º profile.html', { ip: req.ip });
    const publicPath = serverConfig.isProduction
        ? path.join(__dirname, '../../public')
        : path.join(__dirname, '../public');
    res.sendFile(path.join(publicPath, 'profile.html'));
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å –ª–∏–º–∏—Ç–µ—Ä–æ–º
app.use('/assets', staticLimiter, express.static(
    serverConfig.isProduction
        ? path.join(__dirname, '../../public/assets')
        : path.join(__dirname, '../public/assets')
));

// CSS —Ñ–∞–π–ª—ã
app.use('/*.css', staticLimiter, express.static(
    serverConfig.isProduction
        ? path.join(__dirname, '../../public')
        : path.join(__dirname, '../public')
));

// JavaScript —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME —Ç–∏–ø–æ–º –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π
app.use('/*.js', staticLimiter, (req: Request, res: Response, next: NextFunction): void => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME —Ç–∏–ø –¥–ª—è JavaScript –º–æ–¥—É–ª–µ–π
    res.type('text/javascript');
    next();
}, express.static(
    serverConfig.isProduction
        ? path.join(__dirname, '../../public')
        : path.join(__dirname, '../public')
));

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ–¥—É–ª–µ–π –≤ –ø–∞–ø–∫–µ /modules/
app.use('/modules/*.js', staticLimiter, (req: Request, res: Response, next: NextFunction): void => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME —Ç–∏–ø –¥–ª—è –º–æ–¥—É–ª–µ–π
    res.type('text/javascript');
    res.set('Cache-Control', 'no-cache'); // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    next();
}, express.static(
    serverConfig.isProduction
        ? path.join(__dirname, '../../public')
        : path.join(__dirname, '../public')
));

// TypeScript —Ñ–∞–π–ª—ã (—Ç–æ–ª—å–∫–æ –≤ development)
if (serverConfig.isDevelopment) {
    app.use('/*.ts', staticLimiter, express.static(path.join(__dirname, '../public')));
}

// –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(staticLimiter, express.static(
    serverConfig.isProduction
        ? path.join(__dirname, '../../public')
        : path.join(__dirname, '../public'),
    {
        maxAge: serverConfig.isProduction ? '1d' : 0,
        etag: true,
        lastModified: true
    }
));

// =============== API –ú–ê–†–®–†–£–¢–´ –° –¢–ò–ü–ò–ó–ê–¶–ò–ï–ô ===============

app.use('/api/auth', authLimiter, authRoutes);
app.use('/api/game', gameLimiter, gameRoutes);
app.use('/api/user', apiLimiter, userRoutes);
app.use('/api/profile', apiLimiter, profileRoutes);

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.get('/api/health', (_req: Request, res: Response<HealthCheckResponse>): void => {
    const healthCheck: HealthCheckResponse = {
        status: 'ok',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        environment: process.env.NODE_ENV,
        memory: process.memoryUsage(),
        mongodb: mongoose.connection.readyState === 1 ? 'connected' : 'disconnected'
    };

    res.status(200).json(healthCheck);
});

// =============== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===============

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req: Request, res: Response): void => {
    warn('‚ùå 404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
        ip: req.ip,
        path: req.path,
        userAgent: req.get('User-Agent')
    });

    const publicPath = serverConfig.isProduction
        ? path.join(__dirname, '../../public')
        : path.join(__dirname, '../public');
    res.status(404).sendFile(path.join(publicPath, 'index.html'));
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err: any, req: Request, res: Response<ErrorResponse>, _next: NextFunction): void => {
    error('üí• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', {
        error: err.message,
        stack: err.stack,
        ip: req.ip,
        path: req.path
    });

    const errorResponse: ErrorResponse = {
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: serverConfig.isDevelopment ? err.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫',
        ...(serverConfig.isDevelopment && { stack: err.stack })
    };

    res.status(err.status || 500).json(errorResponse);
});

// =============== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB –ò –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===============

/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö URI
 */
const connectToMongoDB = async (): Promise<boolean> => {
    for (const uri of serverConfig.mongoURIs) {
        if (!uri) continue;

        try {
            console.log(`üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: ${uri.substring(0, uri.indexOf('://') + 6)}...`);

            await mongoose.connect(uri);

            console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

            // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await seedDatabase();

            return true;
        } catch (error: any) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${uri}: ${error.message}`);
        }
    }

    return false;
};

/**
 * Graceful shutdown –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
 */
const gracefulShutdown = (signal: string, server: any): void => {
    console.log(`üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...`);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É–∂–±—ã –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ stop
    if (leaderboardService && typeof (leaderboardService as any).stop === 'function') {
        (leaderboardService as any).stop();
    }

    server.close(() => {
        console.log('üîå HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');

        mongoose.connection.close().then(() => {
            console.log('üçÉ MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
            console.log('üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            process.exit(0);
        });
    });
};

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
const startServer = async (): Promise<void> => {
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
        const server = app.listen(serverConfig.port, () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${serverConfig.port}`);
            console.log(`üåê –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
            console.log(`üì± Telegram Mini App –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!`);
        });

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB
        const isMongoConnected = await connectToMongoDB();

        if (isMongoConnected) {
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ start
            if (leaderboardService && typeof (leaderboardService as any).start === 'function') {
                (leaderboardService as any).start();
                console.log('üìä –°–ª—É–∂–±–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞');
            }
        } else {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB!');
            console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
        process.on('SIGTERM', () => gracefulShutdown('SIGTERM', server));
        process.on('SIGINT', () => gracefulShutdown('SIGINT', server));

        console.log('‚ú® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

    } catch (error: any) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();

export default app; 