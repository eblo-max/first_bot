/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–≥—Ä (GameController)
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∏–≥—Ä
 */

import { Request, Response } from 'express';
import { Types } from 'mongoose';

import Story from '../models/Story';
import Game from '../models/Game';
import User, { type IGameResult } from '../models/User';
import { calculateScore, calculatePointsWithDetails, formatTime, generateId, shuffleArray } from '../utils/game';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
interface AuthenticatedRequest extends Request {
    user: {
        id: string;
        telegramId: string;
        username?: string;
        firstName?: string;
        lastName?: string;
    };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
interface GameStartRequest extends AuthenticatedRequest {
    query: {
        difficulty?: 'easy' | 'medium' | 'hard';
        category?: string;
    };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
interface GameSubmitRequest extends AuthenticatedRequest {
    body: {
        gameId: string;
        storyId: string;
        mistakeId: string;
        responseTime: number;
    };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
interface GameFinishRequest extends AuthenticatedRequest {
    body: {
        gameId: string;
    };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
interface ClientStoryData {
    id: string;
    title: string;
    content: string;
    difficulty: string;
    mistakes: Array<{
        id: string;
        text: string;
    }>;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
interface GameStartResponse {
    gameId: string;
    stories: ClientStoryData[];
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞
interface GameSubmitResponse {
    correct: boolean;
    explanation: string;
    points: {
        base: number;
        timeBonus: number;
        total: number;
    };
    currentScore: number;
    allAnswered: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
interface GameFinishResponse {
    gameId: string;
    totalScore: number;
    correctAnswers: number;
    totalQuestions: number;
    accuracy: number;
    timeSpent: number;
    experienceGained: number;
    leveledUp: boolean;
    newLevel?: number;
    achievementsUnlocked: Array<{
        id: string;
        name: string;
        description: string;
    }>;
    reputationChange: number;
    rank: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—à–∏–±–∫–∏
interface GameErrorResponse {
    error: string;
    code?: string;
}

// –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
type GameResponse<T> = T | GameErrorResponse;

class GameController {
    /**
     * –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
     */
    public static async handleGameStart(req: GameStartRequest, res: Response<GameResponse<GameStartResponse>>): Promise<void> {
        try {
            const userId = req.user.id;
            const { difficulty, category } = req.query;

            console.log(`üéÆ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficulty || '–ª—é–±–∞—è'}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category || '–ª—é–±–∞—è'})`);

            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const games = await Game.find({ userId })
                .select('stories.storyId')
                .lean();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π
            const playedStoryIds = games
                .flatMap(game => game.stories.map(s => s.storyId));

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            const query: any = {};

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if (difficulty && ['easy', 'medium', 'hard'].includes(difficulty)) {
                query.difficulty = difficulty;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if (category && category.trim()) {
                query.category = category.trim();
            }

            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
            let stories = await Story.find({
                ...query,
                id: { $nin: playedStoryIds }
            })
                .limit(5)
                .lean();

            console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${stories.length} –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π`);

            // –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º —É–∂–µ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ
            if (stories.length < 5) {
                const remainingCount = 5 - stories.length;
                console.log(`üìö –¢—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ ${remainingCount} –∏—Å—Ç–æ—Ä–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º —É–∂–µ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ`);

                const additionalStories = await Story.find({ ...query })
                    .sort({ timesPlayed: 1 }) // –ù–∞–∏–º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
                    .limit(remainingCount)
                    .lean();

                stories = [...stories, ...additionalStories];
            }

            if (stories.length === 0) {
                res.status(404).json({
                    error: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è –∏–≥—Ä—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏',
                    code: 'NO_STORIES_FOUND'
                });
                return;
            }

            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏
            stories = shuffleArray(stories);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
            const gameId = generateId();
            const game = new Game({
                id: gameId,
                userId,
                stories: stories.map(story => ({
                    storyId: story.id,
                    answered: false,
                    correct: false,
                    selectedMistakeId: null,
                    timeSpent: 0,
                    pointsEarned: 0
                })),
                totalScore: 0,
                startedAt: new Date(),
                status: 'active'
            });

            await game.save();
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞ ${gameId} —Å ${stories.length} –∏—Å—Ç–æ—Ä–∏—è–º–∏`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—è—Ö
            await Promise.all(stories.map(story =>
                Story.updateOne({ id: story.id }, { $inc: { timesPlayed: 1 } })
            ));

            // –ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            const responseData: GameStartResponse = {
                gameId,
                stories: stories.map(story => ({
                    id: story.id,
                    title: story.title,
                    content: story.content,
                    difficulty: story.difficulty,
                    mistakes: story.mistakes.map(mistake => ({
                        id: mistake.id,
                        text: mistake.text
                    }))
                }))
            };

            res.json(responseData);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã:', error);
            res.status(500).json({
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É',
                code: 'GAME_START_ERROR'
            });
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
     */
    public static async handleGameSubmit(req: GameSubmitRequest, res: Response<GameResponse<GameSubmitResponse>>): Promise<void> {
        try {
            const userId = req.user.id;
            const { gameId, storyId, mistakeId, responseTime } = req.body;

            if (!gameId || !storyId || !mistakeId || responseTime === undefined) {
                res.status(400).json({
                    error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                    code: 'MISSING_PARAMETERS'
                });
                return;
            }

            // ========== –í–ê–õ–ò–î–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò –û–¢–í–ï–¢–ê ==========
            console.log(`‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞: –∏–≥—Ä–∞ ${gameId}, –∏—Å—Ç–æ—Ä–∏—è ${storyId}, –≤—Ä–µ–º—è ${responseTime}ms`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            if (typeof responseTime !== 'number' || isNaN(responseTime)) {
                res.status(400).json({
                    error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º',
                    code: 'INVALID_RESPONSE_TIME'
                });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–∑–∞—â–∏—Ç–∞ –æ—Ç —á–∏—Ç–µ—Ä—Å—Ç–≤–∞)
            const MIN_RESPONSE_TIME = 500; // 0.5 —Å–µ–∫—É–Ω–¥—ã - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è
            if (responseTime < MIN_RESPONSE_TIME) {
                console.warn(`‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${responseTime}ms`);
                res.status(400).json({
                    error: '–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.',
                    code: 'RESPONSE_TOO_FAST'
                });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å—à–∏—Ö —Å–µ—Å—Å–∏–π)
            const MAX_RESPONSE_TIME = 120000; // 2 –º–∏–Ω—É—Ç—ã - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
            if (responseTime > MAX_RESPONSE_TIME) {
                console.warn(`‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${responseTime}ms`);
                res.status(400).json({
                    error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –±—ã—Å—Ç—Ä–µ–µ.',
                    code: 'RESPONSE_TOO_SLOW'
                });
                return;
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ, –Ω–æ –Ω–µ–æ–±—ã—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if (responseTime < 2000) {
                console.log(`‚ö° –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç: ${responseTime}ms –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            } else if (responseTime > 60000) {
                console.log(`üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${responseTime}ms –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            }
            // ========== –ö–û–ù–ï–¶ –í–ê–õ–ò–î–ê–¶–ò–ò ==========

            // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
            const game = await Game.findOne({ id: gameId, userId, status: 'active' });
            if (!game) {
                res.status(404).json({
                    error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                    code: 'GAME_NOT_FOUND'
                });
                return;
            }

            // –ò—â–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –∏–≥—Ä–µ
            const storyIndex = game.stories.findIndex(s => s.storyId === storyId);
            if (storyIndex === -1) {
                res.status(404).json({
                    error: '–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ',
                    code: 'STORY_NOT_FOUND'
                });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç
            if (game.stories[storyIndex].answered) {
                res.status(400).json({
                    error: '–û—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –¥–∞–Ω',
                    code: 'ALREADY_ANSWERED'
                });
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            const story = await Story.findOne({ id: storyId });
            if (!story) {
                res.status(404).json({
                    error: '–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    code: 'STORY_NOT_IN_DB'
                });
                return;
            }

            // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
            const selectedMistake = story.mistakes.find(m => m.id === mistakeId);
            if (!selectedMistake) {
                res.status(404).json({
                    error: '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    code: 'MISTAKE_NOT_FOUND'
                });
                return;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
            const isCorrect = selectedMistake.isCorrect;

            // –°—á–∏—Ç–∞–µ–º –æ—á–∫–∏ (—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º)
            const points = calculatePointsWithDetails(isCorrect, responseTime, story.difficulty as any);

            console.log(`${isCorrect ? '‚úÖ' : '‚ùå'} –û—Ç–≤–µ—Ç ${isCorrect ? '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π' : '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π'}, –æ—á–∫–∏: ${points.total}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
            game.stories[storyIndex].answered = true;
            game.stories[storyIndex].correct = isCorrect;
            game.stories[storyIndex].selectedMistakeId = mistakeId;
            game.stories[storyIndex].timeSpent = responseTime;
            game.stories[storyIndex].pointsEarned = points.total;

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
            game.totalScore += points.total;

            await game.save();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
            const allAnswered = game.stories.every(s => s.answered);

            const response: GameSubmitResponse = {
                correct: isCorrect,
                explanation: selectedMistake.explanation,
                points,
                currentScore: game.totalScore,
                allAnswered
            };

            res.json(response);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
            res.status(500).json({
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç',
                code: 'SUBMIT_ERROR'
            });
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public static async handleGameFinish(req: GameFinishRequest, res: Response<GameResponse<GameFinishResponse>>): Promise<void> {
        try {
            const userId = req.user.id;
            const { gameId } = req.body;

            if (!gameId) {
                res.status(400).json({
                    error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–≥—Ä—ã',
                    code: 'MISSING_GAME_ID'
                });
                return;
            }

            console.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã ${gameId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

            // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
            const game = await Game.findOne({ id: gameId, userId, status: 'active' });
            if (!game) {
                res.status(404).json({
                    error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                    code: 'GAME_NOT_FOUND'
                });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
            const allAnswered = game.stories.every(s => s.answered);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
            game.status = allAnswered ? 'completed' : 'abandoned';
            game.finishedAt = new Date();

            await game.save();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await User.findOne({ telegramId: userId });

            if (!user) {
                res.status(404).json({
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    code: 'USER_NOT_FOUND'
                });
                return;
            }

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
            const correctAnswers = game.stories.filter(s => s.correct).length;
            const totalQuestions = game.stories.length;
            const totalTimeSpent = game.stories.reduce((sum, s) => sum + s.timeSpent, 0);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            const gameResult: IGameResult = {
                gameId,
                totalScore: game.totalScore,
                correctAnswers,
                totalQuestions,
                timeSpent: totalTimeSpent,
                averageTime: totalTimeSpent / totalQuestions
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const prevLevel = user.stats.level;
            const prevRank = user.rank;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
            await user.updateStatsAfterGame(gameResult);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            const newAchievements = user.checkAchievements();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–≤—ã—Å–∏–ª—Å—è –ª–∏ —É—Ä–æ–≤–µ–Ω—å
            const leveledUp = user.stats.level > prevLevel;

            const response: GameFinishResponse = {
                gameId,
                totalScore: game.totalScore,
                correctAnswers,
                totalQuestions,
                accuracy: Math.round((correctAnswers / totalQuestions) * 100),
                timeSpent: totalTimeSpent,
                experienceGained: user.stats.experience,
                leveledUp,
                newLevel: leveledUp ? user.stats.level : undefined,
                achievementsUnlocked: newAchievements.map(a => ({
                    id: a.id,
                    name: a.name,
                    description: a.description
                })),
                reputationChange: user.reputation.level,
                rank: user.rank
            };

            console.log(`‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${correctAnswers}/${totalQuestions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –æ—á–∫–∏: ${game.totalScore}`);

            res.json(response);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
            res.status(500).json({
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É',
                code: 'FINISH_ERROR'
            });
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã (legacy –º–µ—Ç–æ–¥)
     */
    public static async startGame(req: AuthenticatedRequest, res: Response<GameResponse<{ gameId: string; message: string }>>): Promise<void> {
        try {
            console.log(`üéÆ Legacy –º–µ—Ç–æ–¥ startGame –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
            const gameId = 'game_' + Date.now() + '_' + Math.floor(Math.random() * 10000);

            res.status(200).json({
                gameId,
                message: '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞'
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã:', error);
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                code: 'START_GAME_ERROR'
            });
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    public static async finishGame(req: GameFinishRequest & {
        body: {
            gameId: string;
            totalScore: number;
            correctAnswers: number;
            totalQuestions: number;
        }
    }, res: Response<GameResponse<{
        message: string;
        currentScore: number;
        rank: string;
        newAchievements: any[];
    }>>): Promise<void> {
        try {
            const { gameId, totalScore, correctAnswers, totalQuestions } = req.body;
            const telegramId = req.user.telegramId;

            console.log(`üéØ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã ${gameId} –¥–ª—è ${telegramId}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (!gameId || typeof totalScore !== 'number' ||
                typeof correctAnswers !== 'number' || typeof totalQuestions !== 'number') {
                res.status(400).json({
                    error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞',
                    code: 'INVALID_PARAMETERS'
                });
                return;
            }

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await User.findOne({ telegramId });

            if (!user) {
                res.status(404).json({
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    code: 'USER_NOT_FOUND'
                });
                return;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
            const gameResult: IGameResult = {
                gameId,
                totalScore,
                correctAnswers,
                totalQuestions
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user.updateStatsAfterGame(gameResult);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            const newAchievements = user.checkAchievements();

            res.status(200).json({
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
                currentScore: user.stats.totalScore,
                rank: user.rank,
                newAchievements: newAchievements
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                code: 'FINISH_GAME_ERROR'
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    public static async getGameData(req: AuthenticatedRequest, res: Response<GameResponse<{ stories: any[] }>>): Promise<void> {
        try {
            console.log(`üìö –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);

            // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –≤—ã–±–æ—Ä–∫—É –∏–∑ –ë–î)
            const testStories = [
                {
                    id: 'test-story-1',
                    title: '–û–ì–†–ê–ë–õ–ï–ù–ò–ï –Æ–í–ï–õ–ò–†–ù–û–ì–û –ú–ê–ì–ê–ó–ò–ù–ê',
                    content: '–ü—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ –≤–∑–ª–æ–º–∞–ª –∑–∞–¥–Ω—é—é –¥–≤–µ—Ä—å —é–≤–µ–ª–∏—Ä–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ 3 —á–∞—Å–∞ –Ω–æ—á–∏. –û–Ω –æ—Ç–∫–ª—é—á–∏–ª –∫–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –Ω–æ –Ω–µ –∑–∞–º–µ—Ç–∏–ª —Å–∫—Ä—ã—Ç—É—é –∫–∞–º–µ—Ä—É –Ω–∞–¥ —Å–µ–π—Ñ–æ–º. –ù–∞ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–Ω–æ, –∫–∞–∫ –æ–Ω –±–µ–∑ –ø–µ—Ä—á–∞—Ç–æ–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–∏—Ç—Ä–∏–Ω—ã –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —É–∫—Ä–∞—à–µ–Ω–∏—è –≤ —Ä—é–∫–∑–∞–∫. –ü–µ—Ä–µ–¥ —É—Ö–æ–¥–æ–º –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ä–∞–∫–æ–≤–∏–Ω–æ–π –≤ –ø–æ–¥—Å–æ–±–∫–µ, —á—Ç–æ–±—ã —Å–º—ã—Ç—å –∫—Ä–æ–≤—å —Å –ø–æ—Ä–µ–∑–∞ –Ω–∞ —Ä—É–∫–µ.',
                    date: '12.04.2024',
                    difficulty: 'medium',
                    mistakes: [
                        {
                            id: 'mistake-1',
                            text: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª —Å–∏—Å—Ç–µ–º—É –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –Ω–µ –∑–∞–º–µ—Ç–∏–≤ —Å–∫—Ä—ã—Ç—É—é –∫–∞–º–µ—Ä—É',
                            isCorrect: false,
                            explanation: '–•–æ—Ç—è –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É —Å –∫–∞–º–µ—Ä–æ–π, —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —É–ª–∏–∫–æ–π. –ú–Ω–æ–≥–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã –Ω–µ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç –¥–µ—Ç–∞–ª–∏ –ª–∏—Ü–∞ –≤ —Ç–µ–º–Ω–æ—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–µ—Ç–∫–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.'
                        },
                        {
                            id: 'mistake-2',
                            text: '–†–∞–±–æ—Ç–∞–ª –±–µ–∑ –ø–µ—Ä—á–∞—Ç–æ–∫, –æ—Å—Ç–∞–≤–∏–≤ –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –≤–∏—Ç—Ä–∏–Ω–∞—Ö –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è—Ö',
                            isCorrect: false,
                            explanation: '–û—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤ - —Å–µ—Ä—å–µ–∑–Ω–∞—è —É–ª–∏–∫–∞, –Ω–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Ö —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∏–ª–∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞ —É–∂–µ –±—ã–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
                        },
                        {
                            id: 'mistake-3',
                            text: '–û—Å—Ç–∞–≤–∏–ª —Å–≤–æ–∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–ª–µ–¥—ã, —Å–º—ã–≤ –∫—Ä–æ–≤—å –≤ —Ä–∞–∫–æ–≤–∏–Ω–µ, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –î–ù–ö',
                            isCorrect: true,
                            explanation: '–ü—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ –æ—Å—Ç–∞–≤–∏–ª –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª (–∫—Ä–æ–≤—å), –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–∞–ª –≤ —Å–ª–∏–≤ —Ä–∞–∫–æ–≤–∏–Ω—ã. –î–∞–∂–µ –ø–æ—Å–ª–µ —Å–º—ã–≤–∞–Ω–∏—è, —Å–ª–µ–¥—ã –î–ù–ö –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–µ –∏ –≤ —Ç—Ä—É–±–∞—Ö. –ö—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç—ã –ª–µ–≥–∫–æ –∏–∑–≤–ª–µ–∫–∞—é—Ç —Ç–∞–∫–∏–µ –æ–±—Ä–∞–∑—Ü—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ–≥—É—Ç –≤—ã–¥–µ–ª–∏—Ç—å –î–ù–ö-–ø—Ä–æ—Ñ–∏–ª—å –¥–∞–∂–µ –∏–∑ –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏—Ö —Å–ª–µ–¥–æ–≤ –∫—Ä–æ–≤–∏.'
                        }
                    ]
                },
                {
                    id: 'test-story-2',
                    title: '–ö–†–ê–ñ–ê –í –ú–£–ó–ï–ï –ò–°–ö–£–°–°–¢–í',
                    content: '–í–æ –≤—Ä–µ–º—è –≤—ã—Å—Ç–∞–≤–∫–∏ –∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏—Å—Ç–æ–≤ –≤ –≥–æ—Ä–æ–¥—Å–∫–æ–º –º—É–∑–µ–µ –±—ã–ª–∞ —É–∫—Ä–∞–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∞ –ö–ª–æ–¥–∞ –ú–æ–Ω–µ. –ü—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ –ø—Ä–æ–Ω–∏–∫ –≤ –∑–¥–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤, –ø—Ä–∏—Ç–≤–æ—Ä–∏–≤—à–∏—Å—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Å–ª—É–∂–±—ã. –í –º–æ–º–µ–Ω—Ç –∫—Ä–∞–∂–∏ –æ–Ω –æ—Ç–∫–ª—é—á–∏–ª —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ 5 –º–∏–Ω—É—Ç, –±—ã—Å—Ç—Ä–æ —Å—Ä–µ–∑–∞–ª –∫–∞—Ä—Ç–∏–Ω—É —Å —Ä–∞–º—ã –∏ —Å–ø—Ä—è—Ç–∞–ª –µ—ë –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç—É–±—É—Å –¥–ª—è —á–µ—Ä—Ç–µ–∂–µ–π. –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –æ–Ω —Ä–∞–∑–º–µ—Å—Ç–∏–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ —Ä–µ–¥–∫–æ–≥–æ "–ø—Ä–∏–Ω—Ç–∞ –ú–æ–Ω–µ" –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞—É–∫—Ü–∏–æ–Ω–µ.',
                    date: '23.05.2024',
                    difficulty: 'hard',
                    mistakes: [
                        {
                            id: 'mistake-1',
                            text: '–ü—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π –º–æ–≥–ª–∏ –µ–≥–æ –∑–∞–º–µ—Ç–∏—Ç—å',
                            isCorrect: false,
                            explanation: '–•–æ—Ç—è —ç—Ç–æ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ, –º–Ω–æ–≥–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –∫—Ä–∞–∂–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∏–º–µ–Ω–Ω–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è. –í —Ç–æ–ª–ø–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –±–æ–ª—å—à–æ–º –º—É–∑–µ–µ.'
                        },
                        {
                            id: 'mistake-2',
                            text: '–ü—Ä–æ–¥–∞–∂–∞ —É–∫—Ä–∞–¥–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞—É–∫—Ü–∏–æ–Ω, —á—Ç–æ –ª–µ–≥–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∞–º–∏',
                            isCorrect: true,
                            explanation: '–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞—É–∫—Ü–∏–æ–Ω - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—è—Ç –æ–Ω–ª–∞–π–Ω-–ø–ª–æ—â–∞–¥–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Ö–∏—â–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π. IP-–∞–¥—Ä–µ—Å, –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–ª–∞—Ç–µ–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–≥—É—Ç –Ω–∞–ø—Ä—è–º—É—é –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫—É.'
                        },
                        {
                            id: 'mistake-3',
                            text: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –∂—É—Ä–Ω–∞–ª–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                            isCorrect: false,
                            explanation: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ—Ä—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–∏—Ç–∏—Ä—É—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –∏–ª–∏ –ø–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, —á—Ç–æ —É—Å–ª–æ–∂–Ω—è–µ—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.'
                        }
                    ]
                }
            ];

            // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∫–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            console.log(`üìñ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${testStories.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏–π`);

            res.status(200).json({
                stories: testStories
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã:', error);
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                code: 'GET_GAME_DATA_ERROR'
            });
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CommonJS
export const handleGameStart = GameController.handleGameStart;
export const handleGameSubmit = GameController.handleGameSubmit;
export const handleGameFinish = GameController.handleGameFinish;
export const startGame = GameController.startGame;
export const finishGame = GameController.finishGame;
export const getGameData = GameController.getGameData;

export default GameController; 