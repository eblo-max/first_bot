/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (AuthController)
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram WebApp –∏ JWT —Ç–æ–∫–µ–Ω—ã
 */

import { Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import crypto from 'crypto';
import User, { type IUser, type UserRank } from '../models/User';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Telegram WebApp
interface TelegramUser {
    id: number;
    username?: string;
    first_name?: string;
    last_name?: string;
    language_code?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
interface AuthenticateRequest extends Request {
    body: {
        initData?: string;
        telegramUser?: TelegramUser;
        user?: TelegramUser;
    };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
interface UserInfo {
    telegramId: string;
    username: string | undefined;
    firstName: string | undefined;
    lastName: string | undefined;
    languageCode: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è JWT payload
interface JWTPayload {
    telegramId: string;
    username: string | undefined;
    firstName: string | undefined;
    lastName: string | undefined;
    id?: string; // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
interface AuthSuccessResponse {
    status: 'success';
    data: {
        token: string;
        user: {
            telegramId: string;
            name: string;
            firstName: string | undefined;
            lastName: string | undefined;
            username: string | undefined;
            rank: UserRank;
            stats: IUser['stats'];
            totalScore: number;
        };
    };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
interface ErrorResponse {
    status: 'error';
    message: string;
    code?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
interface VerifyTokenResponse {
    status: 'success';
    data: {
        telegramId: string;
        name: string;
        rank: UserRank;
        stats: IUser['stats'];
    };
}

// –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
type AuthResponse = AuthSuccessResponse | ErrorResponse;
type VerifyResponse = VerifyTokenResponse | ErrorResponse;

class AuthController {
    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram WebApp
     */
    public static async authenticateTelegram(req: AuthenticateRequest, res: Response<AuthResponse>): Promise<void> {
        try {
            const { initData } = req.body;
            console.log('üîê –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å initData:', initData ? `${initData.substring(0, 30)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

            if (!initData) {
                res.status(400).json({
                    status: 'error',
                    message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp'
                });
                return;
            }

            // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É initData
            const params = new URLSearchParams(initData);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const hash = params.get('hash');
            params.delete('hash');

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            const sortedParams = Array.from(params.entries())
                .sort((a, b) => a[0].localeCompare(b[0]))
                .map(([key, value]) => `${key}=${value}`)
                .join('\n');

            // –°–æ–∑–¥–∞–µ–º HMAC-SHA-256 —Ö—ç—à
            const secretKey = crypto.createHmac('sha256', 'WebAppData').update(process.env.TELEGRAM_BOT_TOKEN!).digest();
            const calculatedHash = crypto.createHmac('sha256', secretKey).update(sortedParams).digest('hex');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ö—ç—à–µ–π
            if (calculatedHash !== hash) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö Telegram WebApp. –û–∂–∏–¥–∞–ª–æ—Å—å:', calculatedHash, '–ü–æ–ª—É—á–µ–Ω–æ:', hash);
                res.status(401).json({
                    status: 'error',
                    message: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö Telegram WebApp'
                });
                return;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let user: TelegramUser | null = null;
            let userStr = '';

            try {
                userStr = params.get('user') || '';

                if (userStr) {
                    user = JSON.parse(userStr);
                } else {
                    // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (startParam –∏–ª–∏ initDataUnsafe)
                    const startParam = params.get('start_param');
                    if (startParam && startParam.startsWith('{')) {
                        try {
                            user = JSON.parse(startParam);
                            console.log('üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ start_param');
                        } catch (e) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ start_param:', e);
                        }
                    }
                }
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e, '–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:', userStr);
            }

            if (!user || !user.id) {
                console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞.');

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø. –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                if (req.body.telegramUser) {
                    user = req.body.telegramUser;
                    console.log('üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ telegramUser');
                } else if (req.body.user) {
                    user = req.body.user;
                    console.log('üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ user');
                } else {
                    res.status(400).json({
                        status: 'error',
                        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram'
                    });
                    return;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
            if (!user.id) {
                res.status(400).json({
                    status: 'error',
                    message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram'
                });
                return;
            }

            // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            const userInfo: UserInfo = {
                telegramId: user.id.toString(),
                username: user.username || undefined,
                firstName: user.first_name || undefined,
                lastName: user.last_name || undefined,
                languageCode: user.language_code || 'ru'
            };

            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            let dbUser = await User.findOne({ telegramId: userInfo.telegramId });

            if (!dbUser) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                dbUser = new User({
                    telegramId: userInfo.telegramId,
                    username: userInfo.username,
                    firstName: userInfo.firstName,
                    lastName: userInfo.lastName,
                    registeredAt: new Date(),
                    lastVisit: new Date()
                });

                await dbUser.save();
                console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userInfo.telegramId);
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                dbUser.username = userInfo.username;
                dbUser.firstName = userInfo.firstName;
                dbUser.lastName = userInfo.lastName;
                dbUser.lastVisit = new Date();

                await dbUser.save();
                console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userInfo.telegramId);
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            const tokenPayload: JWTPayload = {
                telegramId: userInfo.telegramId,
                username: userInfo.username,
                firstName: userInfo.firstName,
                lastName: userInfo.lastName
            };

            const token = jwt.sign(
                tokenPayload,
                process.env.JWT_SECRET!,
                { expiresIn: '7d' }
            );

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const displayName = userInfo.firstName
                ? `${userInfo.firstName} ${userInfo.lastName || ''}`.trim()
                : (dbUser.nickname || userInfo.username || '–ê–Ω–æ–Ω–∏–º');

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            res.status(200).json({
                status: 'success',
                data: {
                    token,
                    user: {
                        telegramId: dbUser.telegramId,
                        name: displayName,
                        firstName: userInfo.firstName,
                        lastName: userInfo.lastName,
                        username: userInfo.username,
                        rank: dbUser.rank,
                        stats: dbUser.stats,
                        totalScore: dbUser.stats.totalScore
                    }
                }
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram WebApp:', error);
            res.status(500).json({
                status: 'error',
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
     */
    public static async verifyToken(req: Request, res: Response<VerifyResponse>): Promise<void> {
        try {
            const token = req.headers.authorization?.split(' ')[1];

            if (!token) {
                console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                res.status(401).json({
                    status: 'error',
                    message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
                });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            let decoded: JWTPayload;
            try {
                decoded = jwt.verify(token, process.env.JWT_SECRET!) as JWTPayload;
            } catch (jwtError: any) {
                console.log('‚ùå –û—à–∏–±–∫–∞ JWT:', jwtError.name);

                if (jwtError.name === 'TokenExpiredError') {
                    res.status(401).json({
                        status: 'error',
                        message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫',
                        code: 'TOKEN_EXPIRED'
                    });
                    return;
                } else if (jwtError.name === 'JsonWebTokenError') {
                    res.status(401).json({
                        status: 'error',
                        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω',
                        code: 'INVALID_TOKEN'
                    });
                    return;
                }

                throw jwtError;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            const user = await User.findOne({ telegramId: decoded.telegramId || decoded.id });

            if (!user) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', decoded.telegramId || decoded.id);
                res.status(401).json({
                    status: 'error',
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    code: 'USER_NOT_FOUND'
                });
                return;
            }

            const displayName = decoded.firstName
                ? `${decoded.firstName} ${decoded.lastName || ''}`.trim()
                : (user.nickname || decoded.username || '–ê–Ω–æ–Ω–∏–º');

            res.status(200).json({
                status: 'success',
                data: {
                    telegramId: user.telegramId,
                    name: displayName,
                    rank: user.rank,
                    stats: user.stats
                }
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            res.status(401).json({
                status: 'error',
                message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞',
                code: 'VERIFICATION_ERROR'
            });
        }
    }

    /**
     * –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ development)
     */
    public static async directAccess(_req: Request, res: Response<ErrorResponse>): Promise<void> {
        try {
            console.log('‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ - –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');

            // –ë–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞–µ–º –≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ç—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram
            res.status(403).json({
                status: 'error',
                message: '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App',
                code: 'TELEGRAM_AUTH_REQUIRED'
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:', error);
            res.status(500).json({
                status: 'error',
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CommonJS
export const authenticateTelegram = AuthController.authenticateTelegram;
export const verifyToken = AuthController.verifyToken;
export const directAccess = AuthController.directAccess;

export default AuthController; 