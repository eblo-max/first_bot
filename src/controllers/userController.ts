/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (UserController)
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è–º–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –∏—Å—Ç–æ—Ä–∏–µ–π –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

import { Request, Response } from 'express';
import User, { type IUser, type UserRank, type IAchievement, type IGameHistory } from '../models/User';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
interface AuthenticatedRequest extends Request {
    user: {
        telegramId: string;
        username?: string;
        firstName?: string;
        lastName?: string;
    };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
interface UpdateNicknameRequest extends AuthenticatedRequest {
    body: {
        nickname: string;
    };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
interface LeaderboardRequest extends AuthenticatedRequest {
    query: {
        period?: 'day' | 'week' | 'month' | 'all';
        limit?: string;
    };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserProfile {
    telegramId: string;
    name: string;
    firstName?: string;
    lastName?: string;
    username?: string;
    nickname?: string;
    rank: UserRank;
    stats: {
        investigations: number;
        solvedCases: number;
        winStreak: number;
        accuracy: number;
    };
    totalScore: number;
    achievements: Array<{
        id: string;
        name: string;
        description: string;
        unlockedAt: Date;
    }>;
    registeredAt: Date;
    lastVisit: Date;
    isNewUser: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserStats {
    stats: IUser['stats'];
    achievements: IAchievement[];
    totalScore: number;
    rank: UserRank;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
interface GameHistoryItem {
    gameId: string;
    date: Date;
    timeSpent: number;
    score: number;
    perfectGame: boolean;
    difficulty: string;
    crimeType: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
interface LeaderboardResponse {
    leaderboard: Array<{
        telegramId: string;
        name: string;
        rank: UserRank;
        totalScore: number;
        position: number;
    }>;
    currentUser?: {
        telegramId: string;
        name: string;
        rank: UserRank;
        totalScore: number;
        position: number;
    };
    pagination: {
        page: number;
        limit: number;
        total: number;
    };
    meta: {
        cached: boolean;
        fallback: boolean;
        updatedAt: Date;
    };
}

// –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
interface SuccessResponse<T> {
    status: 'success';
    data: T;
}

interface ErrorResponse {
    status: 'error';
    message: string;
    code?: string;
}

type UserResponse<T> = SuccessResponse<T> | ErrorResponse;

class UserController {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public static async getProfile(req: AuthenticatedRequest, res: Response<UserResponse<UserProfile>>): Promise<void> {
        try {
            const telegramId = req.user.telegramId;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≥–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (telegramId && telegramId.startsWith('guest_')) {
                console.log('‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId);
                res.status(403).json({
                    status: 'error',
                    message: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≥–æ—Å—Ç–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram.',
                    code: 'GUEST_NOT_ALLOWED'
                });
                return;
            }

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            let user = await User.findOne({ telegramId });

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Telegram - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!user && telegramId && !telegramId.startsWith('guest_')) {
                console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞:', telegramId);

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
                user = new User({
                    telegramId: telegramId,
                    username: req.user.username || undefined,
                    firstName: req.user.firstName || undefined,
                    lastName: req.user.lastName || undefined,
                    registeredAt: new Date(),
                    lastVisit: new Date()
                });

                await user.save();
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î: ${telegramId} (${req.user.firstName || '–±–µ–∑ –∏–º–µ–Ω–∏'})`);
            }

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω (—á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
            if (!user) {
                console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegramId ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω`);
                res.status(404).json({
                    status: 'error',
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
                    code: 'USER_NOT_FOUND'
                });
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
            user.lastVisit = new Date();
            let needsSave = true;

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
            const firstName = req.user.firstName || user.firstName;
            const lastName = req.user.lastName || user.lastName;
            const username = req.user.username || user.username;

            // –ï—Å–ª–∏ –≤ –ë–î –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–º—è/—Ñ–∞–º–∏–ª–∏—è, –Ω–æ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Ç–æ–∫–µ–Ω–µ, –æ–±–Ω–æ–≤–ª—è–µ–º
            if (req.user.firstName && (!user.firstName || user.firstName !== req.user.firstName)) {
                user.firstName = req.user.firstName;
                console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.firstName);
            }

            if (req.user.lastName && (!user.lastName || user.lastName !== req.user.lastName)) {
                user.lastName = req.user.lastName;
                console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.lastName);
            }

            if (req.user.username && (!user.username || user.username !== req.user.username)) {
                user.username = req.user.username;
                console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.username);
            }

            if (needsSave) {
                await user.save();
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
            const displayName = firstName ?
                `${firstName} ${lastName || ''}`.trim() :
                (user.nickname || username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId.substring(0, 8)}`);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            const profile: UserProfile = {
                telegramId: user.telegramId,
                name: displayName,
                firstName: firstName,
                lastName: lastName,
                username: username,
                nickname: user.nickname,
                rank: user.rank,
                stats: {
                    investigations: user.stats.investigations,
                    solvedCases: user.stats.solvedCases,
                    winStreak: user.stats.winStreak,
                    accuracy: user.stats.accuracy
                },
                totalScore: user.stats.totalScore,
                achievements: user.achievements.map(a => ({
                    id: a.id,
                    name: a.name,
                    description: a.description,
                    unlockedAt: a.unlockedAt || new Date()
                })),
                registeredAt: user.registeredAt,
                lastVisit: user.lastVisit,
                isNewUser: user.stats.investigations === 0 // –ü–æ–º–µ—Ç–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            };

            console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${displayName} (${telegramId})`);

            res.status(200).json({
                status: 'success',
                data: profile
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            res.status(500).json({
                status: 'error',
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∏–∫–Ω–µ–π–º–∞)
     */
    public static async updateNickname(req: UpdateNicknameRequest, res: Response<UserResponse<{ nickname: string }>>): Promise<void> {
        try {
            const { nickname } = req.body;
            const telegramId = req.user.telegramId;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
            if (!nickname || nickname.length < 2 || nickname.length > 20) {
                res.status(400).json({
                    status: 'error',
                    message: '–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤'
                });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            const nicknameRegex = /^[–∞-—è—ëa-z0-9_\-\s]+$/i;
            if (!nicknameRegex.test(nickname)) {
                res.status(400).json({
                    status: 'error',
                    message: '–ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è'
                });
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await User.findOneAndUpdate(
                { telegramId },
                { nickname: nickname.trim() },
                { new: true }
            );

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if (!user) {
                res.status(404).json({
                    status: 'error',
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
                return;
            }

            console.log(`‚úÖ –ù–∏–∫–Ω–µ–π–º –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}: "${user.nickname}"`);

            res.status(200).json({
                status: 'success',
                data: { nickname: user.nickname || nickname.trim() }
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞:', error);
            res.status(500).json({
                status: 'error',
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public static async getStats(req: AuthenticatedRequest, res: Response<UserResponse<UserStats>>): Promise<void> {
        try {
            const telegramId = req.user.telegramId;

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await User.findOne({ telegramId });

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if (!user) {
                res.status(404).json({
                    status: 'error',
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
                return;
            }

            const stats: UserStats = {
                stats: user.stats,
                achievements: user.achievements,
                totalScore: user.stats.totalScore,
                rank: user.rank
            };

            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);

            res.status(200).json({
                status: 'success',
                data: stats
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            res.status(500).json({
                status: 'error',
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public static async getGameHistory(req: AuthenticatedRequest, res: Response<UserResponse<GameHistoryItem[]>>): Promise<void> {
        try {
            const telegramId = req.user.telegramId;

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await User.findOne({ telegramId });

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            if (!user) {
                res.status(404).json({
                    status: 'error',
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
                return;
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
            const gameHistory = user.gameHistory
                .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
                .slice(0, 10) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–≥—Ä–∞–º–∏
                .map(game => ({
                    gameId: game.gameId,
                    date: game.date,
                    timeSpent: game.timeSpent,
                    score: game.score,
                    perfectGame: game.perfectGame,
                    difficulty: game.difficulty,
                    crimeType: game.crimeType
                }));

            console.log(`üìñ –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} (${gameHistory.length} –∏–≥—Ä)`);

            res.status(200).json({
                status: 'success',
                data: gameHistory
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä:', error);
            res.status(500).json({
                status: 'error',
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
     */
    public static async getLeaderboard(req: LeaderboardRequest, res: Response<UserResponse<LeaderboardResponse>>): Promise<void> {
        try {
            const { period = 'all', limit = '20' } = req.query;
            const telegramId = req.user.telegramId;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            const validPeriods = ['day', 'week', 'month', 'all'];
            if (!validPeriods.includes(period)) {
                res.status(400).json({
                    status: 'error',
                    message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: day, week, month, all'
                });
                return;
            }

            const limitNum = parseInt(limit);
            if (isNaN(limitNum) || limitNum < 1 || limitNum > 100) {
                res.status(400).json({
                    status: 'error',
                    message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100'
                });
                return;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–ª—É–∂–±—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            const leaderboardService = require('../services/leaderboardService');
            const result = await leaderboardService.getLeaderboard(period, limitNum, telegramId);

            const response: LeaderboardResponse = {
                leaderboard: result.leaderboard,
                currentUser: result.currentUser,
                pagination: {
                    page: 1,
                    limit: limitNum,
                    total: result.leaderboard.length
                },
                meta: {
                    cached: result.cached,
                    fallback: result.fallback,
                    updatedAt: result.updatedAt
                }
            };

            console.log(`üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (${period}, –ª–∏–º–∏—Ç: ${limitNum}, –∫—ç—à: ${result.cached})`);

            res.status(200).json({
                status: 'success',
                data: response
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', error);
            res.status(500).json({
                status: 'error',
                message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CommonJS
export const getProfile = UserController.getProfile;
export const updateNickname = UserController.updateNickname;
export const getStats = UserController.getStats;
export const getGameHistory = UserController.getGameHistory;
export const getLeaderboard = UserController.getLeaderboard;

export default UserController; 