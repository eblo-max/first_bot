/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram WebApp –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–æ–≤
 */

import { Router, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import { verifyTelegramWebAppData, authMiddleware } from '../middleware/auth';
import User, { type IUser } from '../models/User';
import AuthController from '../controllers/authController';

const router = Router();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ middleware
interface TelegramUserRequest extends Request {
    telegramUser?: {
        telegramId: string;
        username?: string;
        firstName?: string;
        lastName?: string;
    };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface AuthenticatedRequest extends Request {
    user?: {
        telegramId: string;
        username?: string;
        firstName?: string;
        lastName?: string;
    };
}

/**
 * @route   POST /api/auth/init
 * @desc    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp
 * @access  Public
 */
router.post('/init', verifyTelegramWebAppData as any, async (req: TelegramUserRequest, res: Response) => {
    try {
        const telegramUser = req.telegramUser;

        if (!telegramUser || !telegramUser.telegramId) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegramId –∏–∑ middleware');
            res.status(400).json({
                status: 'error',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            });
            return;
        }

        const telegramId = telegramUser.telegramId;
        console.log(`üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        let user = await User.findOne({ telegramId });
        let isNewUser = false;

        if (!user) {
            console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
            isNewUser = true;
            user = new User({
                telegramId,
                username: telegramUser.username || undefined,
                firstName: telegramUser.firstName || undefined,
                lastName: telegramUser.lastName || undefined,
                registeredAt: new Date(),
                lastVisit: new Date()
            });
            await user.save();
        } else {
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
            user.lastVisit = new Date();
            await user.save();
        }

        // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        const token = jwt.sign(
            {
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName
            },
            process.env.JWT_SECRET || 'default_secret_key',
            { expiresIn: '7d' }
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const displayName = user.firstName
            ? `${user.firstName} ${user.lastName || ''}`.trim()
            : (user.username || '–ê–Ω–æ–Ω–∏–º');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å authController
        res.json({
            status: 'success',
            data: {
                token,
                user: {
                    telegramId: user.telegramId,
                    name: displayName,
                    firstName: user.firstName,
                    lastName: user.lastName,
                    username: user.username,
                    rank: user.rank,
                    stats: user.stats,
                    totalScore: user.stats.totalScore,
                    isNew: isNewUser
                }
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ /api/auth/init:', error);
        res.status(500).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
        });
    }
});

/**
 * @route   POST /api/auth/login
 * @desc    –ê–ª–∏–∞—Å –¥–ª—è /init - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend –∫–æ–¥–æ–º
 * @access  Public
 */
router.post('/login', verifyTelegramWebAppData as any, async (req: TelegramUserRequest, res: Response) => {
    try {
        const telegramUser = req.telegramUser;

        if (!telegramUser || !telegramUser.telegramId) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegramId –∏–∑ middleware');
            res.status(400).json({
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            });
            return;
        }

        const telegramId = telegramUser.telegramId;
        console.log(`üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        let user = await User.findOne({ telegramId });
        let isNewUser = false;

        if (!user) {
            console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
            isNewUser = true;
            user = new User({
                telegramId,
                username: telegramUser.username || undefined,
                firstName: telegramUser.firstName || undefined,
                lastName: telegramUser.lastName || undefined,
                registeredAt: new Date(),
                lastVisit: new Date()
            });
            await user.save();
        } else {
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
            user.lastVisit = new Date();
            await user.save();
        }

        // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        const token = jwt.sign(
            {
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName
            },
            process.env.JWT_SECRET || 'default_secret_key',
            { expiresIn: '7d' }
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const displayName = user.firstName
            ? `${user.firstName} ${user.lastName || ''}`.trim()
            : (user.username || '–ê–Ω–æ–Ω–∏–º');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–∂–∏–¥–∞–µ–º–æ–º frontend
        res.json({
            success: true,
            data: {
                token,
                user: {
                    telegramId: user.telegramId,
                    name: displayName,
                    firstName: user.firstName,
                    lastName: user.lastName,
                    username: user.username,
                    rank: user.rank,
                    stats: user.stats,
                    totalScore: user.stats.totalScore,
                    gamesPlayed: user.stats.investigations,
                    accuracy: user.stats.accuracy,
                    isNew: isNewUser
                }
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ /api/auth/login:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        });
    }
});

/**
 * @route   POST /api/auth/telegram
 * @desc    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram WebApp (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç authController)
 * @access  Public
 */
router.post('/telegram', AuthController.authenticateTelegram as any);

/**
 * @route   POST /api/auth/direct-access
 * @desc    –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —á–µ—Ä–µ–∑ Telegram (–æ—Ç–∫–ª—é—á—ë–Ω)
 * @access  Public
 */
router.post('/direct-access', AuthController.directAccess as any);

/**
 * @route   POST /api/auth/guest
 * @desc    –ì–æ—Å—Ç–µ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
 * @access  Public
 */
router.post('/guest', AuthController.directAccess as any);

/**
 * @route   GET /api/auth/verify
 * @desc    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ JWT —Ç–æ–∫–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç authController)
 * @access  Private
 */
router.get('/verify', AuthController.verifyToken as any);

/**
 * @route   GET /api/auth/verify-middleware
 * @desc    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ middleware (legacy –º–µ—Ç–æ–¥)
 * @access  Private
 */
router.get('/verify-middleware', authMiddleware as any, (req: AuthenticatedRequest, res: Response) => {
    res.status(200).json({
        status: 'success',
        message: '–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω',
        data: {
            user: req.user
        }
    });
});

export default router; 