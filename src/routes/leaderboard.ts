/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤, —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */

import { Router, Request, Response } from 'express';
import { authMiddleware } from '../middleware/auth';
import leaderboardService from '../services/leaderboardService';
import Leaderboard from '../models/Leaderboard';

const router = Router();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
interface AuthenticatedRequest extends Request {
    user?: {
        telegramId: string;
        username?: string;
    };
}

interface ForceUpdateRequest extends AuthenticatedRequest {
    body: {
        period?: 'day' | 'week' | 'month' | 'all';
    };
}

interface LeaderboardRequest extends AuthenticatedRequest {
    params: {
        period: 'day' | 'week' | 'month' | 'all';
    };
    query: {
        limit?: string;
    };
}

interface UserPositionRequest extends AuthenticatedRequest {
    params: {
        userId: string;
    };
}

interface ClearCacheRequest extends AuthenticatedRequest {
    query: {
        period?: 'day' | 'week' | 'month' | 'all';
    };
}

// –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
interface StatusResponse {
    status: 'success' | 'error';
    data?: {
        isRunning: boolean;
        isUpdating: boolean;
        lastUpdateTime: Date | null;
        updateIntervalMs: number;
        nextUpdateIn: number | null;
        cacheStats: {
            all: number;
            day: number;
            week: number;
            month: number;
        };
    };
    message?: string;
}

interface LeaderboardResponse {
    status: 'success' | 'error';
    data?: {
        leaderboard: any[];
        currentUser: any;
        pagination: {
            page: number;
            limit: number;
            total: number;
        };
        meta: {
            period: string;
            cached?: boolean;
            fallback?: boolean;
            updatedAt?: string;
        };
    };
    message?: string;
}

/**
 * @route   GET /api/leaderboard/status
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
 * @access  Private
 */
router.get('/status', authMiddleware as any, async (req: AuthenticatedRequest, res: Response<StatusResponse>) => {
    try {
        console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±—ã –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞');
        const status = leaderboardService.getStatus();

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å—è—Ö –≤ –∫—ç—à–µ
        const cacheStats = {
            all: await Leaderboard.countDocuments({ period: 'all' }),
            day: await Leaderboard.countDocuments({ period: 'day' }),
            week: await Leaderboard.countDocuments({ period: 'week' }),
            month: await Leaderboard.countDocuments({ period: 'month' })
        };

        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω:', { status, cacheStats });

        res.json({
            status: 'success',
            data: {
                ...status,
                cacheStats
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', error);
        res.status(500).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
        });
    }
});

/**
 * @route   POST /api/leaderboard/force-update
 * @desc    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
 * @access  Private (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
 */
router.post('/force-update', authMiddleware as any, async (req: ForceUpdateRequest, res: Response) => {
    try {
        const { period } = req.body;
        console.log(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:`, period || 'all');

        let result;
        if (period && ['day', 'week', 'month', 'all'].includes(period)) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            result = await leaderboardService.forceUpdatePeriod(period);
            console.log(`‚úÖ –†–µ–π—Ç–∏–Ω–≥ ${period} –æ–±–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø–∏—Å–µ–π: ${result}`);

            res.json({
                status: 'success',
                message: `–†–µ–π—Ç–∏–Ω–≥ ${period} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`,
                data: { updatedCount: result }
            });
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            result = await leaderboardService.updateLeaderboards();
            console.log('‚úÖ –í—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', result);

            res.json({
                status: 'success',
                message: '–í—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                data: result
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', error);
        res.status(500).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤'
        });
    }
});

/**
 * @route   GET /api/leaderboard/:period
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
 * @access  Private
 */
router.get('/:period', authMiddleware as any, async (req: LeaderboardRequest, res: Response<LeaderboardResponse>) => {
    try {
        const { period } = req.params;
        const { limit = '20' } = req.query;
        const telegramId = req.user?.telegramId;

        console.log(`üìà –ó–∞–ø—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞:`, { period, limit, telegramId });

        if (!['day', 'week', 'month', 'all'].includes(period)) {
            res.status(400).json({
                status: 'error',
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: day, week, month, all'
            });
            return;
        }

        if (!telegramId) {
            res.status(401).json({
                status: 'error',
                message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            });
            return;
        }

        const result = await leaderboardService.getLeaderboard(period, parseInt(limit), telegramId);
        console.log(`‚úÖ –†–µ–π—Ç–∏–Ω–≥ ${period} –ø–æ–ª—É—á–µ–Ω:`, {
            count: result.leaderboard.length,
            cached: result.cached,
            fallback: result.fallback
        });

        res.json({
            status: 'success',
            data: {
                leaderboard: result.leaderboard,
                currentUser: result.currentUser,
                pagination: {
                    page: 1,
                    limit: parseInt(limit),
                    total: result.leaderboard.length
                },
                meta: {
                    period,
                    cached: result.cached,
                    fallback: result.fallback,
                    updatedAt: result.updatedAt ? new Date(result.updatedAt).toISOString() : undefined
                }
            }
        });
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ${req.params.period}:`, error);
        res.status(500).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞'
        });
    }
});

/**
 * @route   DELETE /api/leaderboard/cache
 * @desc    –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
 * @access  Private (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
 */
router.delete('/cache', authMiddleware as any, async (req: ClearCacheRequest, res: Response) => {
    try {
        const { period } = req.query;
        console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', period || 'all');

        let result;
        if (period && ['day', 'week', 'month', 'all'].includes(period)) {
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            result = await Leaderboard.deleteMany({ period });
        } else {
            // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
            result = await Leaderboard.deleteMany({});
        }

        console.log(`‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω: ${result.deletedCount} –∑–∞–ø–∏—Å–µ–π`);

        res.json({
            status: 'success',
            message: period ?
                `–ö—ç—à —Ä–µ–π—Ç–∏–Ω–≥–∞ ${period} –æ—á–∏—â–µ–Ω` :
                '–í–µ—Å—å –∫—ç—à —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –æ—á–∏—â–µ–Ω',
            data: { deletedCount: result.deletedCount }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', error);
        res.status(500).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞'
        });
    }
});

/**
 * @route   GET /api/leaderboard/user/:userId
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
 * @access  Private
 */
router.get('/user/:userId', authMiddleware as any, async (req: UserPositionRequest, res: Response) => {
    try {
        const { userId } = req.params;
        console.log(`üë§ –ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

        const positions: Record<string, any> = {};
        const periods: Array<'day' | 'week' | 'month' | 'all'> = ['day', 'week', 'month', 'all'];

        for (const period of periods) {
            try {
                const position = await Leaderboard.getUserPosition(userId, period);
                positions[period] = position ? {
                    rank: position.rank,
                    score: position.score,
                    username: position.username,
                    userRank: position.userRank
                } : null;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ ${period}:`, error);
                positions[period] = null;
            }
        }

        console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø–æ–ª—É—á–µ–Ω—ã:`, positions);

        res.json({
            status: 'success',
            data: {
                userId,
                positions
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        });
    }
});

export default router; 