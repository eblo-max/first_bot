/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Ä–µ–ø—É—Ç–∞—Ü–∏—é, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã
 */

import { Router, Request, Response } from 'express';
import User, { type IUser, UserRank, type IAchievement } from '../models/User';
import { authMiddleware } from '../middleware/auth';

// –í–´–ë–û–†–ö–ê –ù–û–í–´–• –î–û–°–¢–ò–ñ–ï–ù–ò–ô –î–õ–Ø –°–ï–†–í–ï–†–ù–û–ô –ß–ê–°–¢–ò
const SERVER_ACHIEVEMENTS_CONFIG = [
    // –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å
    {
        id: 'first_investigation',
        name: '–ü–µ—Ä–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
        category: 'investigation',
        requirement: { type: 'investigations', value: 1 }
    },
    {
        id: 'rookie_detective',
        name: '–î–µ—Ç–µ–∫—Ç–∏–≤-–Ω–æ–≤–∏—á–æ–∫',
        description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 5 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
        category: 'investigation',
        requirement: { type: 'investigations', value: 5 }
    },
    {
        id: 'experienced_investigator',
        name: '–û–ø—ã—Ç–Ω—ã–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
        description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 25 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
        category: 'investigation',
        requirement: { type: 'investigations', value: 25 }
    },
    {
        id: 'senior_detective',
        name: '–°—Ç–∞—Ä—à–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
        description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 50 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
        category: 'investigation',
        requirement: { type: 'investigations', value: 50 }
    },
    {
        id: 'veteran_investigator',
        name: '–í–µ—Ç–µ—Ä–∞–Ω —Å–ª–µ–¥—Å—Ç–≤–∏—è',
        description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 100 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
        category: 'investigation',
        requirement: { type: 'investigations', value: 100 }
    },

    // –¢–æ—á–Ω–æ—Å—Ç—å
    {
        id: 'sharp_eye',
        name: '–û—Å—Ç—Ä—ã–π –≥–ª–∞–∑',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 60% –≤ 10+ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö',
        category: 'accuracy',
        requirement: { type: 'accuracy', value: 60, minGames: 10 }
    },
    {
        id: 'keen_observer',
        name: '–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 75% –≤ 20+ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö',
        category: 'accuracy',
        requirement: { type: 'accuracy', value: 75, minGames: 20 }
    },

    // –û—á–∫–∏
    {
        id: 'first_thousand',
        name: '–ü–µ—Ä–≤–∞—è —Ç—ã—Å—è—á–∞',
        description: '–ù–∞–±–µ—Ä–∏—Ç–µ 1,000 –æ—á–∫–æ–≤',
        category: 'score',
        requirement: { type: 'totalScore', value: 1000 }
    },
    {
        id: 'five_thousand_points',
        name: '–ü—è—Ç—å —Ç—ã—Å—è—á –æ—á–∫–æ–≤',
        description: '–ù–∞–±–µ—Ä–∏—Ç–µ 5,000 –æ—á–∫–æ–≤',
        category: 'score',
        requirement: { type: 'totalScore', value: 5000 }
    },

    // –°–µ—Ä–∏–∏
    {
        id: 'perfect_start',
        name: '–ò–¥–µ–∞–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª–æ',
        description: '–°—ã–≥—Ä–∞–π—Ç–µ –æ–¥–Ω—É –∏–¥–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É (5/5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)',
        category: 'streak',
        requirement: { type: 'perfectGames', value: 1 }
    },
    {
        id: 'winning_streak_3',
        name: '–¢—Ä–æ–π–Ω–∞—è —Å–µ—Ä–∏—è',
        description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 3 –∏–¥–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–¥—Ä—è–¥',
        category: 'streak',
        requirement: { type: 'winStreak', value: 3 }
    }
];

const router = Router();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
interface AuthenticatedRequest extends Request {
    user?: {
        telegramId: string;
        username?: string;
        firstName?: string;
        lastName?: string;
    };
}

interface LeaderboardRequest extends AuthenticatedRequest {
    params: {
        period?: 'day' | 'week' | 'month' | 'all';
    };
    query: {
        limit?: string;
    };
}

// –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
interface ProfileData {
    basic: {
        telegramId: string;
        username?: string;
        firstName?: string;
        lastName?: string;
        nickname?: string;
        registeredAt: Date;
        lastVisit: Date;
    };
    rank: {
        current: UserRank;
        displayName: string;
    };
    stats: {
        investigations: number;
        solvedCases: number;
        totalQuestions: number;
        totalScore: number;
        accuracy: number;
        winStreak: number;
        maxWinStreak: number;
        perfectGames: number;
        averageTime: number;
        fastestGame: number;
        dailyStreakCurrent: number;
        dailyStreakBest: number;
    };
    achievements: IAchievement[];
    recentGames: any[];
}

interface ReputationDetails {
    current: any;
    history: Array<{
        date: Date;
        reputationGained: number;
        efficiency: number;
        difficulty: string;
    }>;
    recommendations: ReputationRecommendation[];
}

interface ReputationRecommendation {
    type: 'accuracy' | 'speed' | 'consistency' | 'difficulty';
    title: string;
    description: string;
    priority: 'high' | 'medium' | 'low';
}

interface AvailableAchievement {
    id: string;
    name: string;
    category: string;
    progress: {
        current: number;
        target: number;
    };
    description: string;
}

interface LeaderboardEntry {
    rank: number;
    telegramId: string;
    name: string;
    username?: string;
    userRank: UserRank;
    stats: {
        totalScore: number;
    };
}

interface NextAchievement {
    type: 'rank' | 'achievement';
    title: string;
    progress: {
        current: number;
        target: number;
        percentage: number;
    };
    description: string;
}

/**
 * @route   GET /api/profile
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 * @access  Private
 */
router.get('/', authMiddleware as any, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const user = await User.findOne({ telegramId: req.user?.telegramId });

        if (!user) {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' } as any);
            return;
        }

        console.log('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', user.telegramId);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        const profileData: ProfileData = {
            basic: {
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                nickname: user.nickname,
                registeredAt: user.registeredAt,
                lastVisit: user.lastVisit
            },

            rank: {
                current: user.rank || '–°–¢–ê–ñ–ï–†' as UserRank,
                displayName: user.rank || '–°–¢–ê–ñ–ï–†'
            },

            stats: {
                // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                investigations: user.stats?.investigations || 0,
                solvedCases: user.stats?.solvedCases || 0,
                totalQuestions: user.stats?.totalQuestions || 0,
                totalScore: user.stats?.totalScore || 0,
                accuracy: user.stats?.accuracy || 0,

                // –°–µ—Ä–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                winStreak: user.stats?.winStreak || 0,
                maxWinStreak: user.stats?.maxWinStreak || 0,
                perfectGames: user.stats?.perfectGames || 0,

                // –°–∫–æ—Ä–æ—Å—Ç—å
                averageTime: user.stats?.averageTime || 0,
                fastestGame: user.stats?.fastestGame || 0,

                // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                dailyStreakCurrent: user.stats?.dailyStreakCurrent || 0,
                dailyStreakBest: user.stats?.dailyStreakBest || 0
            },

            achievements: user.achievements || [],

            recentGames: user.gameHistory ? user.gameHistory.slice(-10).reverse() : []
        };

        console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', {
            telegramId: user.telegramId,
            rank: profileData.rank.current,
            totalScore: profileData.stats.totalScore,
            achievements: profileData.achievements.length
        });

        res.json({
            status: 'success',
            data: profileData
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            status: 'error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        } as any);
    }
});

/**
 * @route   GET /api/profile/reputation/details
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
 * @access  Private
 */
router.get('/reputation/details', authMiddleware as any, async (req: AuthenticatedRequest, res: Response<ReputationDetails>) => {
    try {
        const user = await User.findOne({ telegramId: req.user?.telegramId });

        if (!user) {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' } as any);
            return;
        }

        console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:', user.telegramId);

        const reputationDetails: ReputationDetails = {
            current: user.getReputationBreakdown(),

            // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 –∏–≥—Ä)
            history: user.gameHistory
                .slice(-20)
                .map(game => ({
                    date: game.date,
                    reputationGained: game.reputationGained || 0,
                    efficiency: Math.round((game.correctAnswers / game.totalQuestions) * 100),
                    difficulty: game.difficulty
                })),

            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            recommendations: generateReputationRecommendations(user)
        };

        console.log('‚úÖ –î–µ—Ç–∞–ª–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã');
        res.json(reputationDetails);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' } as any);
    }
});

/**
 * @route   GET /api/profile/achievements/available
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 * @access  Private
 */
router.get('/achievements/available', authMiddleware as any, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const user = await User.findOne({ telegramId: req.user?.telegramId });

        if (!user) {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            return;
        }

        console.log('üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', user.telegramId);

        const availableAchievements = generateAvailableAchievements(user);

        res.json({
            status: 'success',
            data: {
                unlocked: user.achievements,
                available: availableAchievements,
                progress: user.getAchievementsProgress()
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        res.status(500).json({
            status: 'error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

/**
 * @route   GET /api/profile/leaderboard/:period?
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–µ—Ä–∏–æ–¥—É
 * @access  Private
 */
router.get('/leaderboard/:period?', authMiddleware as any, async (req: LeaderboardRequest, res: Response) => {
    try {
        const period = req.params.period || 'all';
        const limit = parseInt(req.query.limit || '50');
        const currentUser = req.user;

        console.log(`üîç –ó–∞–ø—Ä–æ—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ ${period.toUpperCase()}:`, { limit, user: currentUser?.telegramId });

        let dateFilter: any = {};
        const now = new Date();

        switch (period) {
            case 'day':
                const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);
                dateFilter = {
                    $or: [
                        { lastVisit: { $gte: last24h } },
                        { lastVisit: { $exists: false }, 'stats.totalScore': { $gt: 0 } }
                    ]
                };
                break;
            case 'week':
                const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                dateFilter = {
                    $or: [
                        { lastVisit: { $gte: lastWeek } },
                        { lastVisit: { $exists: false }, 'stats.totalScore': { $gt: 0 } }
                    ]
                };
                break;
            case 'month':
                const lastMonth = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                dateFilter = {
                    $or: [
                        { lastVisit: { $gte: lastMonth } },
                        { lastVisit: { $exists: false }, 'stats.totalScore': { $gt: 0 } }
                    ]
                };
                break;
            default:
                dateFilter = { 'stats.totalScore': { $gt: 0 } };
                break;
        }

        console.log('üìä –§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞:', dateFilter);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É
        const totalScoreLeaderboard = await User.find(dateFilter)
            .sort({ 'stats.totalScore': -1 })
            .limit(limit)
            .select('telegramId username firstName lastName nickname rank stats.totalScore lastVisit')
            .lean();

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${totalScoreLeaderboard.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ`);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è frontend
        const formattedLeaderboard: LeaderboardEntry[] = totalScoreLeaderboard.map((user, index) => {
            const displayName = user.nickname ||
                (user.firstName ? `${user.firstName} ${user.lastName || ''}`.trim() :
                    (user.username || `–ò–≥—Ä–æ–∫ ${user.telegramId.toString().slice(-4)}`));

            return {
                rank: index + 1,
                telegramId: user.telegramId,
                name: displayName,
                username: user.username,
                userRank: user.rank || '–°–¢–ê–ñ–ï–†' as UserRank,
                stats: {
                    totalScore: user.stats?.totalScore || 0
                }
            };
        });

        const result = {
            totalScore: formattedLeaderboard,
            period: period,
            total: formattedLeaderboard.length
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', {
            period,
            total: result.total,
            leaderboard: result.totalScore.map(user => ({
                rank: user.rank,
                name: user.name,
                score: user.stats.totalScore
            }))
        });

        res.json({
            status: 'success',
            data: result
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
        res.status(500).json({
            status: 'error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

/**
 * @route   GET /api/profile/progress/next-achievements
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ —Å–ª–µ–¥—É—é—â–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
 * @access  Private
 */
router.get('/progress/next-achievements', authMiddleware as any, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const user = await User.findOne({ telegramId: req.user?.telegramId });

        if (!user) {
            res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            return;
        }

        console.log('üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', user.telegramId);

        const nextAchievements = calculateNextAchievements(user);

        res.json({
            status: 'success',
            data: {
                nextRank: {
                    current: user.rank,
                    progress: user.rewards?.nextRankProgress || 0,
                    displayName: user.getRankDisplayName()
                },
                nextAchievements
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        res.status(500).json({
            status: 'error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
 */
function generateReputationRecommendations(user: IUser): ReputationRecommendation[] {
    const recommendations: ReputationRecommendation[] = [];

    if (user.reputation.accuracy < 70) {
        recommendations.push({
            type: 'accuracy',
            title: '–£–ª—É—á—à–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å',
            description: '–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ —á–∏—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤',
            priority: 'high'
        });
    }

    if (user.reputation.speed < 50 && user.stats.averageTime > 0) {
        recommendations.push({
            type: 'speed',
            title: '–£–≤–µ–ª–∏—á—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å',
            description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∞—Ç—å –¥–µ–ª–∞ –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –Ω–µ –∂–µ—Ä—Ç–≤—É—è —Ç–æ—á–Ω–æ—Å—Ç—å—é',
            priority: 'medium'
        });
    }

    if (user.reputation.consistency < 60) {
        recommendations.push({
            type: 'consistency',
            title: '–ò–≥—Ä–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ',
            description: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ',
            priority: 'medium'
        });
    }

    if (user.reputation.difficulty < 40) {
        recommendations.push({
            type: 'difficulty',
            title: '–ü—Ä–æ–±—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –¥–µ–ª–∞',
            description: '–†–µ—à–µ–Ω–∏–µ –¥–µ–ª –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–∏—Ç –≤–∞—à—É —Ä–µ–ø—É—Ç–∞—Ü–∏—é',
            priority: 'low'
        });
    }

    return recommendations;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π - –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê!
 */
function generateAvailableAchievements(user: IUser): AvailableAchievement[] {
    const available: AvailableAchievement[] = [];
    const userStats = user.stats;

    console.log('üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.telegramId);
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        totalScore: userStats.totalScore,
        investigations: userStats.investigations,
        winStreak: userStats.winStreak,
        accuracy: userStats.accuracy,
        perfectGames: userStats.perfectGames,
        gamesPlayed: userStats.totalQuestions / 5 // –ü—Ä–∏–º–µ—Ä–Ω–æ –¥–µ–ª –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const unlockedAchievementIds = (user.achievements || []).map(a => a.id);
    console.log('üèÜ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', unlockedAchievementIds);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    const convertedUserStats = {
        investigations: userStats.investigations || userStats.totalQuestions / 5 || 0, // –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ
        gamesPlayed: userStats.investigations || userStats.totalQuestions / 5 || 0,
        solvedCases: userStats.solvedCases || 0,
        totalScore: userStats.totalScore || 0,
        accuracy: userStats.accuracy || 0,
        maxWinStreak: userStats.maxWinStreak || 0,
        perfectGames: userStats.perfectGames || 0,
        fastestGame: userStats.fastestGame || 0,
        averageTime: userStats.averageTime || 0,
        dailyStreakCurrent: userStats.dailyStreakCurrent || 0,
        easyGames: 0, // –ü–æ–∫–∞ –Ω–µ —Ç—Ä–µ–∫–∞–µ—Ç—Å—è
        mediumGames: 0,
        hardGames: 0,
        expertGames: 0,
        reputation: {
            level: (user.reputation?.accuracy || 0) + (user.reputation?.speed || 0) +
                (user.reputation?.consistency || 0) + (user.reputation?.difficulty || 0) / 4,
            accuracy: user.reputation?.accuracy || 0,
            speed: user.reputation?.speed || 0,
            consistency: user.reputation?.consistency || 0,
            difficulty: user.reputation?.difficulty || 0
        },
        crimeTypeMastery: {} // –ü–æ–∫–∞ –ø—É—Å—Ç–æ–µ
    };

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∑–∫–∏–µ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é
    for (const achievement of SERVER_ACHIEVEMENTS_CONFIG) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        if (unlockedAchievementIds.includes(achievement.id)) {
            continue;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const progress = calculateServerAchievementProgress(achievement, convertedUserStats);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º > 0% –∏–ª–∏ –±–∞–∑–æ–≤—ã–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
        const shouldShow = progress.percentage > 0 ||
            ['first_investigation', 'truth_seeker', 'rookie_detective', 'sharp_eye', 'perfect_start', 'first_thousand'].includes(achievement.id);

        if (shouldShow) {
            available.push({
                id: achievement.id,
                name: achievement.name,
                category: achievement.category,
                progress: {
                    current: progress.current,
                    target: progress.target
                },
                description: achievement.description
            });
        }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é (–ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
    available.sort((a, b) => {
        const progressA = (a.progress.current / a.progress.target) * 100;
        const progressB = (b.progress.current / b.progress.target) * 100;
        return progressB - progressA; // –û—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
    });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const limitedAvailable = available.slice(0, 15);

    console.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', limitedAvailable.length);
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', limitedAvailable.map(a => ({
        id: a.id,
        name: a.name,
        progress: `${a.progress.current}/${a.progress.target}`,
        percentage: Math.round((a.progress.current / a.progress.target) * 100) + '%'
    })));

    return limitedAvailable;
}

/**
 * –†–∞—Å—á–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
function calculateNextAchievements(user: IUser): NextAchievement[] {
    const next: NextAchievement[] = [];

    // –°–ª–µ–¥—É—é—â–µ–µ –∑–≤–∞–Ω–∏–µ
    const rankThresholds = [0, 150, 400, 900, 2000, 4500, 10000, 20000];
    const currentRankIndex = rankThresholds.findIndex(threshold => user.stats.totalScore < threshold);

    if (currentRankIndex > 0 && currentRankIndex < rankThresholds.length) {
        const nextThreshold = rankThresholds[currentRankIndex];
        const progress = Math.round(((user.stats.totalScore) / nextThreshold) * 100);

        next.push({
            type: 'rank',
            title: '–°–ª–µ–¥—É—é—â–µ–µ –∑–≤–∞–Ω–∏–µ',
            progress: {
                current: user.stats.totalScore,
                target: nextThreshold,
                percentage: Math.min(progress, 100)
            },
            description: `–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–≤–∞–Ω–∏—è: ${nextThreshold - user.stats.totalScore} –æ—á–∫–æ–≤`
        });
    }

    return next;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏
function calculateServerAchievementProgress(achievement: any, userStats: any) {
    const req = achievement.requirement;
    let current = 0;
    let target = req.value || 1;

    switch (req.type) {
        case 'investigations':
            current = userStats.investigations || 0;
            break;
        case 'accuracy':
            if ((userStats.investigations || 0) >= (req.minGames || 0)) {
                current = Math.round(userStats.accuracy || 0);
            }
            break;
        case 'totalScore':
            current = userStats.totalScore || 0;
            break;
        case 'perfectGames':
            current = userStats.perfectGames || 0;
            break;
        case 'winStreak':
            current = userStats.maxWinStreak || 0;
            break;
        default:
            current = 0;
    }

    return { current, target, percentage: Math.min((current / target) * 100, 100) };
}

export default router; 