/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä –∏ –∞–≤–∞—Ç–∞—Ä—ã
 */

import { Router, Request, Response } from 'express';
import UserController from '../controllers/userController';
import { authMiddleware } from '../middleware/auth';
import User, { type IUser, UserRank } from '../models/User';

// –î–æ–±–∞–≤–ª—è–µ–º fetch –¥–ª—è Node.js –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ
const fetch = globalThis.fetch || require('node-fetch');

const router = Router();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
interface AuthenticatedRequest extends Request {
    user?: {
        telegramId: string;
        username?: string;
        firstName?: string;
        lastName?: string;
    };
}

interface UpdateProfileRequest extends AuthenticatedRequest {
    body: {
        nickname?: string;
    };
}

interface LeaderboardRequest extends AuthenticatedRequest {
    query: {
        period?: string;
        limit?: string;
    };
}

// –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
interface ProfileData {
    telegramId: string;
    name: string;
    firstName?: string;
    lastName?: string;
    username?: string;
    rank: UserRank;
    stats: {
        investigations: number;
        solvedCases: number;
        winStreak: number;
        maxWinStreak: number;
        accuracy: number;
        totalScore: number;
    };
    achievements: any[];
    registeredAt: Date;
    lastVisit: Date;
    gameHistory: any[];
}

interface LeaderboardEntry {
    rank: number;
    name: string;
    username?: string;
    telegramId: string;
    totalScore: number;
    userRank: UserRank;
}

interface AvatarData {
    hasAvatar: boolean;
    avatarUrl: string | null;
    fileSize?: number;
    dimensions?: {
        width: number;
        height: number;
    };
    message?: string;
}

// –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
router.use(authMiddleware as any);

/**
 * @route   GET /api/user/profile
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @access  Private
 */
router.get('/profile', async (req: AuthenticatedRequest, res: Response) => {
    try {
        console.log('üë§ –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ middleware
        if (!req.user || !req.user.telegramId) {
            console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            res.status(401).json({
                status: 'error',
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            });
            return;
        }

        const telegramId = req.user.telegramId;
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramId}`);

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        let user = await User.findOne({ telegramId });

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
        if (!user) {
            console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramId}`);

            user = new User({
                telegramId: req.user.telegramId,
                username: req.user.username,
                firstName: req.user.firstName,
                lastName: req.user.lastName,
                rank: '–°–¢–ê–ñ–ï–†' as UserRank,
                stats: {
                    investigations: 0,
                    solvedCases: 0,
                    totalQuestions: 0,
                    accuracy: 0,
                    experience: 0,
                    level: 1,
                    totalScore: 0,
                    winStreak: 0,
                    maxWinStreak: 0,
                    perfectGames: 0,
                    averageTime: 0,
                    fastestGame: 0,
                    dailyStreakCurrent: 0,
                    dailyStreakBest: 0,
                    lastActiveDate: new Date(),
                    crimeTypeMastery: {
                        murder: { level: 0, experience: 0 },
                        robbery: { level: 0, experience: 0 },
                        fraud: { level: 0, experience: 0 },
                        theft: { level: 0, experience: 0 },
                        cybercrime: { level: 0, experience: 0 }
                    },
                    gamesThisHour: 0,
                    gamesToday: 0,
                    experienceMultiplier: 1.0,
                    easyGames: 0,
                    mediumGames: 0,
                    hardGames: 0,
                    expertGames: 0
                },
                achievements: [],
                registeredAt: new Date(),
                lastVisit: new Date(),
                gameHistory: []
            });

            try {
                await user.save();
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${telegramId}`);
            } catch (saveError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', saveError);
                res.status(500).json({
                    status: 'error',
                    message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                });
                return;
            }
        } else {
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${telegramId}`);
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
            user.lastVisit = new Date();
            await user.save();
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const displayName = user.firstName
            ? `${user.firstName} ${user.lastName || ''}`.trim()
            : (user.username || '–î–µ—Ç–µ–∫—Ç–∏–≤');

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        const profileData: ProfileData = {
            telegramId: user.telegramId,
            name: displayName,
            firstName: user.firstName,
            lastName: user.lastName,
            username: user.username,
            rank: user.rank || '–°–¢–ê–ñ–ï–†' as UserRank,
            stats: {
                investigations: user.stats?.investigations || 0,
                solvedCases: user.stats?.solvedCases || 0,
                winStreak: user.stats?.winStreak || 0,
                maxWinStreak: user.stats?.maxWinStreak || 0,
                accuracy: user.stats?.accuracy || 0,
                totalScore: user.stats?.totalScore || 0
            },
            achievements: user.achievements || [],
            registeredAt: user.registeredAt || new Date(),
            lastVisit: user.lastVisit || new Date(),
            gameHistory: user.gameHistory || []
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', {
            telegramId,
            name: displayName,
            rank: profileData.rank,
            totalScore: profileData.stats.totalScore
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        res.json({
            status: 'success',
            data: profileData
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            status: 'error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

/**
 * @route   PUT /api/user/profile
 * @desc    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @access  Private
 */
router.put('/profile', async (req: UpdateProfileRequest, res: Response) => {
    try {
        const telegramId = req.user?.telegramId;
        const { nickname } = req.body;

        if (!telegramId) {
            res.status(401).json({
                status: 'error',
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            });
            return;
        }

        console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramId}`, { nickname });

        // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findOneAndUpdate(
            { telegramId },
            {
                nickname,
                lastVisit: new Date()
            },
            { new: true }
        );

        if (!user) {
            res.status(404).json({
                status: 'error',
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
            return;
        }

        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${telegramId}`);

        res.json({
            status: 'success',
            message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            status: 'error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

/**
 * @route   GET /api/user/stats
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç UserController)
 * @access  Private
 */
router.get('/stats', UserController.getStats as any);

/**
 * @route   GET /api/user/history
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç UserController)
 * @access  Private
 */
router.get('/history', UserController.getGameHistory as any);

/**
 * @route   GET /api/user/leaderboard
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç UserController)
 * @access  Private
 */
router.get('/leaderboard', UserController.getLeaderboard as any);

/**
 * @route   GET /api/user/leaderboard-legacy
 * @desc    Legacy –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
 * @access  Private
 */
router.get('/leaderboard-legacy', async (req: LeaderboardRequest, res: Response) => {
    try {
        const { period = 'all', limit = '20' } = req.query;
        const currentUserTelegramId = req.user?.telegramId;

        console.log(`üèÜ –ó–∞–ø—Ä–æ—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (legacy):`, { period, limit, currentUserTelegramId });

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É
        const leaders = await User.find({ 'stats.totalScore': { $gt: 0 } })
            .sort({ 'stats.totalScore': -1 })
            .limit(parseInt(limit))
            .select('telegramId firstName lastName username stats.totalScore rank');

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const formattedLeaders: LeaderboardEntry[] = leaders.map((user, index) => {
            const displayName = user.firstName
                ? `${user.firstName} ${user.lastName || ''}`.trim()
                : (user.username || '–î–µ—Ç–µ–∫—Ç–∏–≤');

            return {
                rank: index + 1,
                name: displayName,
                username: user.username,
                telegramId: user.telegramId,
                totalScore: user.stats?.totalScore || 0,
                userRank: user.rank || '–°–¢–ê–ñ–ï–†' as UserRank
            };
        });

        console.log(`‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω: ${formattedLeaders.length} –∑–∞–ø–∏—Å–µ–π`);

        res.json({
            status: 'success',
            data: {
                entries: formattedLeaders,
                period,
                total: formattedLeaders.length,
                currentUser: {
                    telegramId: currentUserTelegramId
                }
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', error);
        res.status(500).json({
            status: 'error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

/**
 * @route   GET /api/user/avatar
 * @desc    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
 * @access  Private
 */
router.get('/avatar', async (req: AuthenticatedRequest, res: Response) => {
    try {
        const telegramId = req.user?.telegramId;

        if (!telegramId) {
            res.status(401).json({
                status: 'error',
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
            });
            return;
        }

        console.log(`üñºÔ∏è –ó–∞–ø—Ä–æ—Å –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        if (!botToken) {
            console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω');
            res.status(500).json({
                status: 'error',
                message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞'
            });
            return;
        }

        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è
        const telegramApiUrl = `https://api.telegram.org/bot${botToken}/getUserProfilePhotos`;
        const params = new URLSearchParams({
            user_id: telegramId,
            limit: '1'  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        });

        console.log(`üì∏ –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`, {
            telegramId,
            url: `${telegramApiUrl}?${params}`
        });

        const response = await fetch(`${telegramApiUrl}?${params}`);
        const data = await response.json();

        if (!data.ok) {
            console.warn('‚ö†Ô∏è Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è', {
                telegramId,
                error: data.description
            });
            res.json({
                status: 'success',
                data: {
                    hasAvatar: false,
                    avatarUrl: null,
                    message: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
                } as AvatarData
            });
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        if (!data.result || !data.result.photos || data.result.photos.length === 0) {
            console.info('‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è', { telegramId });
            res.json({
                status: 'success',
                data: {
                    hasAvatar: false,
                    avatarUrl: null,
                    message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è'
                } as AvatarData
            });
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        const lastPhoto = data.result.photos[0]; // –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
        const largestPhoto = lastPhoto[lastPhoto.length - 1]; // –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä

        if (!largestPhoto || !largestPhoto.file_id) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', { telegramId });
            res.json({
                status: 'success',
                data: {
                    hasAvatar: false,
                    avatarUrl: null,
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è'
                } as AvatarData
            });
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
        const fileApiUrl = `https://api.telegram.org/bot${botToken}/getFile`;
        const fileParams = new URLSearchParams({
            file_id: largestPhoto.file_id
        });

        const fileResponse = await fetch(`${fileApiUrl}?${fileParams}`);
        const fileData = await fileResponse.json();

        if (!fileData.ok || !fileData.result || !fileData.result.file_path) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', {
                telegramId,
                fileId: largestPhoto.file_id
            });
            res.json({
                status: 'success',
                data: {
                    hasAvatar: false,
                    avatarUrl: null,
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é'
                } as AvatarData
            });
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        const avatarUrl = `https://api.telegram.org/file/bot${botToken}/${fileData.result.file_path}`;

        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
            telegramId,
            avatarUrl: avatarUrl.substring(0, 50) + '...',
            fileSize: fileData.result.file_size
        });

        const avatarData: AvatarData = {
            hasAvatar: true,
            avatarUrl: avatarUrl,
            fileSize: fileData.result.file_size,
            dimensions: {
                width: largestPhoto.width,
                height: largestPhoto.height
            }
        };

        res.json({
            status: 'success',
            data: avatarData
        });

    } catch (error: unknown) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞',
            message: (error as Error).message,
            stack: (error as Error).stack
        });
    }
});

export default router; 