const express = require('express');
const router = express.Router();
const User = require('../models/User');
const { authMiddleware } = require('../middleware/auth');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
router.get('/', authMiddleware, async (req, res) => {
    try {
        const user = await User.findOne({ telegramId: req.user.telegramId });

        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        const profileData = {
            basic: {
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                nickname: user.nickname,
                registeredAt: user.registeredAt,
                lastVisit: user.lastVisit
            },

            // üèÜ –î–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–µ –∑–≤–∞–Ω–∏–µ
            rank: {
                current: user.rank,
                displayName: user.getRankDisplayName(),
                rarity: user.getRankRarity(),
                progress: user.rewards.nextRankProgress
            },

            // ‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            reputation: user.getReputationBreakdown(),

            // üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats: {
                // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                investigations: user.stats.investigations,
                solvedCases: user.stats.solvedCases,
                totalQuestions: user.stats.totalQuestions,
                totalScore: user.stats.totalScore,
                accuracy: user.stats.accuracy,

                // –°–µ—Ä–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                winStreak: user.stats.winStreak,
                maxWinStreak: user.stats.maxWinStreak,
                perfectGames: user.stats.perfectGames,

                // –°–∫–æ—Ä–æ—Å—Ç—å
                averageTime: user.stats.averageTime,
                fastestGame: user.stats.fastestGame,

                // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                dailyStreakCurrent: user.stats.dailyStreakCurrent,
                dailyStreakBest: user.stats.dailyStreakBest,

                // –ü–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                gamesBySifficulty: {
                    easy: user.stats.easyGames,
                    medium: user.stats.mediumGames,
                    hard: user.stats.hardGames,
                    expert: user.stats.expertGames
                }
            },

            // üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements: {
                progress: user.getAchievementsProgress(),
                list: user.achievements.map(achievement => ({
                    ...achievement.toObject(),
                    isRecent: achievement.unlockedAt &&
                        (Date.now() - achievement.unlockedAt.getTime()) < 7 * 24 * 60 * 60 * 1000 // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                }))
            },

            // üìà –ù–µ–¥–∞–≤–Ω–∏–µ –∏–≥—Ä—ã
            recentGames: user.gameHistory
                .slice(-10)
                .reverse()
                .map(game => ({
                    ...game.toObject(),
                    efficiency: game.totalQuestions > 0 ?
                        Math.round((game.correctAnswers / game.totalQuestions) * 100) : 0
                }))
        };

        res.json(profileData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
router.get('/reputation/details', authMiddleware, async (req, res) => {
    try {
        const user = await User.findOne({ telegramId: req.user.telegramId });

        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const reputationDetails = {
            current: user.getReputationBreakdown(),

            // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 –∏–≥—Ä)
            history: user.gameHistory
                .slice(-20)
                .map(game => ({
                    date: game.date,
                    reputationGained: game.reputationGained || 0,
                    efficiency: Math.round((game.correctAnswers / game.totalQuestions) * 100),
                    difficulty: game.difficulty
                })),

            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            recommendations: generateReputationRecommendations(user)
        };

        res.json(reputationDetails);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üèÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
router.get('/achievements/available', authMiddleware, async (req, res) => {
    try {
        const user = await User.findOne({ telegramId: req.user.telegramId });

        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const availableAchievements = generateAvailableAchievements(user);

        res.json({
            unlocked: user.achievements,
            available: availableAchievements,
            progress: user.getAchievementsProgress()
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
router.get('/leaderboard/:period?', authMiddleware, async (req, res) => {
    try {
        const period = req.params.period || 'all';
        const limit = parseInt(req.query.limit) || 50;

        let dateFilter = {};
        const now = new Date();

        switch (period) {
            case 'week':
                dateFilter = { lastVisit: { $gte: new Date(now - 7 * 24 * 60 * 60 * 1000) } };
                break;
            case 'month':
                dateFilter = { lastVisit: { $gte: new Date(now - 30 * 24 * 60 * 60 * 1000) } };
                break;
            case 'today':
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                dateFilter = { lastVisit: { $gte: today } };
                break;
        }

        // –¢–æ–ø –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
        const leaderboards = {
            // –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (–æ—á–∫–∏)
            totalScore: await User.find(dateFilter)
                .sort({ 'stats.totalScore': -1 })
                .limit(limit)
                .select('telegramId username firstName lastName nickname rank stats.totalScore reputation.level')
                .lean(),

            // –†–µ–ø—É—Ç–∞—Ü–∏—è
            reputation: await User.find(dateFilter)
                .sort({ 'reputation.level': -1 })
                .limit(limit)
                .select('telegramId username firstName lastName nickname rank reputation stats.investigations')
                .lean(),

            // –¢–æ—á–Ω–æ—Å—Ç—å
            accuracy: await User.find({
                ...dateFilter,
                'stats.investigations': { $gte: 10 } // –º–∏–Ω–∏–º—É–º 10 –∏–≥—Ä
            })
                .sort({ 'stats.accuracy': -1 })
                .limit(limit)
                .select('telegramId username firstName lastName nickname rank stats.accuracy stats.investigations')
                .lean(),

            // –°–µ—Ä–∏–∏
            streaks: await User.find(dateFilter)
                .sort({ 'stats.maxWinStreak': -1 })
                .limit(limit)
                .select('telegramId username firstName lastName nickname rank stats.maxWinStreak stats.winStreak')
                .lean(),

            // –°–∫–æ—Ä–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —É –∫–æ–≥–æ –µ—Å—Ç—å –≤—Ä–µ–º—è)
            speed: await User.find({
                ...dateFilter,
                'stats.fastestGame': { $gt: 0 }
            })
                .sort({ 'stats.fastestGame': 1 }) // –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ = –ª—É—á—à–µ
                .limit(limit)
                .select('telegramId username firstName lastName nickname rank stats.fastestGame stats.averageTime')
                .lean()
        };

        res.json(leaderboards);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
router.get('/progress/next-achievements', authMiddleware, async (req, res) => {
    try {
        const user = await User.findOne({ telegramId: req.user.telegramId });

        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const nextAchievements = calculateNextAchievements(user);

        res.json({
            nextRank: {
                current: user.rank,
                progress: user.rewards.nextRankProgress,
                displayName: user.getRankDisplayName()
            },
            nextAchievements
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
function generateReputationRecommendations(user) {
    const recommendations = [];

    if (user.reputation.accuracy < 70) {
        recommendations.push({
            type: 'accuracy',
            title: '–£–ª—É—á—à–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å',
            description: '–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ —á–∏—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤',
            priority: 'high'
        });
    }

    if (user.reputation.speed < 50 && user.stats.averageTime > 0) {
        recommendations.push({
            type: 'speed',
            title: '–£–≤–µ–ª–∏—á—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å',
            description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∞—Ç—å –¥–µ–ª–∞ –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –Ω–µ –∂–µ—Ä—Ç–≤—É—è —Ç–æ—á–Ω–æ—Å—Ç—å—é',
            priority: 'medium'
        });
    }

    if (user.reputation.consistency < 60) {
        recommendations.push({
            type: 'consistency',
            title: '–ò–≥—Ä–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ',
            description: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ',
            priority: 'medium'
        });
    }

    if (user.reputation.difficulty < 40) {
        recommendations.push({
            type: 'difficulty',
            title: '–ü—Ä–æ–±—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –¥–µ–ª–∞',
            description: '–†–µ—à–µ–Ω–∏–µ –¥–µ–ª –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–∏—Ç –≤–∞—à—É —Ä–µ–ø—É—Ç–∞—Ü–∏—é',
            priority: 'low'
        });
    }

    return recommendations;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function generateAvailableAchievements(user) {
    const available = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∏–≥—Ä–∞–º
    const investigationMilestones = [5, 25, 50, 100, 250, 500];
    const nextInvestigationMilestone = investigationMilestones.find(m => m > user.stats.investigations);

    if (nextInvestigationMilestone) {
        available.push({
            id: `detective_milestone_${nextInvestigationMilestone}`,
            name: `${nextInvestigationMilestone} —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π`,
            category: '–ü–†–û–ì–†–ï–°–°',
            progress: {
                current: user.stats.investigations,
                target: nextInvestigationMilestone
            },
            description: `–ü—Ä–æ–≤–µ–¥–∏—Ç–µ ${nextInvestigationMilestone} —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π`
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
    if (user.stats.accuracy < 90 && user.stats.investigations >= 10) {
        available.push({
            id: 'accuracy_90',
            name: '–ú–∞—Å—Ç–µ—Ä-–¥–µ—Ç–µ–∫—Ç–∏–≤',
            category: '–ú–ê–°–¢–ï–†–°–¢–í–û',
            progress: {
                current: user.stats.accuracy,
                target: 90
            },
            description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 90% —Ç–æ—á–Ω–æ—Å—Ç–∏'
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å–µ—Ä–∏—è–º
    const streakMilestones = [3, 5, 10, 20];
    const nextStreakMilestone = streakMilestones.find(m => m > user.stats.maxWinStreak);

    if (nextStreakMilestone) {
        available.push({
            id: `streak_${nextStreakMilestone}`,
            name: `–°–µ—Ä–∏—è –∏–∑ ${nextStreakMilestone}`,
            category: '–°–ï–†–ò–ò',
            progress: {
                current: user.stats.maxWinStreak,
                target: nextStreakMilestone
            },
            description: `–°–æ–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é –∏–∑ ${nextStreakMilestone} –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä`
        });
    }

    return available;
}

// –†–∞—Å—á–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function calculateNextAchievements(user) {
    const next = [];

    // –°–ª–µ–¥—É—é—â–µ–µ –∑–≤–∞–Ω–∏–µ
    const rankThresholds = [0, 150, 400, 900, 2000, 4500, 10000, 20000];
    const currentRankIndex = rankThresholds.findIndex(threshold => user.stats.totalScore < threshold);

    if (currentRankIndex > 0 && currentRankIndex < rankThresholds.length) {
        const nextThreshold = rankThresholds[currentRankIndex];
        const progress = Math.round(((user.stats.totalScore) / nextThreshold) * 100);

        next.push({
            type: 'rank',
            title: '–°–ª–µ–¥—É—é—â–µ–µ –∑–≤–∞–Ω–∏–µ',
            progress: {
                current: user.stats.totalScore,
                target: nextThreshold,
                percentage: Math.min(progress, 100)
            },
            description: `–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–≤–∞–Ω–∏—è: ${nextThreshold - user.stats.totalScore} –æ—á–∫–æ–≤`
        });
    }

    return next;
}

module.exports = router; 