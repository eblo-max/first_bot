const jwt = require('jsonwebtoken');
const crypto = require('crypto');

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT-—Ç–æ–∫–µ–Ω–∞
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–∑ –æ–±–µ–∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
 */
const authMiddleware = (req, res, next) => {
    try {

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith('Bearer ')) {

            return res.status(401).json({
                status: 'error',
                message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            });
        }

        const token = authHeader.split(' ')[1];
        if (!token) {

            return res.status(401).json({
                status: 'error',
                message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            });
        }

        console.log('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', token.substring(0, 20) + '...');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'default_secret_key');

        req.user = decoded;

        next();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);

        // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JWT
        if (error.name === 'TokenExpiredError') {
            return res.status(401).json({
                status: 'error',
                message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è',
                code: 'TOKEN_EXPIRED'
            });
        }

        if (error.name === 'JsonWebTokenError') {
            return res.status(401).json({
                status: 'error',
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                code: 'TOKEN_INVALID'
            });
        }

        return res.status(401).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞',
            code: 'TOKEN_ERROR'
        });
    }
};

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const verifyTelegramWebAppData = (req, res, next) => {
    try {
        console.log('üîç === –ù–ê–ß–ê–õ–û –í–ê–õ–ò–î–ê–¶–ò–ò TELEGRAM WEBAPP ===');

        // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        const userAgent = req.headers['user-agent'] || '';
        const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);

        console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–∞:');
        console.log('  - User-Agent:', userAgent);
        console.log('  - Is Mobile:', isMobile);
        console.log('  - Request IP:', req.ip || req.connection.remoteAddress);
        console.log('  - Request Method:', req.method);
        console.log('  - Request URL:', req.originalUrl);

        console.log('üîç –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:');
        Object.entries(req.headers).forEach(([key, value]) => {
            console.log(`  - ${key}: ${value}`);
        });

        console.log('üîç Body analysis:');
        console.log('  - Body keys:', Object.keys(req.body));
        console.log('  - Body size:', JSON.stringify(req.body).length, 'bytes');

        const { initData } = req.body;
        if (!initData) {
            console.error('‚ùå initData –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ');
            console.log('üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π body:', JSON.stringify(req.body, null, 2));
            return res.status(401).json({
                status: 'error',
                message: 'initData –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã',
                code: 'INIT_DATA_MISSING',
                debug: {
                    isMobile,
                    userAgent,
                    bodyKeys: Object.keys(req.body)
                }
            });
        }

        console.log('üîç initData –∞–Ω–∞–ª–∏–∑:');
        console.log('  - –î–ª–∏–Ω–∞:', initData.length);
        console.log('  - –¢–∏–ø:', typeof initData);
        console.log('  - –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤:', initData.substring(0, 300));
        console.log('  - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:', initData.slice(-100));

        // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        const data = new URLSearchParams(initData);
        const hash = data.get('hash');
        const authDate = data.get('auth_date');
        const user = data.get('user');
        const queryId = data.get('query_id');

        console.log('üîç –†–∞–∑–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ initData:');
        console.log('  - hash –Ω–∞–π–¥–µ–Ω:', !!hash, hash ? `(${hash.substring(0, 20)}...)` : '');
        console.log('  - auth_date:', authDate);
        console.log('  - user –Ω–∞–π–¥–µ–Ω:', !!user);
        console.log('  - query_id:', queryId);

        console.log('üîç –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã initData:');
        for (const [key, value] of data.entries()) {
            if (key === 'user') {
                console.log(`  - ${key}: ${value.substring(0, 100)}...`);
            } else {
                console.log(`  - ${key}: ${value}`);
            }
        }

        if (!hash) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash –≤ initData');
            return res.status(401).json({
                status: 'error',
                message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash –≤ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                code: 'HASH_MISSING',
                debug: {
                    isMobile,
                    userAgent,
                    initDataLength: initData.length,
                    parsedKeys: [...data.keys()]
                }
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (authDate) {
            const authTime = parseInt(authDate) * 1000;
            const now = Date.now();
            const timeDiff = now - authTime;
            const hours = Math.floor(timeDiff / (1000 * 60 * 60));

            console.log('üîç –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
            console.log('  - –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', new Date(authTime).toISOString());
            console.log('  - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', new Date(now).toISOString());
            console.log('  - –†–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö:', hours);

            if (hours > 24) {
                console.warn('‚ö†Ô∏è  initData —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π!');
            }
        }

        data.delete('hash');

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const dataCheckArr = [];
        for (const [key, value] of [...data.entries()].sort()) {
            dataCheckArr.push(`${key}=${value}`);
        }
        const dataCheckString = dataCheckArr.join('\n');

        console.log('üîç dataCheckString:');
        console.log('  - –î–ª–∏–Ω–∞:', dataCheckString.length);
        console.log('  - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):', dataCheckString.substring(0, 500));

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        if (!botToken) {
            console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            return res.status(500).json({
                status: 'error',
                message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞',
                code: 'BOT_TOKEN_MISSING'
            });
        }

        console.log('üîç Bot token –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
        console.log('  - –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:', botToken.length);
        console.log('  - –ü–µ—Ä–≤—ã–µ 15 —Å–∏–º–≤–æ–ª–æ–≤:', botToken.substring(0, 15) + '...');
        console.log('  - –°–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ:', botToken.includes(':'));

        const secret = crypto
            .createHmac('sha256', 'WebAppData')
            .update(botToken)
            .digest();

        console.log('üîç Secret key:');
        console.log('  - –î–ª–∏–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', secret.length);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞
        const generatedHash = crypto
            .createHmac('sha256', secret)
            .update(dataCheckString)
            .digest('hex');

        console.log('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–µ—à–µ–π:');
        console.log('  - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π:', generatedHash);
        console.log('  - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π:     ', hash);
        console.log('  - –°–æ–≤–ø–∞–¥–∞—é—Ç:', generatedHash === hash);

        if (generatedHash !== hash) {
            console.error('‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π hash');

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if (isMobile) {
                console.error('üîç –ú–û–ë–ò–õ–¨–ù–û–ï –£–°–¢–†–û–ô–°–¢–í–û - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
                console.error('  - –í–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–ª–∏—á–∏–µ –≤ URL encoding –º–µ–∂–¥—É mobile –∏ desktop');
                console.error('  - –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è...');

                // –ü—ã—Ç–∞–µ–º—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
                try {
                    const rawParams = new URLSearchParams(initData);
                    console.error('  - Raw parameters parsing success');

                    for (const [key, value] of rawParams.entries()) {
                        console.error(`    ${key} = ${value.substring(0, 50)}...`);
                    }
                } catch (e) {
                    console.error('  - Raw parameters parsing failed:', e.message);
                }
            }

            return res.status(401).json({
                status: 'error',
                message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π hash',
                code: 'HASH_INVALID',
                debug: {
                    isMobile,
                    userAgent,
                    expected: generatedHash,
                    received: hash,
                    initDataLength: initData.length,
                    dataCheckStringLength: dataCheckString.length
                }
            });
        }

        console.log('‚úÖ Hash –≤–∞–ª–∏–¥–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (data.has('user')) {
            try {
                const userRaw = JSON.parse(data.get('user'));
                console.log('üîç –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', JSON.stringify(userRaw, null, 2));

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                req.telegramUser = {
                    telegramId: userRaw.id.toString(),
                    username: userRaw.username || null,
                    firstName: userRaw.first_name || null,
                    lastName: userRaw.last_name || null,
                    languageCode: userRaw.language_code || 'ru',
                    isPremium: userRaw.is_premium || false
                };

                console.log('‚úÖ req.telegramUser —Å–æ–∑–¥–∞–Ω:', JSON.stringify(req.telegramUser, null, 2));

            } catch (parseError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', parseError);
                return res.status(400).json({
                    status: 'error',
                    message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    code: 'USER_DATA_PARSE_ERROR',
                    debug: {
                        isMobile,
                        userAgent,
                        parseError: parseError.message
                    }
                });
            }
        } else {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ initData');
            return res.status(400).json({
                status: 'error',
                message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                code: 'USER_DATA_MISSING',
                debug: {
                    isMobile,
                    userAgent,
                    availableKeys: [...data.keys()]
                }
            });
        }

        console.log('‚úÖ === –í–ê–õ–ò–î–ê–¶–ò–Ø TELEGRAM WEBAPP –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===');
        next();

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
        console.error('‚ùå Stack trace:', error.stack);
        return res.status(500).json({
            status: 'error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
            code: 'VALIDATION_ERROR',
            debug: {
                error: error.message,
                stack: error.stack
            }
        });
    }
};

module.exports = {
    authMiddleware,
    verifyTelegramWebAppData
}; 