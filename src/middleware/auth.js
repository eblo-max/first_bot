const jwt = require('jsonwebtoken');
const crypto = require('crypto');

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT-—Ç–æ–∫–µ–Ω–∞
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–∑ –æ–±–µ–∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
 */
const authMiddleware = (req, res, next) => {
    try {

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith('Bearer ')) {

            return res.status(401).json({
                status: 'error',
                message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            });
        }

        const token = authHeader.split(' ')[1];
        if (!token) {

            return res.status(401).json({
                status: 'error',
                message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
            });
        }

        console.log('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', token.substring(0, 20) + '...');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'default_secret_key');

        req.user = decoded;

        next();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);

        // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JWT
        if (error.name === 'TokenExpiredError') {
            return res.status(401).json({
                status: 'error',
                message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è',
                code: 'TOKEN_EXPIRED'
            });
        }

        if (error.name === 'JsonWebTokenError') {
            return res.status(401).json({
                status: 'error',
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                code: 'TOKEN_INVALID'
            });
        }

        return res.status(401).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞',
            code: 'TOKEN_ERROR'
        });
    }
};

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const verifyTelegramWebAppData = (req, res, next) => {
    try {
        console.log('üîç === –ù–ê–ß–ê–õ–û –í–ê–õ–ò–î–ê–¶–ò–ò TELEGRAM WEBAPP ===');
        console.log('üîç Headers:', JSON.stringify(req.headers, null, 2));
        console.log('üîç Body keys:', Object.keys(req.body));
        console.log('üîç User-Agent:', req.headers['user-agent']);

        const { initData } = req.body;
        if (!initData) {
            console.error('‚ùå initData –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ');
            console.log('üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π body:', JSON.stringify(req.body, null, 2));
            return res.status(401).json({
                status: 'error',
                message: 'initData –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã',
                code: 'INIT_DATA_MISSING'
            });
        }

        console.log('üîç –ü–æ–ª—É—á–µ–Ω initData –¥–ª–∏–Ω–æ–π:', initData.length);
        console.log('üîç initData (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):', initData.substring(0, 200) + '...');

        // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        const data = new URLSearchParams(initData);
        const hash = data.get('hash');

        console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π hash:', hash);
        console.log('üîç –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã initData:');
        for (const [key, value] of data.entries()) {
            if (key === 'user') {
                console.log(`  ${key}: ${value.substring(0, 100)}...`);
            } else {
                console.log(`  ${key}: ${value}`);
            }
        }

        if (!hash) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash –≤ initData');
            return res.status(401).json({
                status: 'error',
                message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash –≤ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                code: 'HASH_MISSING'
            });
        }

        data.delete('hash');

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const dataCheckArr = [];
        for (const [key, value] of [...data.entries()].sort()) {
            dataCheckArr.push(`${key}=${value}`);
        }
        const dataCheckString = dataCheckArr.join('\n');

        console.log('üîç dataCheckString —Å–æ–∑–¥–∞–Ω, –¥–ª–∏–Ω–∞:', dataCheckString.length);
        console.log('üîç dataCheckString (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):', dataCheckString.substring(0, 200) + '...');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        if (!botToken) {
            console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            return res.status(500).json({
                status: 'error',
                message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞',
                code: 'BOT_TOKEN_MISSING'
            });
        }

        console.log('üîç Bot token (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤):', botToken.substring(0, 10) + '...');

        const secret = crypto
            .createHmac('sha256', 'WebAppData')
            .update(botToken)
            .digest();

        console.log('üîç Secret key —Å–æ–∑–¥–∞–Ω, –¥–ª–∏–Ω–∞:', secret.length);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞
        const generatedHash = crypto
            .createHmac('sha256', secret)
            .update(dataCheckString)
            .digest('hex');

        console.log('üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hash:', generatedHash);
        console.log('üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π hash:     ', hash);
        console.log('üîç –•–µ—à–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç:', generatedHash === hash);

        if (generatedHash !== hash) {
            console.error('‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π hash.');
            console.error('‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è:', generatedHash);
            console.error('‚ùå –ü–æ–ª—É—á–µ–Ω:', hash);
            return res.status(401).json({
                status: 'error',
                message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π hash',
                code: 'HASH_INVALID'
            });
        }

        console.log('‚úÖ Hash –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (data.has('user')) {
            try {
                const userRaw = JSON.parse(data.get('user'));
                console.log('üîç –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData:', JSON.stringify(userRaw, null, 2));

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                req.telegramUser = {
                    telegramId: userRaw.id.toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º id –≤ telegramId
                    username: userRaw.username || null,
                    firstName: userRaw.first_name || null,
                    lastName: userRaw.last_name || null,
                    languageCode: userRaw.language_code || 'ru',
                    isPremium: userRaw.is_premium || false
                };

                console.log('‚úÖ req.telegramUser —Å–æ–∑–¥–∞–Ω:', JSON.stringify(req.telegramUser, null, 2));

            } catch (parseError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', parseError);
                return res.status(400).json({
                    status: 'error',
                    message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                    code: 'USER_DATA_PARSE_ERROR'
                });
            }
        } else {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ initData');
            return res.status(400).json({
                status: 'error',
                message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                code: 'USER_DATA_MISSING'
            });
        }

        console.log('‚úÖ === –í–ê–õ–ò–î–ê–¶–ò–Ø TELEGRAM WEBAPP –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===');
        next();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram:', error);
        console.error('‚ùå Stack trace:', error.stack);
        res.status(401).json({
            status: 'error',
            message: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            code: 'TELEGRAM_AUTH_ERROR'
        });
    }
};

module.exports = {
    authMiddleware,
    verifyTelegramWebAppData
}; 