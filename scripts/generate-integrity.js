/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä integrity —Ö–µ—à–µ–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SRI (Subresource Integrity) —Ö–µ—à–∏
 */

const https = require('https');
const crypto = require('crypto');
const fs = require('fs').promises;
const path = require('path');

class IntegrityGenerator {
    constructor() {
        this.resources = [
            {
                url: 'https://telegram.org/js/telegram-web-app.js',
                type: 'script',
                description: 'Telegram WebApp API'
            },
            {
                url: 'https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@400;700&display=swap',
                type: 'stylesheet',
                description: 'Google Fonts - Roboto Condensed'
            }
        ];
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ—Å—É—Ä—Å –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç SRI —Ö–µ—à
     */
    async fetchAndHash(url) {
        return new Promise((resolve, reject) => {
            console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º: ${url}`);

            https.get(url, (response) => {
                if (response.statusCode !== 200) {
                    reject(new Error(`HTTP ${response.statusCode} –¥–ª—è ${url}`));
                    return;
                }

                const chunks = [];

                response.on('data', (chunk) => {
                    chunks.push(chunk);
                });

                response.on('end', () => {
                    const content = Buffer.concat(chunks);

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
                    const sha256 = crypto.createHash('sha256').update(content).digest('base64');
                    const sha384 = crypto.createHash('sha384').update(content).digest('base64');
                    const sha512 = crypto.createHash('sha512').update(content).digest('base64');

                    resolve({
                        url,
                        size: content.length,
                        hashes: {
                            sha256: `sha256-${sha256}`,
                            sha384: `sha384-${sha384}`,
                            sha512: `sha512-${sha512}`
                        },
                        // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ö–µ—à (SHA-384 - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å)
                        recommended: `sha384-${sha384}`
                    });
                });

            }).on('error', (err) => {
                reject(err);
            });
        });
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç integrity —Ö–µ—à–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    async generateHashes() {
        console.log('üõ°Ô∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º integrity —Ö–µ—à–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...\n');

        const results = [];

        for (const resource of this.resources) {
            try {
                const result = await this.fetchAndHash(resource.url);
                results.push({
                    ...resource,
                    ...result
                });

                console.log(`‚úÖ ${resource.description}:`);
                console.log(`   –†–∞–∑–º–µ—Ä: ${result.size} bytes`);
                console.log(`   SHA-384: ${result.hashes.sha384}`);
                console.log('');

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${resource.url}:`, error.message);
            }
        }

        return results;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç HTML –∫–æ–¥ —Å integrity –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
     */
    generateHTML(results) {
        console.log('üìù HTML –∫–æ–¥ —Å integrity –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏:\n');

        results.forEach(resource => {
            if (resource.type === 'script') {
                console.log(`<!-- ${resource.description} -->`);
                console.log(`<script src="${resource.url}"`);
                console.log(`        integrity="${resource.recommended}"`);
                console.log(`        crossorigin="anonymous"></script>\n`);
            } else if (resource.type === 'stylesheet') {
                console.log(`<!-- ${resource.description} -->`);
                console.log(`<link href="${resource.url}"`);
                console.log(`      rel="stylesheet"`);
                console.log(`      integrity="${resource.recommended}"`);
                console.log(`      crossorigin="anonymous">\n`);
            }
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
     */
    async saveResults(results) {
        const outputPath = path.join(process.cwd(), 'integrity-hashes.json');

        const output = {
            generated: new Date().toISOString(),
            description: 'SRI (Subresource Integrity) —Ö–µ—à–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤',
            resources: results.map(r => ({
                url: r.url,
                type: r.type,
                description: r.description,
                size: r.size,
                integrity: r.recommended,
                allHashes: r.hashes
            }))
        };

        await fs.writeFile(outputPath, JSON.stringify(output, null, 2));
        console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async run() {
        try {
            const results = await this.generateHashes();

            if (results.length > 0) {
                this.generateHTML(results);
                await this.saveResults(results);

                console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è integrity —Ö–µ—à–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
                console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ HTML –∫–æ–¥ –≤—ã—à–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –≤–∞—à–∏ HTML —Ñ–∞–π–ª—ã');
                console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∞–π—Ç, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                console.log('3. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Ö–µ—à–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤');
            } else {
                console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
            process.exit(1);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
if (require.main === module) {
    const generator = new IntegrityGenerator();
    generator.run();
}

module.exports = IntegrityGenerator; 