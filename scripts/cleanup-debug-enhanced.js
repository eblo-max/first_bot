#!/usr/bin/env node

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ debug –∫–æ–¥–∞
 * –£–¥–∞–ª—è–µ—Ç console.log, –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
 */

const fs = require('fs').promises;
const path = require('path');

// –°–ø–∏—Å–æ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const DEAD_FILES = [
    'public/debug.js',
    'public/game-state.js',
    'public/security-utils.js'
];

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã debug –∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const DEBUG_PATTERNS = [
    // Console –≤—ã–∑–æ–≤—ã —Å —ç–º–æ–¥–∑–∏ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞)
    /console\.log\([^)]*['"`][üîçüöÄüì±üîÑ‚úÖ‚ùåüîßüìäüîêüìãüéØüì§üîö‚ö†Ô∏èüíªüìÖüåç‚ö°üìùüõ£Ô∏èüèóÔ∏èüõ°Ô∏èüì¶‚è±Ô∏èüîÑüìäüîêüîÑüì±üöÄüìäüîç‚úÖ‚ùåüìãüéØüì§üîö‚ö†Ô∏è][^)]*\);?\s*$/gm,

    // –ë–ª–æ–∫–∏ debug –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —ç–º–æ–¥–∑–∏
    /\/\/ [üîçüöÄüì±üîÑ‚úÖ‚ùåüîßüìäüîêüìãüéØüì§üîö‚ö†Ô∏èüíªüìÖüåç‚ö°üìùüõ£Ô∏èüèóÔ∏èüõ°Ô∏èüì¶‚è±Ô∏èüîÑüìäüîêüîÑüì±üöÄüìäüîç‚úÖ‚ùåüìãüéØüì§üîö‚ö†Ô∏è].*$/gm,

    // –ü–æ–¥—Ä–æ–±–Ω—ã–µ console.log –±–ª–æ–∫–∏
    /console\.log\(['"`]üîç.*?\);?\s*$/gm,

    // Debug –±–ª–æ–∫–∏ === 
    /console\.log\(['"`][=]+ .*? [=]+['"`]\);?\s*$/gm,

    // –ü—Ä–æ—Å—Ç—ã–µ console.log –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    /console\.log\(['"`](–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è|–ù–∞—á–∞–ª–æ|–ö–æ–Ω–µ—Ü|–ü—Ä–æ–≤–µ—Ä–∫–∞|–ê–Ω–∞–ª–∏–∑|–û—Ç–ø—Ä–∞–≤–∫–∞|–ü–æ–ª—É—á–µ–Ω–∏–µ|–ó–∞–≥—Ä—É–∑–∫–∞).*?\);?\s*$/gm,

    // Console.log —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    /console\.log\(['"`].*?:['"`], [^)]+\);?\s*$/gm
];

// –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ç debug –∫–æ–¥–∞
const FILES_TO_CLEAN = [
    'public/profile.js',
    'src/middleware/auth.js',
    'src/index.js',
    'src/routes/profile.js',
    'src/routes/user.js',
    'src/routes/auth.js',
    'src/controllers/authController.js'
];

async function deleteDeadFiles() {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤...\n');

    for (const filePath of DEAD_FILES) {
        try {
            await fs.unlink(filePath);
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${filePath}`);
        } catch (error) {
            if (error.code === 'ENOENT') {
                console.log(`‚ö†Ô∏è –§–∞–π–ª —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${filePath}`);
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${filePath}:`, error.message);
            }
        }
    }
}

async function cleanDebugCode() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ debug –∫–æ–¥–∞...\n');

    for (const filePath of FILES_TO_CLEAN) {
        try {
            const content = await fs.readFile(filePath, 'utf8');
            let cleanedContent = content;
            let removedLines = 0;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            for (const pattern of DEBUG_PATTERNS) {
                const matches = cleanedContent.match(pattern);
                if (matches) {
                    removedLines += matches.length;
                    cleanedContent = cleanedContent.replace(pattern, '');
                }
            }

            // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            cleanedContent = cleanedContent.replace(/\n\s*\n\s*\n/g, '\n\n');

            if (removedLines > 0) {
                await fs.writeFile(filePath, cleanedContent);
                console.log(`‚úÖ ${filePath}: —É–¥–∞–ª–µ–Ω–æ ${removedLines} debug —Å—Ç—Ä–æ–∫`);
            } else {
                console.log(`‚ûñ ${filePath}: debug –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filePath}:`, error.message);
        }
    }
}

async function analyzeCodeDuplication() {
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É crime-app.js –∏ app.js
    try {
        const [crimeAppContent, appContent] = await Promise.all([
            fs.readFile('public/crime-app.js', 'utf8').catch(() => null),
            fs.readFile('public/app.js', 'utf8').catch(() => null)
        ]);

        if (crimeAppContent && appContent) {
            // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            const crimeAppFunctions = crimeAppContent.match(/function\s+\w+\s*\(/g) || [];
            const appFunctions = appContent.match(/function\s+\w+\s*\(/g) || [];

            const duplicatedFunctions = crimeAppFunctions.filter(func =>
                appFunctions.some(appFunc => appFunc === func)
            );

            if (duplicatedFunctions.length > 0) {
                console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${duplicatedFunctions.length} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–µ–∂–¥—É crime-app.js –∏ app.js:`);
                duplicatedFunctions.forEach(func => console.log(`   - ${func}`));
                console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å crime-app.js');
            }
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

async function generateReport() {
    console.log('\nüìä –û–¢–ß–ï–¢ –ü–û –û–ß–ò–°–¢–ö–ï:\n');

    // –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏
    let totalSizeBefore = 0;
    let totalSizeAfter = 0;

    for (const filePath of FILES_TO_CLEAN) {
        try {
            const stats = await fs.stat(filePath);
            totalSizeAfter += stats.size;
        } catch (error) {
            // –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        }
    }

    console.log(`üìÅ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${FILES_TO_CLEAN.length}`);
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${DEAD_FILES.length}`);
    console.log(`üìâ –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: ${Math.round(totalSizeAfter / 1024)} KB`);
    console.log(`üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
}

async function main() {
    console.log('üîç –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ú–ï–†–¢–í–û–ì–û –ö–û–î–ê\n');
    console.log('=' * 50);

    try {
        await deleteDeadFiles();
        await cleanDebugCode();
        await analyzeCodeDuplication();
        await generateReport();

        console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
        process.exit(1);
    }
}

if (require.main === module) {
    main();
}

module.exports = { main }; 