const mongoose = require('mongoose');
const User = require('../src/models/User');
require('dotenv').config();

(async () => {
    try {
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/criminal-bluff');

        const totalUsers = await User.countDocuments();
        const usersWithScore = await User.countDocuments({ 'stats.totalScore': { $gt: 0 } });
        const usersWithLastVisit = await User.countDocuments({ lastVisit: { $exists: true } });

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        console.log('  –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', totalUsers);
        console.log('  –° –æ—á–∫–∞–º–∏ > 0:', usersWithScore);
        console.log('  –° lastVisit:', usersWithLastVisit);

        // –ü–æ–∫–∞–∂–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤
        const topUsers = await User.find({ 'stats.totalScore': { $gt: 0 } })
            .sort({ 'stats.totalScore': -1 })
            .limit(10)
            .select('telegramId firstName username stats.totalScore lastVisit');

        console.log('\nüèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:');
        topUsers.forEach((user, index) => {
            const name = user.firstName || user.username || '–ò–≥—Ä–æ–∫' + user.telegramId.slice(-4);
            console.log(`  ${index + 1}. ${name} - ${user.stats.totalScore} –æ—á–∫–æ–≤ (lastVisit: ${user.lastVisit || '–Ω–µ —É–∫–∞–∑–∞–Ω'})`);
        });

        // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã
        const now = new Date();
        const periods = [
            { name: '–¥–µ–Ω—å', filter: { lastVisit: { $gte: new Date(now - 24 * 60 * 60 * 1000) } } },
            { name: '–Ω–µ–¥–µ–ª—é', filter: { lastVisit: { $gte: new Date(now - 7 * 24 * 60 * 60 * 1000) } } },
            { name: '–º–µ—Å—è—Ü', filter: { lastVisit: { $gte: new Date(now - 30 * 24 * 60 * 60 * 1000) } } }
        ];

        console.log('\nüìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:');
        for (const period of periods) {
            const count = await User.countDocuments({
                ...period.filter,
                'stats.totalScore': { $gt: 0 }
            });
            console.log(`  –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π ${period.name}: ${count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤`);
        }

        await mongoose.connection.close();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
})(); 