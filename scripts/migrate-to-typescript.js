#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ JavaScript —Ñ–∞–π–ª–æ–≤ –≤ TypeScript
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
 */

const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
const MIGRATION_CONFIG = {
    // –ü–∞–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    targetDirs: ['src', 'public', 'scripts'],

    // –ò—Å–∫–ª—é—á–µ–Ω–∏—è
    excludeFiles: [
        'node_modules',
        'dist',
        'build',
        'coverage',
        'test-results',
        '.git'
    ],

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (–æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É)
    migrationPriority: {
        'utils': 1,     // –£—Ç–∏–ª–∏—Ç—ã –ø–µ—Ä–≤—ã–º–∏
        'models': 2,    // –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
        'services': 3,  // –°–µ—Ä–≤–∏—Å—ã
        'controllers': 4, // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
        'routes': 5,    // –ú–∞—Ä—à—Ä—É—Ç—ã
        'middleware': 6, // –ú–∏–¥–ª–≤–∞—Ä—ã
        'public': 7     // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º
    }
};

// –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∫–æ–¥–∞
class CodeAnalyzer {
    static analyzeComplexity(content) {
        const metrics = {
            linesOfCode: content.split('\\n').length,
            functions: (content.match(/function\s+\w+/g) || []).length,
            arrowFunctions: (content.match(/=>\s*{/g) || []).length,
            classes: (content.match(/class\s+\w+/g) || []).length,
            imports: (content.match(/(?:import|require)\s*\(/g) || []).length,
            exports: (content.match(/(?:export|module\.exports)/g) || []).length,
            asyncFunctions: (content.match(/async\s+function|async\s*\(/g) || []).length
        };

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å (0-100)
        const complexity = Math.min(100,
            metrics.linesOfCode * 0.1 +
            metrics.functions * 2 +
            metrics.arrowFunctions * 1.5 +
            metrics.classes * 3 +
            metrics.asyncFunctions * 2
        );

        return { metrics, complexity: Math.round(complexity) };
    }

    static detectTypeAnnotations(content) {
        const patterns = [
            /:\s*string/g,
            /:\s*number/g,
            /:\s*boolean/g,
            /:\s*object/g,
            /:\s*any/g,
            /<.*>/g,  // Generics
            /interface\s+\w+/g,
            /type\s+\w+/g
        ];

        return patterns.some(pattern => pattern.test(content));
    }

    static findPotentialTypes(content) {
        const suggestions = [];

        // –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ —Ç–∏–ø–æ–≤
        const functionMatches = content.match(/function\s+(\w+)\s*\([^)]*\)/g);
        if (functionMatches) {
            functionMatches.forEach(match => {
                if (!/:/.test(match)) {
                    suggestions.push({
                        type: 'function',
                        suggestion: `–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è ${match}`,
                        priority: 'medium'
                    });
                }
            });
        }

        // –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –Ω–µ—è–≤–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
        const varMatches = content.match(/(let|const|var)\s+(\w+)\s*=\s*([^;\\n]+)/g);
        if (varMatches) {
            varMatches.forEach(match => {
                if (match.includes('null') || match.includes('undefined')) {
                    suggestions.push({
                        type: 'variable',
                        suggestion: `–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —è–≤–Ω–æ–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ${match}`,
                        priority: 'low'
                    });
                }
            });
        }

        return suggestions;
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏
class TypeScriptMigrator {
    constructor() {
        this.analysisResults = [];
        this.migrationPlan = [];
    }

    async analyzeProject() {
        console.log('üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò –í TYPESCRIPT\\n');

        for (const dir of MIGRATION_CONFIG.targetDirs) {
            await this.analyzeDirectory(dir);
        }

        this.generateMigrationPlan();
        this.printAnalysisReport();
    }

    async analyzeDirectory(dirPath) {
        try {
            const entries = await fs.readdir(dirPath, { withFileTypes: true });

            for (const entry of entries) {
                const fullPath = path.join(dirPath, entry.name);

                if (entry.isDirectory() && !MIGRATION_CONFIG.excludeFiles.includes(entry.name)) {
                    await this.analyzeDirectory(fullPath);
                } else if (entry.isFile() && entry.name.endsWith('.js')) {
                    await this.analyzeFile(fullPath);
                }
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}:`, error.message);
        }
    }

    async analyzeFile(filePath) {
        try {
            const content = await fs.readFile(filePath, 'utf-8');
            const analysis = CodeAnalyzer.analyzeComplexity(content);
            const hasTypes = CodeAnalyzer.detectTypeAnnotations(content);
            const suggestions = CodeAnalyzer.findPotentialTypes(content);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏
            const priority = this.calculatePriority(filePath);

            const fileAnalysis = {
                path: filePath,
                relativePath: path.relative(process.cwd(), filePath),
                size: content.length,
                complexity: analysis.complexity,
                metrics: analysis.metrics,
                hasTypeAnnotations: hasTypes,
                suggestions: suggestions,
                priority: priority,
                migrationDifficulty: this.calculateMigrationDifficulty(analysis.complexity, hasTypes, suggestions.length),
                recommendedAction: this.getRecommendedAction(analysis.complexity, hasTypes, suggestions.length)
            };

            this.analysisResults.push(fileAnalysis);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        }
    }

    calculatePriority(filePath) {
        for (const [pathSegment, priority] of Object.entries(MIGRATION_CONFIG.migrationPriority)) {
            if (filePath.includes(pathSegment)) {
                return priority;
            }
        }
        return 10; // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    }

    calculateMigrationDifficulty(complexity, hasTypes, suggestionsCount) {
        if (hasTypes) return 'already-typed';
        if (complexity < 20 && suggestionsCount < 3) return 'easy';
        if (complexity < 50 && suggestionsCount < 8) return 'medium';
        return 'hard';
    }

    getRecommendedAction(complexity, hasTypes, suggestionsCount) {
        if (hasTypes) return 'rename-to-ts';
        if (complexity < 20) return 'migrate-immediately';
        if (complexity < 50) return 'migrate-with-planning';
        return 'migrate-incrementally';
    }

    generateMigrationPlan() {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        this.migrationPlan = this.analysisResults
            .sort((a, b) => {
                if (a.priority !== b.priority) return a.priority - b.priority;
                return a.complexity - b.complexity;
            });
    }

    printAnalysisReport() {
        console.log('üìä –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –ú–ò–ì–†–ê–¶–ò–ò\\n');

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const total = this.analysisResults.length;
        const byDifficulty = this.analysisResults.reduce((acc, file) => {
            acc[file.migrationDifficulty] = (acc[file.migrationDifficulty] || 0) + 1;
            return acc;
        }, {});

        console.log(`üìÅ –í—Å–µ–≥–æ JavaScript —Ñ–∞–π–ª–æ–≤: ${total}`);
        console.log(`üü¢ –õ–µ–≥–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: ${byDifficulty['easy'] || 0} —Ñ–∞–π–ª–æ–≤`);
        console.log(`üü° –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${byDifficulty['medium'] || 0} —Ñ–∞–π–ª–æ–≤`);
        console.log(`üî¥ –°–ª–æ–∂–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: ${byDifficulty['hard'] || 0} —Ñ–∞–π–ª–æ–≤`);
        console.log(`‚úÖ –£–∂–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${byDifficulty['already-typed'] || 0} —Ñ–∞–π–ª–æ–≤\\n`);

        // –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏
        console.log('üó∫Ô∏è –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É):\\n');

        this.migrationPlan.forEach((file, index) => {
            const difficultyIcon = {
                'easy': 'üü¢',
                'medium': 'üü°',
                'hard': 'üî¥',
                'already-typed': '‚úÖ'
            }[file.migrationDifficulty];

            console.log(`${index + 1}. ${difficultyIcon} ${file.relativePath}`);
            console.log(`   –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${file.complexity}/100 | –î–µ–π—Å—Ç–≤–∏–µ: ${file.recommendedAction}`);
            if (file.suggestions.length > 0) {
                console.log(`   üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é: ${file.suggestions.length}`);
            }
            console.log('');
        });

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        this.printRecommendations();
    }

    printRecommendations() {
        console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ú–ò–ì–†–ê–¶–ò–ò:\\n');

        console.log('1. üöÄ –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø (—Ñ–∞–π–ª—ã —Å –Ω–∏–∑–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é):');
        const easyFiles = this.migrationPlan.filter(f => f.migrationDifficulty === 'easy').slice(0, 5);
        easyFiles.forEach(file => {
            console.log(`   ‚Ä¢ ${file.relativePath}`);
        });

        console.log('\\n2. üìã –°–õ–ï–î–£–Æ–©–ò–ô –≠–¢–ê–ü (—Å—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å):');
        const mediumFiles = this.migrationPlan.filter(f => f.migrationDifficulty === 'medium').slice(0, 3);
        mediumFiles.forEach(file => {
            console.log(`   ‚Ä¢ ${file.relativePath}`);
        });

        console.log('\\n3. üîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ù–ê–ß–ê–õ–ê –ú–ò–ì–†–ê–¶–ò–ò:');
        console.log('   npm run ts:check          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –±–µ–∑ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏');
        console.log('   npm run ts:check-js       # –ü—Ä–æ–≤–µ—Ä–∫–∞ JS —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å');
        console.log('   npm run type-check:watch  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∏–ø–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
        console.log('   npm run ts:build          # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞');

        console.log('\\n4. üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø –í–ù–ï–î–†–ï–ù–ò–Ø:');
        console.log('   ‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å —É—Ç–∏–ª–∏—Ç –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π');
        console.log('   ‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–∏–ø—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –Ω–µ –Ω–∞—Ä—É—à–∞—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å');
        console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "any" –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤');
        console.log('   ‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞');

        console.log('\\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º—ã—Ö –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤.');
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function main() {
    try {
        const migrator = new TypeScriptMigrator();
        await migrator.analyzeProject();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = { TypeScriptMigrator, CodeAnalyzer }; 