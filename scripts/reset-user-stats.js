const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const connectDB = async () => {
    try {
        const mongoUrl = process.env.MONGO_URL || process.env.MONGODB_URI;
        if (!mongoUrl) {
            throw new Error('MongoDB URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        await mongoose.connect(mongoUrl);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
        process.exit(1);
    }
};

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
    telegramId: String,
    username: String,
    firstName: String,
    lastName: String,
    stats: {
        investigations: { type: Number, default: 0 },
        solvedCases: { type: Number, default: 0 },
        totalScore: { type: Number, default: 0 },
        accuracy: { type: Number, default: 0 },
        perfectGames: { type: Number, default: 0 },
        winStreak: { type: Number, default: 0 },
        maxWinStreak: { type: Number, default: 0 },
        fastestGame: { type: Number, default: 0 },
        averageTime: { type: Number, default: 0 },
        totalQuestions: { type: Number, default: 0 },
        dailyStreakCurrent: { type: Number, default: 0 },
        dailyStreakBest: { type: Number, default: 0 },
        level: { type: Number, default: 1 },
        experience: { type: Number, default: 0 },
        reputation: { type: Number, default: 0 }
    },
    achievements: [{ type: mongoose.Schema.Types.Mixed }],
    gamesHistory: [{ type: mongoose.Schema.Types.Mixed }],
    rank: String,
    createdAt: Date,
    lastSeen: Date
}, { collection: 'users' });

const User = mongoose.model('User', userSchema);

// –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
const createBackup = async () => {
    try {
        const users = await User.find({});
        const backupData = {
            timestamp: new Date().toISOString(),
            totalUsers: users.length,
            users: users.map(user => ({
                telegramId: user.telegramId,
                username: user.username,
                stats: user.stats,
                achievements: user.achievements,
                gamesHistory: user.gamesHistory,
                rank: user.rank
            }))
        };

        const fs = require('fs');
        const backupFileName = `backup-users-${Date.now()}.json`;
        fs.writeFileSync(backupFileName, JSON.stringify(backupData, null, 2));

        console.log(`üíæ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupFileName}`);
        console.log(`üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        return backupFileName;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', error);
        throw error;
    }
};

// –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const resetUserStats = async () => {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞—é —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

        // –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await User.find({});
        console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

        if (users.length === 0) {
            console.log('‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–±—Ä–æ—Å–∞');
            return;
        }

        // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let resetCount = 0;
        for (const user of users) {
            await User.findByIdAndUpdate(user._id, {
                $set: {
                    'stats.investigations': 0,
                    'stats.solvedCases': 0,
                    'stats.totalScore': 0,
                    'stats.accuracy': 0,
                    'stats.perfectGames': 0,
                    'stats.winStreak': 0,
                    'stats.maxWinStreak': 0,
                    'stats.fastestGame': 0,
                    'stats.averageTime': 0,
                    'stats.totalQuestions': 0,
                    'stats.dailyStreakCurrent': 0,
                    'stats.dailyStreakBest': 0,
                    'stats.level': 1,
                    'stats.experience': 0,
                    'stats.reputation': 0,
                    'achievements': [],
                    'gamesHistory': [],
                    'rank': '–ù–æ–≤–∏—á–æ–∫',
                    'lastSeen': new Date()
                }
            });
            resetCount++;

            if (resetCount % 10 === 0) {
                console.log(`‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${resetCount}/${users.length}`);
            }
        }

        console.log(`‚úÖ –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±–Ω—É–ª–µ–Ω–æ ${resetCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
        const updatedUsers = await User.find({});
        const totalInvestigations = updatedUsers.reduce((sum, user) => sum + (user.stats?.investigations || 0), 0);
        const totalScore = updatedUsers.reduce((sum, user) => sum + (user.stats?.totalScore || 0), 0);
        const totalAchievements = updatedUsers.reduce((sum, user) => sum + (user.achievements?.length || 0), 0);

        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –°–ë–†–û–°–ê:');
        console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${updatedUsers.length}`);
        console.log(`üîç –û–±—â–∏–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: ${totalInvestigations}`);
        console.log(`üíØ –û–±—â–∏–π —Å—á–µ—Ç: ${totalScore}`);
        console.log(`üèÜ –û–±—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${totalAchievements}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        throw error;
    }
};

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
const restoreFromBackup = async (backupFileName) => {
    try {
        const fs = require('fs');
        if (!fs.existsSync(backupFileName)) {
            throw new Error(`–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${backupFileName}`);
        }

        const backupData = JSON.parse(fs.readFileSync(backupFileName, 'utf8'));
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑ –±—ç–∫–∞–ø–∞: ${backupFileName}`);
        console.log(`üìÖ –î–∞—Ç–∞ –±—ç–∫–∞–ø–∞: ${backupData.timestamp}`);
        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±—ç–∫–∞–ø–µ: ${backupData.totalUsers}`);

        let restoredCount = 0;
        for (const userData of backupData.users) {
            await User.findOneAndUpdate(
                { telegramId: userData.telegramId },
                {
                    $set: {
                        stats: userData.stats,
                        achievements: userData.achievements,
                        gamesHistory: userData.gamesHistory,
                        rank: userData.rank
                    }
                }
            );
            restoredCount++;
        }

        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restoredCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        throw error;
    }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
    try {
        await connectDB();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const action = process.argv[2];

        if (action === 'restore') {
            const backupFile = process.argv[3];
            if (!backupFile) {
                console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
                console.log('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/reset-user-stats.js restore backup-users-1234567890.json');
                process.exit(1);
            }
            await restoreFromBackup(backupFile);
        } else {
            // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            const backupFile = await createBackup();

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ü–û–õ–ù–û–°–¢–¨–Æ –°–ë–†–û–°–ò–¢–¨ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!');
            console.log('üìù –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:');
            console.log('   ‚Ä¢ –û–±–Ω—É–ª–∏—Ç –≤—Å–µ –æ—á–∫–∏, —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è');
            console.log('   ‚Ä¢ –°–±—Ä–æ—Å–∏—Ç —É—Ä–æ–≤–Ω–∏ –¥–æ 1');
            console.log('   ‚Ä¢ –û—á–∏—Å—Ç–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä');
            console.log('   ‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è');
            console.log(`üíæ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${backupFile}`);
            console.log(`üîÑ –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: node scripts/reset-user-stats.js restore ${backupFile}`);

            // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
            console.log('\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ "yes" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)');

            const readline = require('readline');
            const rl = readline.createInterface({
                input: process.stdin,
                output: process.stdout
            });

            rl.question('> ', async (answer) => {
                if (answer.toLowerCase() === 'yes') {
                    console.log('\nüöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–±—Ä–æ—Å...');
                    await resetUserStats();
                    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω–∞.');
                    console.log(`üíæ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –±—ç–∫–∞–ø: ${backupFile}`);
                } else {
                    console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
                }
                rl.close();
                process.exit(0);
            });
        }
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫
main(); 