#!/usr/bin/env node
/**
 * –ü—Ä–æ–¥–∞–∫—à–Ω —Å–±–æ—Ä–∫–∞ —Å –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω —Å–±–æ—Ä–∫—É...\n');

// 1. –ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript
console.log('üì¶ –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º TypeScript...');
try {
    execSync('npm run build:server', { stdio: 'inherit' });
    execSync('npm run build:frontend', { stdio: 'inherit' });
    console.log('‚úÖ TypeScript —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω\n');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript');
    process.exit(1);
}

// 2. –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JavaScript —Ñ–∞–π–ª–æ–≤
console.log('üóúÔ∏è –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º JavaScript...');
try {
    // –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º frontend JS
    if (fs.existsSync('public/dist')) {
        const frontendFiles = fs.readdirSync('public/dist').filter(f => f.endsWith('.js'));
        frontendFiles.forEach(file => {
            const inputPath = `public/dist/${file}`;
            const outputPath = `public/dist/${file.replace('.js', '.min.js')}`;
            execSync(`npx terser ${inputPath} --compress --mangle --output ${outputPath}`, { stdio: 'inherit' });
        });
    }
    console.log('‚úÖ JavaScript –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω\n');
} catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ JavaScript (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n');
}

// 3. –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è CSS
console.log('üé® –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º CSS...');
try {
    const cssFiles = fs.readdirSync('public').filter(f => f.endsWith('.css'));
    cssFiles.forEach(file => {
        const inputPath = `public/${file}`;
        const outputPath = `public/${file.replace('.css', '.min.css')}`;
        execSync(`npx cleancss -o ${outputPath} ${inputPath}`, { stdio: 'inherit' });
    });
    console.log('‚úÖ CSS –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω\n');
} catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ CSS (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n');
}

// 4. –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è HTML
console.log('üìÑ –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º HTML...');
try {
    const htmlFiles = fs.readdirSync('public').filter(f => f.endsWith('.html'));
    htmlFiles.forEach(file => {
        const inputPath = `public/${file}`;
        const outputPath = `public/${file.replace('.html', '.min.html')}`;
        execSync(`npx html-minifier-terser --collapse-whitespace --remove-comments --minify-css --minify-js --output ${outputPath} ${inputPath}`, { stdio: 'inherit' });
    });
    console.log('‚úÖ HTML –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω\n');
} catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ HTML (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n');
}

// 5. –°–æ–∑–¥–∞–Ω–∏–µ production –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
console.log('üìÅ –°–æ–∑–¥–∞–µ–º production —Å–±–æ—Ä–∫—É...');
try {
    if (!fs.existsSync('production')) {
        fs.mkdirSync('production');
    }

    // –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
    execSync('cp -r dist production/', { stdio: 'inherit' });
    execSync('cp -r public production/', { stdio: 'inherit' });
    execSync('cp package.json production/', { stdio: 'inherit' });

    console.log('‚úÖ Production —Å–±–æ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞ –≤ –ø–∞–ø–∫–µ /production\n');
} catch (error) {
    console.log('‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ production –ø–∞–ø–∫–∏ (—Å–æ–∑–¥–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é)\n');
}

console.log('üéâ –ü—Ä–æ–¥–∞–∫—à–Ω —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
console.log('   - Backend: dist/');
console.log('   - Frontend: public/dist/');
console.log('   - –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: public/*.min.*');
console.log('   - Production: production/'); 