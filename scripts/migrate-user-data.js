/**
 * üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ö –ù–û–í–û–ô –°–ò–°–¢–ï–ú–ï
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
 * - –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
 * - –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 * - –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–∞–Ω–≥–∏ –∫ –Ω–æ–≤—ã–º
 * - –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
 */

const mongoose = require('mongoose');
const User = require('../src/models/User');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
async function connectDB() {
    try {
        await mongoose.connect(process.env.MONGO_URL);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
        process.exit(1);
    }
}

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö —Ä–∞–Ω–≥–æ–≤ –∫ –Ω–æ–≤—ã–º
const rankMapping = {
    '–ù–û–í–ò–ß–û–ö': '–°–¢–ê–ñ–ï–†',
    '–î–ï–¢–ï–ö–¢–ò–í': '–î–ï–¢–ï–ö–¢–ò–í',
    '–ò–ù–°–ü–ï–ö–¢–û–†': '–ò–ù–°–ü–ï–ö–¢–û–†',
    '–°–õ–ï–î–û–í–ê–¢–ï–õ–¨': '–°–õ–ï–î–û–í–ê–¢–ï–õ–¨',
    '–≠–ö–°–ü–ï–†–¢': '–ö–û–ú–ò–°–°–ê–†',
    '–ö–†–ò–ú–ò–ù–ê–õ–ò–°–¢': '–ì–õ–ê–í–ù–´–ô_–ò–ù–°–ü–ï–ö–¢–û–†'
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
async function migrateUsers() {
    try {
        console.log('üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await User.find({}).lean();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

        let migrated = 0;
        let errors = 0;

        for (const userData of users) {
            try {
                console.log(`üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.username || userData.telegramId}`);

                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç (–Ω–µ lean)
                const user = await User.findById(userData._id);

                if (!user) {
                    console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    continue;
                }

                let needsUpdate = false;

                // === 1. –ú–ò–ì–†–ê–¶–ò–Ø –†–ê–ù–ì–ê ===
                if (rankMapping[user.rank]) {
                    console.log(`  üìà –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥: ${user.rank} ‚Üí ${rankMapping[user.rank]}`);
                    user.rank = rankMapping[user.rank];
                    needsUpdate = true;
                }

                // === 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ü–£–¢–ê–¶–ò–ò ===
                if (!user.reputation || !user.reputation.level) {
                    console.log(`  ‚≠ê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é`);
                    user.reputation = {
                        level: 50,
                        category: '–û–ë–´–ß–ù–´–ô',
                        accuracy: 0,
                        speed: 0,
                        consistency: 0,
                        difficulty: 0
                    };
                    needsUpdate = true;
                }

                // === 3. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–û–í–´–• –ü–û–õ–ï–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
                if (!user.stats.perfectGames) {
                    console.log(`  üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`);

                    // –ü–æ–¥—Å—á–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                    user.stats.perfectGames = user.gameHistory.filter(game =>
                        game.correctAnswers === game.totalQuestions
                    ).length;

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
                    user.stats.averageTime = user.stats.averageTime || 0;
                    user.stats.fastestGame = user.stats.fastestGame || 0;

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    user.stats.dailyStreakCurrent = user.stats.dailyStreakCurrent || 0;
                    user.stats.dailyStreakBest = user.stats.dailyStreakBest || 0;
                    user.stats.lastActiveDate = user.stats.lastActiveDate || user.lastVisit || new Date();

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                    user.stats.easyGames = user.stats.easyGames || 0;
                    user.stats.mediumGames = user.stats.mediumGames || user.stats.investigations || 0; // –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã –∫–∞–∫ medium
                    user.stats.hardGames = user.stats.hardGames || 0;
                    user.stats.expertGames = user.stats.expertGames || 0;

                    needsUpdate = true;
                }

                // === 4. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê–ì–†–ê–î ===
                if (!user.rewards) {
                    console.log(`  üéÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥`);
                    user.rewards = {
                        experienceBonus: 1.0,
                        reputationBonus: 1.0,
                        nextRankProgress: 0
                    };
                    needsUpdate = true;
                }

                // === 5. –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –î–û–°–¢–ò–ñ–ï–ù–ò–ô ===
                const oldAchievements = user.achievements || [];
                const updatedAchievements = oldAchievements.map(achievement => {
                    if (!achievement.category) {
                        return {
                            ...achievement.toObject(),
                            category: '–ü–†–û–ì–†–ï–°–°',
                            rarity: '–û–ë–´–ß–ù–û–ï',
                            progress: {
                                current: 1,
                                target: 1
                            }
                        };
                    }
                    return achievement;
                });

                if (updatedAchievements.length !== oldAchievements.length ||
                    !oldAchievements.every(a => a.category)) {
                    console.log(`  üèÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
                    user.achievements = updatedAchievements;
                    needsUpdate = true;
                }

                // === 6. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –ò–ì–† ===
                if (user.gameHistory && user.gameHistory.length > 0) {
                    const updatedHistory = user.gameHistory.map(game => {
                        if (!game.difficulty) {
                            return {
                                ...game.toObject(),
                                difficulty: 'MEDIUM',
                                perfectGame: game.correctAnswers === game.totalQuestions,
                                timeSpent: game.timeSpent || 0,
                                reputationGained: 0
                            };
                        }
                        return game;
                    });

                    if (!user.gameHistory.every(g => g.difficulty)) {
                        console.log(`  üìà –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä`);
                        user.gameHistory = updatedHistory;
                        needsUpdate = true;
                    }
                }

                // === 7. –ü–ï–†–ï–°–ß–ï–¢ –†–ï–ü–£–¢–ê–¶–ò–ò –ò –†–ê–ù–ì–û–í ===
                if (needsUpdate) {
                    console.log(`  üî¢ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å`);

                    // –ë–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
                    user.reputation.accuracy = Math.min(100, user.stats.accuracy * 1.2);
                    user.reputation.consistency = Math.min(100, user.stats.winStreak * 8 + user.stats.investigations * 0.5);
                    user.reputation.difficulty = user.stats.mediumGames > 0 ? 25 : 0;
                    user.reputation.speed = 0; // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–æ–≤—ã—Ö –∏–≥—Ä–∞—Ö

                    const totalReputation = (
                        user.reputation.accuracy * 0.35 +
                        user.reputation.speed * 0.25 +
                        user.reputation.consistency * 0.25 +
                        user.reputation.difficulty * 0.15
                    );

                    user.reputation.level = Math.round(Math.max(0, Math.min(100, totalReputation)));

                    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
                    if (user.reputation.level >= 90) user.reputation.category = '–õ–ï–ì–ï–ù–î–ê–†–ù–´–ô';
                    else if (user.reputation.level >= 75) user.reputation.category = '–≠–õ–ò–¢–ù–´–ô';
                    else if (user.reputation.level >= 60) user.reputation.category = '–£–í–ê–ñ–ê–ï–ú–´–ô';
                    else if (user.reputation.level >= 30) user.reputation.category = '–û–ë–´–ß–ù–´–ô';
                    else user.reputation.category = '–ö–†–ò–¢–ò–ö–£–ï–ú–´–ô';

                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    user.updateRank();

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                    user.checkAchievements();
                }

                // === 8. –°–û–•–†–ê–ù–ï–ù–ò–ï ===
                if (needsUpdate) {
                    await user.save();
                    migrated++;
                    console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username || user.telegramId} —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
                    console.log(`     - –†–∞–Ω–≥: ${user.rank}`);
                    console.log(`     - –†–µ–ø—É—Ç–∞—Ü–∏—è: ${user.reputation.level} (${user.reputation.category})`);
                    console.log(`     - –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${user.achievements.length}`);
                } else {
                    console.log(`  ‚è≠Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username || user.telegramId} —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω`);
                }

            } catch (error) {
                errors++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.telegramId}:`, error.message);
            }
        }

        console.log('\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migrated}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
        console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    } finally {
        await mongoose.disconnect();
        console.log('üíæ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
async function main() {
    console.log('üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ö –ù–û–í–û–ô –°–ò–°–¢–ï–ú–ï –†–ï–ü–£–¢–ê–¶–ò–ò –ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô');
    console.log('=' * 70);

    await connectDB();
    await migrateUsers();

    process.exit(0);
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { migrateUsers, connectDB }; 