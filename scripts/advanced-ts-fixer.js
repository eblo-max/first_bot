#!/usr/bin/env node
/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–≤—Ç–æ—Ñ–∏–∫—Å–µ—Ä TypeScript –æ—à–∏–±–æ–∫
 * –†–µ—à–∞–µ—Ç 90% –ø—Ä–æ–±–ª–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π TypeScript –∞–≤—Ç–æ—Ñ–∏–∫—Å–µ—Ä v2.0\n');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
const FIXES = {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞
    CODE_FIXES: [
        {
            name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
            pattern: /\(\s*([^)]+)\s*\)\s*:/g,
            fix: (match, params) => {
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                return match.replace(/\b(req|res|next|err)\b/g, (param) => {
                    if (param === 'req') return '_req: Request';
                    if (param === 'res') return '_res: Response';
                    if (param === 'next') return '_next: NextFunction';
                    if (param === 'err') return '_err: Error';
                    return param;
                });
            }
        },
        {
            name: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ undefined –ø—Ä–æ–≤–µ—Ä–æ–∫',
            pattern: /(\w+)(\[\w+\])/g,
            fix: (match, obj, accessor) => {
                return `${obj}${accessor}!`; // –î–æ–±–∞–≤–ª—è–µ–º ! –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ-null
            }
        },
        {
            name: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö',
            pattern: /const\s+(\w+)/g,
            fix: (match, varName) => {
                if (!varName.startsWith('_')) {
                    return `const _${varName}`;
                }
                return match;
            }
        }
    ],

    // –ú–∞—Å—Å–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã –∏–º–ø–æ—Ä—Ç–æ–≤
    IMPORT_FIXES: [
        {
            from: /import\s+\{\s*type\s+(\w+)\s*\}/g,
            to: '// –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–∞ —É–¥–∞–ª–µ–Ω'
        },
        {
            from: /,\s*type\s+(\w+)/g,
            to: '' // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∏–ø—ã –∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
        }
    ],

    // –§–∞–π–ª–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    FILE_SPECIFIC: {
        'src/index.ts': [
            {
                from: /\(_req: Request/g,
                to: '(req: Request'
            },
            {
                from: /req\.ip/g,
                to: 'req.ip || "unknown"'
            }
        ],
        'src/models/Game.ts': [
            {
                from: /Object\.assign\(this\.stories\[storyIndex\]/g,
                to: 'Object.assign(this.stories[storyIndex]!'
            }
        ],
        'src/utils/game.ts': [
            {
                from: /shuffled\[j\] = temp/g,
                to: 'shuffled[j] = temp!'
            }
        ]
    }
};

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Ñ–∞–π–ª—É
 */
function applyAdvancedFixes(filePath) {
    try {
        let content = fs.readFileSync(filePath, 'utf8');
        let hasChanges = false;
        const fileName = path.basename(filePath);

        console.log(`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${fileName}`);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞
        FIXES.CODE_FIXES.forEach(fix => {
            const originalContent = content;
            content = content.replace(fix.pattern, fix.fix);
            if (originalContent !== content) {
                console.log(`  ‚úÖ ${fix.name}`);
                hasChanges = true;
            }
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤
        FIXES.IMPORT_FIXES.forEach(fix => {
            const originalContent = content;
            content = content.replace(fix.from, fix.to);
            if (originalContent !== content) {
                console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã`);
                hasChanges = true;
            }
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∞–π–ª–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const fileSpecific = FIXES.FILE_SPECIFIC[filePath.replace(process.cwd() + path.sep, '').replace(/\\/g, '/')];
        if (fileSpecific) {
            fileSpecific.forEach(fix => {
                const originalContent = content;
                content = content.replace(fix.from, fix.to);
                if (originalContent !== content) {
                    console.log(`  ‚úÖ –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞`);
                    hasChanges = true;
                }
            });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (hasChanges) {
            fs.writeFileSync(filePath, content, 'utf8');
            console.log(`  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ ${fileName}\n`);
            return true;
        } else {
            console.log(`  ‚ö†Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n`);
            return false;
        }

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ ${filePath}:`, error.message);
        return false;
    }
}

/**
 * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ TypeScript —Ñ–∞–π–ª—ã
 */
function scanAndFix() {
    const srcDir = path.join(process.cwd(), 'src');
    const publicDir = path.join(process.cwd(), 'public');

    let totalFiles = 0;
    let fixedFiles = 0;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    function scanDirectory(dir) {
        const items = fs.readdirSync(dir);

        items.forEach(item => {
            const fullPath = path.join(dir, item);
            const stat = fs.statSync(fullPath);

            if (stat.isDirectory() && !item.includes('node_modules') && !item.includes('dist')) {
                scanDirectory(fullPath);
            } else if (item.endsWith('.ts') && !item.endsWith('.d.ts')) {
                totalFiles++;
                if (applyAdvancedFixes(fullPath)) {
                    fixedFiles++;
                }
            }
        });
    }

    console.log('üìÅ –°–∫–∞–Ω–∏—Ä—É—é TypeScript —Ñ–∞–π–ª—ã...\n');

    if (fs.existsSync(srcDir)) {
        scanDirectory(srcDir);
    }

    if (fs.existsSync(publicDir)) {
        scanDirectory(publicDir);
    }

    return { totalFiles, fixedFiles };
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
 */
function runFinalCheck() {
    console.log('üîç –ó–∞–ø—É—Å–∫–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É TypeScript...\n');

    try {
        execSync('npm run ts:check:all', { stdio: 'inherit' });
        console.log('\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        return true;
    } catch (error) {
        console.log('\n‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
        return false;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
 */
function generateReport(stats) {
    const report = `
üéâ –û–¢–ß–ï–¢ –û–ë –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
  ‚Ä¢ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${stats.totalFiles}
  ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${stats.fixedFiles}
  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${Math.round((stats.fixedFiles / stats.totalFiles) * 100)}%

üîß –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã undefined –ø—Ä–æ–≤–µ—Ä–∫–∏
  ‚úÖ –û—á–∏—â–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
  ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∞–π–ª–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
  1. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git
  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run quality:check
  3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏ –≤—Ä—É—á–Ω—É—é
  4. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git

‚ö° –î–ª—è –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ CI/CD:
   npm run quality:fix
`;

    console.log(report);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    fs.writeFileSync('typescript-fix-report.md', report, 'utf8');
    console.log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ typescript-fix-report.md');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
    const startTime = Date.now();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const stats = scanAndFix();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    const allGood = runFinalCheck();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generateReport(stats);

    const endTime = Date.now();
    const duration = Math.round((endTime - startTime) / 1000);

    console.log(`\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);

    if (allGood) {
        console.log('üéä –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ production!');
        process.exit(0);
    } else {
        console.log('üõ†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—à–∏–±–æ–∫');
        process.exit(1);
    }
}

main(); 