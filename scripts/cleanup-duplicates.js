#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö JS —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ TS –≤–µ—Ä—Å–∏–π
 * –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ JS —Ñ–∞–π–ª—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç TS –≤–µ—Ä—Å–∏—è
 */

const fs = require('fs').promises;
const path = require('path');

// –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (JS –≤–µ—Ä—Å–∏–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å TS)
const DUPLICATE_JS_FILES = [
    'public/achievement-system.js',
    'public/auth.js',
    'public/logger.js',
    'public/game-core.js',
    'public/game-interface.js',
    'public/crime-app.js',
    'public/profile.js',
    'public/modules/api-service.js',
    'public/modules/auth-service.js',
    'public/modules/profile-config.js',
    'public/types/profile-types.js',
    'public/types.js'
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö TS —Ñ–∞–π–ª–æ–≤
const TS_EQUIVALENTS = [
    'public/achievement-system.ts',
    'public/auth.ts',
    'public/logger.ts',
    'public/game-core.ts',
    'public/game-interface.ts',
    'public/crime-app.ts',
    'public/profile.ts',
    'public/modules/api-service.ts',
    'public/modules/auth-service.ts',
    'public/modules/profile-config.ts',
    'public/types/profile-types.ts',
    'public/types.ts'
];

async function checkFileExists(filePath) {
    try {
        await fs.access(filePath);
        return true;
    } catch {
        return false;
    }
}

async function getFileSize(filePath) {
    try {
        const stats = await fs.stat(filePath);
        return stats.size;
    } catch {
        return 0;
    }
}

async function analyzeDuplicates() {
    console.log('üîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–• –§–ê–ô–õ–û–í\n');
    console.log('='.repeat(50));

    let totalJSSize = 0;
    let totalTSSize = 0;
    let duplicatesFound = 0;

    for (let i = 0; i < DUPLICATE_JS_FILES.length; i++) {
        const jsFile = DUPLICATE_JS_FILES[i];
        const tsFile = TS_EQUIVALENTS[i];

        const jsExists = await checkFileExists(jsFile);
        const tsExists = await checkFileExists(tsFile);

        if (jsExists && tsExists) {
            const jsSize = await getFileSize(jsFile);
            const tsSize = await getFileSize(tsFile);

            totalJSSize += jsSize;
            totalTSSize += tsSize;
            duplicatesFound++;

            console.log(`üìÑ ${path.basename(jsFile)}`);
            console.log(`   JS: ${Math.round(jsSize / 1024)}KB | TS: ${Math.round(tsSize / 1024)}KB`);
            console.log(`   ‚ùå –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω\n`);
        }
    }

    console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${duplicatesFound}`);
    console.log(`   –†–∞–∑–º–µ—Ä JS –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${Math.round(totalJSSize / 1024)}KB`);
    console.log(`   –†–∞–∑–º–µ—Ä TS —Ñ–∞–π–ª–æ–≤: ${Math.round(totalTSSize / 1024)}KB`);
    console.log(`   –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: ${Math.round(totalJSSize / 1024)}KB\n`);

    return duplicatesFound;
}

async function removeDuplicates() {
    console.log('üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–ö–ê–¢–û–í\n');

    let removedCount = 0;
    let savedSpace = 0;

    for (let i = 0; i < DUPLICATE_JS_FILES.length; i++) {
        const jsFile = DUPLICATE_JS_FILES[i];
        const tsFile = TS_EQUIVALENTS[i];

        const jsExists = await checkFileExists(jsFile);
        const tsExists = await checkFileExists(tsFile);

        if (jsExists && tsExists) {
            try {
                const jsSize = await getFileSize(jsFile);
                await fs.unlink(jsFile);

                removedCount++;
                savedSpace += jsSize;

                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${jsFile} (${Math.round(jsSize / 1024)}KB)`);
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${jsFile}:`, error.message);
            }
        } else if (jsExists && !tsExists) {
            console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω ${jsFile} - –Ω–µ—Ç TS –≤–µ—Ä—Å–∏–∏`);
        }
    }

    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${removedCount}`);
    console.log(`   –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: ${Math.round(savedSpace / 1024)}KB`);
}

async function updateGitignore() {
    console.log('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .gitignore...');

    const gitignoreAdditions = `
# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JS —Ñ–∞–π–ª—ã –≤ public (–µ—Å–ª–∏ –µ—Å—Ç—å TS –≤–µ—Ä—Å–∏–∏)
public/**/*.js
!public/index.html
!public/game.html  
!public/profile.html

# –ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
dist/
build/
`;

    try {
        const gitignorePath = '.gitignore';
        const currentContent = await fs.readFile(gitignorePath, 'utf8').catch(() => '');

        if (!currentContent.includes('public/**/*.js')) {
            await fs.writeFile(gitignorePath, currentContent + gitignoreAdditions);
            console.log('‚úÖ .gitignore –æ–±–Ω–æ–≤–ª–µ–Ω');
        } else {
            console.log('‚ûñ .gitignore —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .gitignore:', error.message);
    }
}

async function verifyTypescriptSetup() {
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ TypeScript...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º tsconfig.json
    try {
        const tsconfig = JSON.parse(await fs.readFile('tsconfig.json', 'utf8'));

        console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
        console.log(`   allowJs: ${tsconfig.compilerOptions?.allowJs}`);
        console.log(`   outDir: ${tsconfig.compilerOptions?.outDir}`);
        console.log(`   strict: ${tsconfig.compilerOptions?.strict}`);

        if (tsconfig.compilerOptions?.outDir === './dist') {
            console.log('‚úÖ TypeScript –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –≤ dist/ - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É outDir –≤ tsconfig.json');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è tsconfig.json:', error.message);
    }
}

async function main() {
    console.log('üö® –û–ß–ò–°–¢–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–• JS/TS –§–ê–ô–õ–û–í\n');

    try {
        const duplicatesCount = await analyzeDuplicates();

        if (duplicatesCount === 0) {
            console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            return;
        }

        console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã JS —Ñ–∞–π–ª—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å TS –≤–µ—Ä—Å–∏–∏');
        console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)');

        // –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ —É–¥–∞–ª—è–µ–º
        await removeDuplicates();
        await updateGitignore();
        await verifyTypescriptSetup();

        console.log('\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
        console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: npm start');
        console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TypeScript: npm run type-check');
        console.log('   3. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: npm run build');

    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

if (require.main === module) {
    main();
}

module.exports = { main, analyzeDuplicates, removeDuplicates }; 