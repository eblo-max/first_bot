#!/usr/bin/env node
/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–æ–∫
 */

const fs = require('fs');
const path = require('path');

console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–æ–∫...\n');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏—Ö –ø—Ä–æ–±–ª–µ–º–∞–º–∏
const fixes = [
    {
        file: 'src/controllers/gameController.ts',
        fixes: [
            {
                type: 'remove_unused_import',
                imports: ['IUser', 'UserRank', 'IGame', 'IStory', 'calculateScore', 'formatTime']
            }
        ]
    },
    {
        file: 'src/controllers/userController.ts',
        fixes: [
            {
                type: 'remove_unused_import',
                imports: ['IGameHistory']
            }
        ]
    },
    {
        file: 'src/index.ts',
        fixes: [
            {
                type: 'add_underscore_to_unused_params',
                params: ['req']
            }
        ]
    },
    {
        file: 'src/middleware/userMiddleware.ts',
        fixes: [
            {
                type: 'add_underscore_to_unused_params',
                params: ['res']
            }
        ]
    },
    {
        file: 'src/models/User.ts',
        fixes: [
            {
                type: 'remove_unused_import',
                imports: ['Model']
            }
        ]
    },
    {
        file: 'src/utils/seedData.ts',
        fixes: [
            {
                type: 'remove_unused_import',
                imports: ['mongoose']
            },
            {
                type: 'add_underscore_to_unused_vars',
                vars: ['sampleStories']
            }
        ]
    }
];

/**
 * –£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
 */
function removeUnusedImports(content, importsToRemove) {
    let updated = content;

    importsToRemove.forEach(importName => {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏
        updated = updated.replace(
            new RegExp(`(,\\s*)?\\b${importName}\\b(\\s*,)?`, 'g'),
            (match, before, after) => {
                if (before && after) return ',';
                if (before || after) return '';
                return '';
            }
        );

        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏
        updated = updated.replace(/\{\s*,\s*\}/g, '{}');
        updated = updated.replace(/\{\s*\}/g, '');

        // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–º–ø–æ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –ø—É—Å—Ç—ã–º–∏
        updated = updated.replace(/import\s*\{\s*\}\s*from\s*['"][^'"]*['"];\s*\n/g, '');
    });

    return updated;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
 */
function addUnderscoreToParams(content, params) {
    let updated = content;

    params.forEach(param => {
        // –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π
        updated = updated.replace(
            new RegExp(`\\b${param}:\\s*[^,)]+`, 'g'),
            match => match.replace(param, `_${param}`)
        );
    });

    return updated;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
 */
function addUnderscoreToVars(content, vars) {
    let updated = content;

    vars.forEach(varName => {
        updated = updated.replace(
            new RegExp(`\\bconst\\s+${varName}\\b`, 'g'),
            `const _${varName}`
        );
    });

    return updated;
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Ñ–∞–π–ª—É
 */
function applyFixes(filePath, fileFixes) {
    try {
        let content = fs.readFileSync(filePath, 'utf8');
        let hasChanges = false;

        fileFixes.forEach(fix => {
            const originalContent = content;

            switch (fix.type) {
                case 'remove_unused_import':
                    content = removeUnusedImports(content, fix.imports);
                    break;
                case 'add_underscore_to_unused_params':
                    content = addUnderscoreToParams(content, fix.params);
                    break;
                case 'add_underscore_to_unused_vars':
                    content = addUnderscoreToVars(content, fix.vars);
                    break;
            }

            if (originalContent !== content) {
                hasChanges = true;
            }
        });

        if (hasChanges) {
            fs.writeFileSync(filePath, content, 'utf8');
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
        } else {
            console.log(`‚ö†Ô∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${filePath}`);
        }

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
    let totalFixed = 0;

    fixes.forEach(({ file, fixes: fileFixes }) => {
        const filePath = path.join(process.cwd(), file);

        if (fs.existsSync(filePath)) {
            applyFixes(filePath, fileFixes);
            totalFixed++;
        } else {
            console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        }
    });

    console.log(`\nüéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFixed}`);
    console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run ts:check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git');
    console.log('   3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å–∏—Ç–µ —Ä—É—á–Ω—ã–µ –ø—Ä–∞–≤–∫–∏');
}

main(); 