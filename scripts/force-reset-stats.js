const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const connectDB = async () => {
    try {
        const mongoUrl = process.env.MONGO_URL || process.env.MONGODB_URI;
        await mongoose.connect(mongoUrl);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        process.exit(1);
    }
};

// –ü—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({}, { strict: false, collection: 'users' });
const User = mongoose.model('User', userSchema);

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
const forceResetStats = async () => {
    try {
        console.log('üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ë–†–û–° –°–¢–ê–¢–ò–°–¢–ò–ö–ò...');

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        const result = await User.updateMany(
            {}, // –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            {
                $set: {
                    'stats.investigations': 0,
                    'stats.solvedCases': 0,
                    'stats.totalScore': 0,
                    'stats.accuracy': 0,
                    'stats.perfectGames': 0,
                    'stats.winStreak': 0,
                    'stats.maxWinStreak': 0,
                    'stats.fastestGame': 0,
                    'stats.averageTime': 0,
                    'stats.totalQuestions': 0,
                    'stats.dailyStreakCurrent': 0,
                    'stats.dailyStreakBest': 0,
                    'stats.level': 1,
                    'stats.experience': 0,
                    'stats.reputation': 0,
                    'achievements': [],
                    'gamesHistory': [],
                    'rank': '–ù–æ–≤–∏—á–æ–∫',
                    'lastSeen': new Date()
                }
            }
        );

        console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.modifiedCount}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const users = await User.find({});
        const totalScore = users.reduce((sum, user) => sum + (user.stats?.totalScore || 0), 0);
        const totalAchievements = users.reduce((sum, user) => sum + (user.achievements?.length || 0), 0);

        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:');
        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
        console.log(`üíØ –û–±—â–∏–π —Å—á–µ—Ç: ${totalScore}`);
        console.log(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${totalAchievements}`);

        if (totalScore === 0 && totalAchievements === 0) {
            console.log('üéâ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–°–ü–ï–®–ù–û –û–ë–ù–£–õ–ï–ù–ê!');
        } else {
            console.log('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞:', error);
        throw error;
    }
};

// –ó–∞–ø—É—Å–∫
const main = async () => {
    try {
        await connectDB();
        await forceResetStats();
        process.exit(0);
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
};

main(); 